/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica1 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,17,18,19],$V1=[2,18],$V2=[1,14],$V3=[1,16],$V4=[1,15],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[1,28],$Vh=[1,29],$Vi=[1,30],$Vj=[1,31],$Vk=[1,32],$Vl=[1,33],$Vm=[1,34],$Vn=[17,18,19],$Vo=[1,37],$Vp=[1,38],$Vq=[2,5,16,17,18,19,20,22,23,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$Vr=[2,5,17,18,19,20,22,23,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$Vs=[2,5,20,22,23,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$Vt=[1,45],$Vu=[1,46],$Vv=[1,47],$Vw=[1,59],$Vx=[1,58],$Vy=[1,53],$Vz=[1,54],$VA=[1,57],$VB=[1,65],$VC=[1,60],$VD=[1,61],$VE=[1,64],$VF=[16,30],$VG=[2,62],$VH=[2,63],$VI=[2,5,17,18,19,20,22,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$VJ=[1,80],$VK=[1,79],$VL=[2,5,17,18,19,20,23,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$VM=[2,44],$VN=[1,93],$VO=[1,94],$VP=[2,76],$VQ=[2,77],$VR=[1,109],$VS=[1,105],$VT=[1,111],$VU=[1,110],$VV=[1,103],$VW=[1,102],$VX=[1,106],$VY=[1,107],$VZ=[1,108],$V_=[2,5,17,18,19,20,22,23,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50],$V$=[1,122],$V01=[1,118],$V11=[1,119],$V21=[1,120],$V31=[1,121],$V41=[2,72],$V51=[2,73],$V61=[1,143],$V71=[1,142],$V81=[1,141],$V91=[1,132],$Va1=[1,130],$Vb1=[1,131],$Vc1=[1,133],$Vd1=[1,134],$Ve1=[1,135],$Vf1=[1,136],$Vg1=[1,137],$Vh1=[1,138],$Vi1=[1,139],$Vj1=[1,140],$Vk1=[17,18,19,27,52,53,54,55,56,57,58,59,60,61,62,64],$Vl1=[2,5,17,18,19,20,22,23,25,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,52,53,54,55,56,57,58,59,60,61,62,64],$Vm1=[18,19,27,52,53,54,55,56,57,58,59,60,61,62,64],$Vn1=[52,64],$Vo1=[1,175],$Vp1=[1,176],$Vq1=[18,19,52,53,54,57,58,59,60,61,62,64],$Vr1=[18,19,52,57,58,64],$Vs1=[18,19,52,57,58,59,60,61,62,64],$Vt1=[17,18,19,22,25,27,52,53,54,55,56,57,58,59,60,61,62,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"LISTA":4,"EOF":5,"PUNTO":6,"LISTAS":7,"LISTA1":8,"IDS":9,"BARRAS":10,"ATRIBUTO":11,"ASTERISCO":12,"PALABRAS_R":13,"ATRIBUTO1":14,"PR":15,"TK_PARENTESIS":16,"TK_BARRA_VERTICAL":17,"TK_AND":18,"TK_OR":19,"TK_PUNTO":20,"PUNTO1":21,"TK_DBARRA":22,"TK_IDENTIFICADOR":23,"ASTERISCO1":24,"TK_BARRA":25,"TK_ARROBA":26,"TK_POR":27,"L_ATRIBUTO":28,"TK_DPUNTO":29,"TK_DDP":30,"OPCION":31,"TK_ANCESTOR":32,"TK_ANCESTOR_OR_SELF":33,"TK_ATTRIBUTE":34,"TK_CHILD":35,"TK_DESCENDANT":36,"TK_DESCENDANT_OR_SELF":37,"TK_FOLLOWING":38,"TK_FOLLOWING_SIBLING":39,"TK_NAMESPACE":40,"TK_PARENT":41,"TK_PRECEDING":42,"TK_PRECEDING_SIBLING":43,"TK_SELF":44,"TK_LAST":45,"TK_POSITION":46,"TK_NODE":47,"TK_TEXT":48,"L_ASTERISCO":49,"TK_CORCHETE_IZQUIERDO":50,"EXP":51,"TK_CORCHETE_DERECHO":52,"TK_MAS":53,"TK_MENOS":54,"TK_DIVISION":55,"TK_MODULO":56,"TK_IGUALDAD":57,"TK_DESIGUALDAD":58,"TK_MENOR":59,"TK_MENOR_IGUAL":60,"TK_MAYOR":61,"TK_MAYOR_IGUAL":62,"TK_PARENTESIS_IZQUIERDO":63,"TK_PARENTESIS_DERECHO":64,"ATRI":65,"TK_DECIMAL":66,"TK_ENTERO":67,"TK_CADENA":68,"PAL_RE":69,"L_ATRI":70,"ATRI1":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"TK_PARENTESIS",17:"TK_BARRA_VERTICAL",18:"TK_AND",19:"TK_OR",20:"TK_PUNTO",22:"TK_DBARRA",23:"TK_IDENTIFICADOR",25:"TK_BARRA",26:"TK_ARROBA",27:"TK_POR",29:"TK_DPUNTO",30:"TK_DDP",32:"TK_ANCESTOR",33:"TK_ANCESTOR_OR_SELF",34:"TK_ATTRIBUTE",35:"TK_CHILD",36:"TK_DESCENDANT",37:"TK_DESCENDANT_OR_SELF",38:"TK_FOLLOWING",39:"TK_FOLLOWING_SIBLING",40:"TK_NAMESPACE",41:"TK_PARENT",42:"TK_PRECEDING",43:"TK_PRECEDING_SIBLING",44:"TK_SELF",45:"TK_LAST",46:"TK_POSITION",47:"TK_NODE",48:"TK_TEXT",50:"TK_CORCHETE_IZQUIERDO",52:"TK_CORCHETE_DERECHO",53:"TK_MAS",54:"TK_MENOS",55:"TK_DIVISION",56:"TK_MODULO",57:"TK_IGUALDAD",58:"TK_DESIGUALDAD",59:"TK_MENOR",60:"TK_MENOR_IGUAL",61:"TK_MAYOR",62:"TK_MAYOR_IGUAL",63:"TK_PARENTESIS_IZQUIERDO",64:"TK_PARENTESIS_DERECHO",66:"TK_DECIMAL",67:"TK_ENTERO",68:"TK_CADENA"},
productions_: [0,[3,2],[4,1],[4,1],[7,2],[7,1],[8,3],[8,3],[8,3],[8,3],[8,3],[8,4],[8,1],[8,1],[8,1],[8,2],[8,1],[8,1],[8,0],[8,1],[10,1],[10,1],[10,1],[6,2],[6,1],[21,1],[21,1],[9,3],[9,3],[9,2],[9,2],[9,1],[11,4],[11,4],[11,3],[11,4],[11,4],[11,3],[28,2],[28,1],[14,2],[14,2],[14,2],[14,2],[14,0],[13,5],[13,5],[13,4],[13,4],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[31,2],[31,2],[31,2],[31,2],[31,1],[12,4],[12,4],[12,3],[12,3],[12,3],[12,3],[12,2],[12,2],[49,2],[49,1],[24,3],[24,1],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,2],[51,1],[51,2],[51,1],[51,1],[51,1],[51,2],[51,1],[51,2],[51,2],[51,1],[69,3],[65,3],[70,2],[70,1],[71,2],[71,2],[71,2],[71,2],[71,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1]; ReporteGA.agregar('S::=LISTA','S.VAL = LISTA.VAL',''); return this.$;
break;
case 2:
this.$=$$[$0]; ReporteGA.agregar('LISTA::=PUNTO','LISTA.VAL = PUNTO.VAL','');
break;
case 3:
this.$=$$[$0]; ReporteGA.agregar('LISTA::=LISTAS','LISTA.VAL = LISTAS.VAL','');
break;
case 4:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]; ReporteGA.agregar('LISTAS::=LISTASLISTA1','LISTAS.VAL = LISTAS.VAL + LISTA1.VAL','');
break;
case 5:
this.$=[$$[$0]]; ReporteGA.agregar('LISTAS::=LISTA1','LISTAS.VAL = LISTA1.VAL','');
break;
case 6: case 12:
this.$=$$[$0]; ReporteGA.agregar('LISTA1::=IDS','LISTA1.VAL = IDS.VAL','');
break;
case 7: case 13:
this.$=$$[$0]; ReporteGA.agregar('LISTA1::=ATRIBUTO','LISTA1.VAL = ATRIBUTO.VAL','');
break;
case 8: case 17:
this.$=$$[$0]; ReporteGA.agregar('LISTA1::=ASTERISCO','LISTA1.VAL = ASTERISCO.VAL','');
break;
case 9: case 16:
this.$=$$[$0]; ReporteGA.agregar('LISTA1::=PALABRAS_R','LISTA1.VAL = PALABRAS_R.VAL','');
break;
case 10:
this.$=$$[$0-2]; ReporteGA.agregar('LISTA1::=ATRIBUTO1','LISTA1.VAL = ATRIBUTO1.VAL','');
break;
case 11:
this.$=$$[$0-3]; ReporteGA.agregar('LISTA1::=PR','LISTA1.VAL = PR.VAL','');
break;
case 14:
this.$=$$[$0]; ReporteGA.agregar('LISTA1::=ATRIBUTO1','LISTA1.VAL = ATRIBUTO1.VAL','');
break;
case 15:
this.$=$$[$0-1]; ReporteGA.agregar('LISTA1::=PR','LISTA1.VAL = PR.VAL','');
break;
case 18:
ReporteGA.agregar('LISTA1::=Îµ','LISTA1.VAL = EPSILON','');
break;
case 19: case 24: case 26:
Error.add(new NodoError("Sintactico","No se esperaba el caracter: "+yytext,yylineno))
break;
case 20:
this.$=$$[$0]
break;
case 21: case 22:
this.$ = $$[$0]
break;
case 23:
this.$=$$[$0]; ReporteGA.agregar('PUNTO::=tk_punto PUNTO1','PUNTO.VAL = TK_PUNTO + PUNTO1.VAL','');
break;
case 25:
this.$=$$[$0]; ReporteGA.agregar('PUNTO1::=LISTAS','PUNTO1.VAL = LISTAS.VAL','');
break;
case 27:
this.$ = new Conca('&',$$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('IDS::=tk_dbarra tk_identificador ASTERISCO1','IDS.VAL = TK_DBARRA.VAL + TK_IDENTIFICADOR.VAL + ASTERISCO1.VAL','');
break;
case 28:
this.$ = new Conca('&',$$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('IDS::=tk_barra tk_identificador ASTERISCO1','IDS.VAL = TK_BARRA.VAL + TK_IDENTIFICADOR.VAL +  ASTERISCO1.VAL','');
break;
case 29:
this.$ = new Conca('.',$$[$0-1],$$[$0],new Dato('',_$[$0-1].first_line,_$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('IDS::=tk_dbarra tk_identificador','IDS.VAL = TK_DBARRA.VAL + TK_IDENTIFICADOR.VAL','');
break;
case 30:
this.$ = new Conca('.',$$[$0-1],$$[$0],new Dato('',_$[$0-1].first_line,_$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('IDS::=tk_barra tk_identificador','IDS.VAL = TK_BARRA.VAL + TK_IDENTIFICADOR.VAL','');
break;
case 31:
this.$ = new Conca('.','',$$[$0],new Dato('',_$[$0].first_line,_$[$0].first_column),_$[$0].first_line,_$[$0].first_column); ReporteGA.agregar('IDS::=tk_identificador','IDS.VAL = TK_IDENTIFICADOR.VAL  ','');
break;
case 32:
this.$ = new Conca('?',$$[$0-3],$$[$0-2]+$$[$0-1],new L_Atributo($$[$0],_$[$0].first_line,_$[$0].first_column),_$[$0-3].first_line,_$[$0-3].first_column); ReporteGA.agregar('ATRIBUTO::=tk_dbarra tk_arroba tk_por L_ATRIBUTO','ATRIBUTO.VAL = TK_DBARRA.VAL + TK_ARROBA.VAL + TK_POR.VAL + L_ATRIBUTO.VAL','');
break;
case 33:
this.$ = new Conca('?',$$[$0-3],$$[$0-2]+$$[$0-1],new L_Atributo($$[$0],_$[$0].first_line,_$[$0].first_column),_$[$0-3].first_line,_$[$0-3].first_column); ReporteGA.agregar('ATRIBUTO::=tk_barra tk_arroba tk_por L_ATRIBUTO','ATRIBUTO.VAL = TK_BARRA.VAL + TK_ARROBA.VAL + TK_POR.VAL + L_ATRIBUTO.VAL','');
break;
case 34:
this.$ = new Conca('?','',$$[$0-2]+$$[$0-1],new L_Atributo($$[$0],_$[$0].first_line,_$[$0].first_column),_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('ATRIBUTO::=tk_arroba tk_por L_ATRIBUTO','ATRIBUTO.VAL = TK_ARROBA.VAL + TK_POR.VAL + L_ATRIBUTO.VAL','');
break;
case 35:
this.$ = new Conca('?',$$[$0-3],$$[$0-2]+$$[$0-1],new L_Atributo($$[$0],_$[$0].first_line,_$[$0].first_column),_$[$0-3].first_line,_$[$0-3].first_column); ReporteGA.agregar('ATRIBUTO::=tk_dbarra tk_arroba tk_por L_ATRIBUTO','ATRIBUTO.VAL = TK_DBARRA.VAL + TK_ARROBA.VAL + TK_IDENTIFICADOR.VAL + L_ATRIBUTO.VAL','');
break;
case 36:
this.$ = new Conca('?',$$[$0-3],$$[$0-2]+$$[$0-1],new L_Atributo($$[$0],_$[$0].first_line,_$[$0].first_column),_$[$0-3].first_line,_$[$0-3].first_column); ReporteGA.agregar('ATRIBUTO::=tk_barra tk_arroba tk_por L_ATRIBUTO','ATRIBUTO.VAL = TK_BARRA.VAL + TK_ARROBA.VAL + TK_IDENTIFICADOR.VAL + L_ATRIBUTO.VAL','');
break;
case 37:
this.$ = new Conca('?','',$$[$0-2]+$$[$0-1],new L_Atributo($$[$0],_$[$0].first_line,_$[$0].first_column),_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('ATRIBUTO::=tk_arroba tk_por L_ATRIBUTO','ATRIBUTO.VAL = TK_ARROBA.VAL + TK_IDENTIFICADOR.VAL + L_ATRIBUTO.VAL','');
break;
case 38:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]; ReporteGA.agregar('L_ATRIBUTO::=L_ATRIBUTO ATRIBUTO1','L_ATRIBUTO.VAL = L_ATRIBUTO.VAL + ATRIBUTO1.VAL','');
break;
case 39:
this.$=[$$[$0]]; ReporteGA.agregar('L_ATRIBUTO::=ATRIBUTO1','L_ATRIBUTO.VAL = ATRIBUTO1.VAL','');
break;
case 40:
this.$ = new AtributoXpath($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('ATRIBUTO1::=tk_dbarra tk_dpunto','ATRIBUTO1.VAL = TK_DBARRA.VAL + TK_DPUNTO.VAL','');
break;
case 41:
this.$ = new AtributoXpath($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('ATRIBUTO1::=tk_dbarra tk_punto','ATRIBUTO1.VAL = TK_DBARRA.VAL + TK_PUNTO.VAL','');
break;
case 42:
this.$ = new AtributoXpath($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('ATRIBUTO1::=tk_barra tk_dpunto','ATRIBUTO1.VAL = TK_BARRA.VAL + TK_DPUNTO.VAL','');
break;
case 43:
this.$ = new AtributoXpath($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('ATRIBUTO1::=tk_barra tk_punto','ATRIBUTO1.VAL = TK_BARRA.VAL + TK_PUNTO.VAL','');
break;
case 44:
this.$ = new AtributoXpath('','',_$[$0].first_line,_$[$0].first_column); ReporteGA.agregar('ATRIBUTO1::= Îµ','ATRIBUTO1.VAL = EPSILON','');
break;
case 45:
this.$ = new Conca('!',$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); ReporteGA.agregar('PALABRAS_R::=tk_dbarra PR tk_ddp OPCION','PALABRAS_R.VAL = TK_DBARRA.VAL + PR.VAL + TK_DDP.VAL + OPCION.VAL','');
break;
case 46:
this.$ = new Conca('!',$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); ReporteGA.agregar('PALABRAS_R::=tk_barra PR tk_ddp OPCION','PALABRAS_R.VAL = TK_BARRA.VAL + PR.VAL + TK_DDP.VAL + OPCION.VAL','');
break;
case 47:
this.$ = new Conca('!',$$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); ReporteGA.agregar('PALABRAS_R::=tk_dbarra PR tk_ddp OPCION','PALABRAS_R.VAL = TK_DBARRA.VAL + PR.VAL + TK_DDP.VAL + OPCION.VAL','');
break;
case 48:
this.$ = new Conca('!',$$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); ReporteGA.agregar('PALABRAS_R::=tk_barra PR tk_ddp OPCION','PALABRAS_R.VAL = TK_BARRA.VAL + PR.VAL + TK_DDP.VAL + OPCION.VAL','');
break;
case 49:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_ancestor','PR.VAL = TK_ANCESTOR.VAL','');
break;
case 50:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_ancestor_or_self','PR.VAL = TK_ANCESTOR_OR_SELF.VAL','');
break;
case 51:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_attribute','PR.VAL = TK_ATTRIBUTE.VAL','');
break;
case 52:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_child','PR.VAL = TK_CHILD.VAL','');
break;
case 53:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_descendant','PR.VAL = TK_DESCENDANT.VAL','');
break;
case 54:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_descendant_or_self','PR.VAL = TK_DESCENDANT_OR_SELF.VAL','');
break;
case 55:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_following','PR.VAL = TK_FOLLOWING.VAL','');
break;
case 56:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_following_sibling','PR.VAL = TK_FOLLOWING_SIBLING.VAL','');
break;
case 57:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_namespace','PR.VAL = TK_NAMESPACE.VAL','');
break;
case 58:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_parent','PR.VAL = TK_PARENT.VAL','');
break;
case 59:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_preceding','PR.VAL = TK_PRECEDING.VAL','');
break;
case 60:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_preceding_sibling','PR.VAL = TK_PRECEDING_SIBLING.VAL ','');
break;
case 61: case 62: case 63: case 64: case 65:
this.$=$$[$0]; ReporteGA.agregar('PR::=tk_self','PR = TK_SELF.VAL','');
break;
case 66:
Error.add(new NodoError("Sintactico","No se esperaba el caracter: "+yytext,yylineno));
break;
case 67:
this.$ = new PR($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('OPCION::=tk_last tk_parentesis','OPCION.VAL = TK_LAST.VAL + TK_PARENTESIS.VAL','');
break;
case 68:
this.$ = new PR($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('OPCION::=tk_position tk_parentesis','OPCION.VAL = TK_NODE.VAL + TK_PARENTESIS.VAL','');
break;
case 69:
this.$ = new PR($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('OPCION::=tk_node tk_parentesis','OPCION.VAL = TK_NODE.VAL + TK_PARENTESIS.VAL','');
break;
case 70:
this.$ = new PR($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('OPCION::=tk_text tk_parentesis','OPCION.VAL = TK_TEXT.VAL + TK_PARENTESIS.VAL','');
break;
case 71:
this.$ = new PR($$[$0],_$[$0].first_line,_$[$0].first_column); ReporteGA.agregar('OPCION::=tk_identificador','OPCION.VAL = TK_IDENTIFICADOR.VAL','');
break;
case 72:
this.$ = new Conca('#',$$[$0-2],$$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); ReporteGA.agregar('ASTERISCO::=tk_punto tk_dbarra tk_por L_ASTERISCO','ASTERISCO.VAL = TK_DBARRA.VAL+ TK_POR.VAL + L_ASTERISCO.VAL','');
break;
case 73:
this.$ = new Conca('#',$$[$0-2],$$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); ReporteGA.agregar('ASTERISCO::=tk_punto tk_barra tk_por L_ASTERISCO','ASTERISCO.VAL = TK_DBARRA.VAL + TK_BARRA.VAL+ TK_POR.VAL + L_ASTERISCO.VAL','');
break;
case 74:
this.$ = new Conca('#',$$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('ASTERISCO::=tk_dbarra tk_por L_ASTERISCO','ASTERISCO.VAL = TK_DBARRA TK_POR.VAL + L_ASTERISCO.VAL','');
break;
case 75:
this.$ = new Conca('#',$$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('ASTERISCO::=tk_barra tk_por L_ASTERISCO','ASTERISCO.VAL = TK_BARRA.VAL+TK_POR.VAL+L_ASTERISCO.VAL','');
break;
case 76:
this.$ = new Conca('por',$$[$0-1],$$[$0],new Dato('',_$[$0].first_line,_$[$0].first_column),_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('ASTERISCO::=tk_punto tk_dbarra tk_por','ASTERISCO.VAL = TK_PUNTO.VAL+ TK_DBARRA.VAL+TK_POR.VAL','');
break;
case 77:
this.$ = new Conca('por',$$[$0-1],$$[$0],new Dato('',_$[$0].first_line,_$[$0].first_column),_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('ASTERISCO::=tk_punto tk_barra tk_por','ASTERISCO.VAL =TK_PUNTO.VAL+TK_BARRA.VAL+TK_POR.VAL','');
break;
case 78:
this.$ = new Conca('por',$$[$0-1],$$[$0],new Dato('',_$[$0].first_line,_$[$0].first_column),_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('ASTERISCO::=tk_dbarra tk_por','ASTERISCO.VAL = TK_DBARRA.VAL + TK_POR.VAL','');
break;
case 79:
this.$ = new Conca('por',$$[$0-1],$$[$0],new Dato('',_$[$0].first_line,_$[$0].first_column),_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('ASTERISCO::=tk_barra tk_por','ASTERISCO.VAL = TK_BARRA.VAL + TK_POR.VAL','');
break;
case 80:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]; ReporteGA.agregar('L_ASTERISCO::=L_ASTESCO ASTERISCO1','L_ASTERISCO.VAL = L_ASTERISCO.VAL + ASTERISCO1.VAL','');
break;
case 81:
this.$=[$$[$0]]; ReporteGA.agregar('L_ASTERISCO::=ASTERISCO1','L_ASTERISCO.VAL = ASTERISCO1.VAL','');
break;
case 82:
this.$ = $$[$0-1]; ReporteGA.agregar('ASTERISCO1::=tk_corchete_izquierdo EXP tk_corchete_derecho','ASTERISCO1.VAL = EXP.VAL','');
break;
case 83:
this.$ = $$[$0]; ReporteGA.agregar('ASTERISCO1::=TK_IDENTIFICADOR','ASTERISCO1.VAL = TK_IDENTIFICADOR.VAL','');
break;
case 84:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('EXP::=EXP tk_mas T','EXP.VAL = EXP1.VAL + T.VAL','');
break;
case 85:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('EXP::=EXP tk_menos T','EXP.VAL = EXP1.VAL - T.VAL','');
break;
case 86:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('T::=T tk_por F','T.VAL = T1.VAL * F.VAL','');
break;
case 87:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('T::=T tk_division F','T.VAL = T1.VAL / F.VAL','');
break;
case 88:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('T::=T tk_modulo F','T.VAL = T1.VAL MOD F.VAL','');
break;
case 89:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUALDAD,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('F::=F tk_igualdad G','F.VAL = F1.VAL == G.VAL','');
break;
case 90:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.DESIGUALDAD,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('F::=F tk_desigualdad G','F.VAL = F1.VAL != G.VAL','');
break;
case 91:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('F::=F tk_menor G','F.VAL = F1.VAL  G.VAL','');
break;
case 92:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUAL,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('F::=F tk_menor_igual G','F.VAL = F1.VAL = G.VAL','');
break;
case 93:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('F::=F tk_mayor G','F.VAL = F1.VAL  G.VAL','');
break;
case 94:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUAL,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('F::=F tk_mayor_igual G','F.VAL = F1.VAL = G.VAL','');
break;
case 95:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('F::=F tk_or G','F.VAL = F1.VAL OR G.VAL','');
break;
case 96:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('F::=F tk_and G','F.VAL = F1.VAL AND G.VAL','');
break;
case 97:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.CONCATENACION,_$[$0-2].first_line,_$[$0-2].first_column); ReporteGA.agregar('F::=F tk_barra_vertical G','F.VAL = F1.VAL | G.VAL','');
break;
case 98:
this.$ = $$[$0-1]; ReporteGA.agregar('G::=tk_parentesis_izquierdo EXP tk_parentesis_derecho','G.VAL = EXP.VAL','');
break;
case 99:
this.$ = new Operacion($$[$0-1],$$[$0],Operador.MENOS_UNARIO,_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('G::=tk_menos EXP','G.VAL = TK_MENOS.VAL * EXP.VAL','');
break;
case 100:
this.$=$$[$0];  ReporteGA.agregar('G::=ATRI','G.VAL = ATRI.VAL','');
break;
case 101:
this.$=$$[$0-1];  ReporteGA.agregar('G::=tk_arroba EXP','EXP.VAL = TK_ARROBA + EXP.VAL','');
break;
case 102:
this.$ = new Dato(Number($$[$0]),_$[$0].first_line,_$[$0].first_column); ReporteGA.agregar('G::=tk_decimal','G.VAL = TK_DECIMAL.LEXVAL','');
break;
case 103:
this.$ = new Dato(Number($$[$0]),_$[$0].first_line,_$[$0].first_column); ReporteGA.agregar('G::=tk_entero','G.VAL = TK_ENTERO.LEXVAL','');
break;
case 104:
this.$ = new Dato($$[$0],_$[$0].first_line,_$[$0].first_column); ReporteGA.agregar('G::=tk_cadena','G.VAL = TK_CADENA.VAL','');
break;
case 105:
this.$ = new Dato($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('G::=tk_identificador','G.VAL = TK_IDENTIFICADOR.VAL','');
break;
case 106:
this.$ = new Dato($$[$0],_$[$0].first_line,_$[$0].first_column); ReporteGA.agregar('G::=tk_identificador','G.VAL = TK_IDENTIFICADOR.VAL','');
break;
case 107:
this.$ = new Dato($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('G::=tk_position tk_parentesis','G.VAL = TK_POSITION.VAL','');
break;
case 108:
this.$ = new Dato($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGA.agregar('G::=tk_last tk_parentesis','G.VAL = TK_LAST.VAL','');
break;
case 109:
this.$=$$[$0];  ReporteGA.agregar('G::=PAL_RE','G.VAL = PAL_RE.VAL','');
break;
case 110:
this.$ = new PAL_RE($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);  ReporteGA.agregar('PAL_RE::=PR tk_ddp OPCION','PAL_RE.VAL = PR.VAL + TK_DDP.VAL + OPCION.VAL','');
break;
case 111:
this.$ = new Atri($$[$0-2]+$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);  ReporteGA.agregar('ATRI::=tk_arroba tk_por L_ATRI','ATRI.VAL = TK_ARROBA.VAL + TK_POR.VAL + L_ATRI.VAL','');
break;
case 112:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];  ReporteGA.agregar('L_ATRI::=L_ATRI ATRI1','L_ATRI.VAL = L_ATRI.VAL + ATRI1.VAL','');
break;
case 113:
this.$=[$$[$0]];  ReporteGA.agregar('ATRI1::=ATRI1','L_ATRI.VAL = ATRI1.VAL','');
break;
case 114:
this.$ = new AtributoXpath($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);  ReporteGA.agregar('ATRI1::=tk_dbarra tk_dpunto','ATRI1.VAL = TK_DBARRA.VAL + TK_DPUNTO.VAL','');
break;
case 115:
this.$ = new AtributoXpath($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);  ReporteGA.agregar('ATRI1::=tk_dbarra tk_punto' ,'ATRI1.VAL = TK_DBARRA.VAL + TK_PUNTO.VAL','');
break;
case 116:
this.$ = new AtributoXpath($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);  ReporteGA.agregar('ATRI1::=tk_barra  tk_dpunto','ATRI1.VAL = TK_BARRA.VAL  + TK_TK_DPUNTO.VAL','');
break;
case 117:
this.$ = new AtributoXpath($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);  ReporteGA.agregar('ATRI1::=tk_barra  tk_punto' ,'ATRI1.VAL = TK_BARRA.VAL  + TK_PUNTO.VAL','');
break;
case 118:
 ReporteGA.agregar('ATRI1::=Îµ','ATRI1.VAL = EPSILON','');
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,7:4,8:7,9:8,11:9,12:10,13:11,14:12,15:13,2:[1,6],20:[1,5],22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),{1:[3]},{5:[1,35]},{5:[2,2]},o($Vn,$V1,{9:8,11:9,12:10,13:11,14:12,15:13,8:36,2:$Vo,5:[2,3],20:$Vp,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($V0,$V1,{8:7,9:8,11:9,12:10,13:11,14:12,15:13,21:39,7:42,2:[1,43],20:$Vp,22:[1,40],23:$V3,25:[1,41],26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($Vq,[2,24]),o($Vr,[2,5]),o($Vs,[2,12],{10:44,17:$Vt,18:$Vu,19:$Vv}),o($Vs,[2,13],{10:48,17:$Vt,18:$Vu,19:$Vv}),o($Vs,[2,17],{10:49,17:$Vt,18:$Vu,19:$Vv}),o($Vs,[2,16],{10:50,17:$Vt,18:$Vu,19:$Vv}),o($Vs,[2,14],{10:51,17:$Vt,18:$Vu,19:$Vv}),{16:[1,52]},{2:$Vw,15:56,20:$Vx,23:$Vy,26:$Vz,27:[1,55],29:$VA,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm},{2:$Vw,15:63,20:$VB,23:$VC,26:$VD,27:[1,62],29:$VE,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm},o($Vr,[2,31]),{23:[1,67],27:[1,66]},o($VF,[2,49]),o($VF,[2,50]),o($VF,[2,51]),o($VF,[2,52]),o($VF,[2,53]),o($VF,[2,54]),o($VF,[2,55]),o($VF,[2,56]),o($VF,[2,57]),o($VF,[2,58]),o($VF,[2,59]),o($VF,[2,60]),o($VF,[2,61]),o($VF,$VG),o($VF,$VH),o($VF,[2,64]),o($VF,[2,65]),{1:[2,1]},o($Vr,[2,4]),o($Vq,[2,19]),{22:[1,68],25:[1,69]},{5:[2,23]},{2:$Vw,15:56,20:$Vx,23:$Vy,26:$Vz,27:[1,70],29:$VA,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm},{2:$Vw,15:63,20:$VB,23:$VC,26:$VD,27:[1,71],29:$VE,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm},o($Vn,$V1,{9:8,11:9,12:10,13:11,14:12,15:13,8:36,2:$Vo,5:[2,25],20:$Vp,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($Vq,[2,26]),o($V0,$V1,{9:8,11:9,12:10,13:11,14:12,15:13,8:72,2:$Vo,20:$Vp,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($Vr,[2,20]),o($Vr,[2,21]),o($Vr,[2,22]),o($V0,$V1,{9:8,11:9,12:10,13:11,14:12,15:13,8:73,2:$Vo,20:$Vp,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($V0,$V1,{9:8,11:9,12:10,13:11,14:12,15:13,8:74,2:$Vo,20:$Vp,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($V0,$V1,{9:8,11:9,12:10,13:11,14:12,15:13,8:75,2:$Vo,20:$Vp,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($V0,$V1,{9:8,11:9,12:10,13:11,14:12,15:13,8:76,2:$Vo,20:$Vp,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($Vs,[2,15],{10:77,17:$Vt,18:$Vu,19:$Vv}),o($VI,[2,29],{24:78,23:$VJ,50:$VK}),{23:[1,82],27:[1,81]},o($VI,[2,78],{49:83,24:84,23:$VJ,50:$VK}),{30:[1,85]},o($Vr,[2,40]),o($Vr,[2,41]),{30:[2,66]},o($VI,[2,30],{24:86,23:$VJ,50:$VK}),{23:[1,88],27:[1,87]},o($VI,[2,79],{24:84,49:89,23:$VJ,50:$VK}),{30:[1,90]},o($Vr,[2,42]),o($Vr,[2,43]),o($VL,$VM,{28:91,14:92,22:$VN,25:$VO}),o($VL,$VM,{14:92,28:95,22:$VN,25:$VO}),{27:[1,96]},{27:[1,97]},o($VI,$VP,{24:84,49:98,23:$VJ,50:$VK}),o($VI,$VQ,{24:84,49:99,23:$VJ,50:$VK}),o($Vr,[2,6]),o($Vr,[2,7]),o($Vr,[2,8]),o($Vr,[2,9]),o($Vr,[2,10]),o($V0,$V1,{9:8,11:9,12:10,13:11,14:12,15:13,8:100,2:$Vo,20:$Vp,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($Vr,[2,27]),{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:101,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},o($V_,[2,83]),o($VL,$VM,{14:92,28:114,22:$VN,25:$VO}),o($VL,$VM,{14:92,28:115,22:$VN,25:$VO}),o($VI,[2,74],{24:116,23:$VJ,50:$VK}),o($V_,[2,81]),{23:$V$,31:117,45:$V01,46:$V11,47:$V21,48:$V31},o($Vr,[2,28]),o($VL,$VM,{14:92,28:123,22:$VN,25:$VO}),o($VL,$VM,{14:92,28:124,22:$VN,25:$VO}),o($VI,[2,75],{24:116,23:$VJ,50:$VK}),{23:$V$,31:125,45:$V01,46:$V11,47:$V21,48:$V31},o($VL,[2,34],{14:126,22:$VN,25:$VO}),o($Vr,[2,39]),{20:$Vx,29:$VA},{20:$VB,29:$VE},o($VL,[2,37],{14:126,22:$VN,25:$VO}),o($VI,$VP,{24:84,49:127,23:$VJ,50:$VK}),o($VI,$VQ,{24:84,49:128,23:$VJ,50:$VK}),o($VI,$V41,{24:116,23:$VJ,50:$VK}),o($VI,$V51,{24:116,23:$VJ,50:$VK}),o($Vr,[2,11]),{17:$V61,18:$V71,19:$V81,27:$V91,52:[1,129],53:$Va1,54:$Vb1,55:$Vc1,56:$Vd1,57:$Ve1,58:$Vf1,59:$Vg1,60:$Vh1,61:$Vi1,62:$Vj1},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:144,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:145,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},o($Vk1,[2,100]),{2:$Vw,15:113,23:$VR,26:$VS,27:[1,147],32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:146,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},o($Vk1,[2,102]),o($Vk1,[2,103]),o($Vk1,[2,104]),o($Vk1,[2,106],{22:[1,148]}),{16:[1,149],30:$VH},{16:[1,150],30:$VG},o($Vk1,[2,109]),{30:[1,151]},o($VL,[2,32],{14:126,22:$VN,25:$VO}),o($VL,[2,35],{14:126,22:$VN,25:$VO}),o($V_,[2,80]),o($VI,[2,47],{24:152,23:$VJ,50:$VK}),{16:[1,153]},{16:[1,154]},{16:[1,155]},{16:[1,156]},o($Vl1,[2,71]),o($VL,[2,33],{14:126,22:$VN,25:$VO}),o($VL,[2,36],{14:126,22:$VN,25:$VO}),o($VI,[2,48],{24:157,23:$VJ,50:$VK}),o($Vr,[2,38]),o($VI,$V41,{24:116,23:$VJ,50:$VK}),o($VI,$V51,{24:116,23:$VJ,50:$VK}),o($V_,[2,82]),{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:158,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:159,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:160,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:161,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:162,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:163,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:164,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:165,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:166,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:167,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:168,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:169,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:170,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{2:$Vw,15:113,23:$VR,26:$VS,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VT,46:$VU,47:$Vl,48:$Vm,51:171,54:$VV,63:$VW,65:104,66:$VX,67:$VY,68:$VZ,69:112},{17:$V61,18:$V71,19:$V81,27:$V91,53:$Va1,54:$Vb1,55:$Vc1,56:$Vd1,57:$Ve1,58:$Vf1,59:$Vg1,60:$Vh1,61:$Vi1,62:$Vj1,64:[1,172]},o($Vm1,[2,99],{17:$V61}),o($Vn1,[2,101],{17:$V61,18:$V71,19:$V81,27:$V91,53:$Va1,54:$Vb1,55:$Vc1,56:$Vd1,57:$Ve1,58:$Vf1,59:$Vg1,60:$Vh1,61:$Vi1,62:$Vj1}),o($Vk1,[2,118],{70:173,71:174,22:$Vo1,25:$Vp1}),o($Vk1,[2,105]),o($Vk1,[2,107]),o($Vk1,[2,108]),{23:$V$,31:177,45:$V01,46:$V11,47:$V21,48:$V31},o($Vr,[2,45]),o($Vl1,[2,67]),o($Vl1,[2,68]),o($Vl1,[2,69]),o($Vl1,[2,70]),o($Vr,[2,46]),o($Vq1,[2,84],{17:$V61,27:$V91,55:$Vc1,56:$Vd1}),o($Vq1,[2,85],{17:$V61,27:$V91,55:$Vc1,56:$Vd1}),o($Vm1,[2,86],{17:$V61}),o($Vm1,[2,87],{17:$V61}),o($Vm1,[2,88],{17:$V61}),o($Vr1,[2,89],{17:$V61,27:$V91,53:$Va1,54:$Vb1,55:$Vc1,56:$Vd1,59:$Vg1,60:$Vh1,61:$Vi1,62:$Vj1}),o($Vr1,[2,90],{17:$V61,27:$V91,53:$Va1,54:$Vb1,55:$Vc1,56:$Vd1,59:$Vg1,60:$Vh1,61:$Vi1,62:$Vj1}),o($Vs1,[2,91],{17:$V61,27:$V91,53:$Va1,54:$Vb1,55:$Vc1,56:$Vd1}),o($Vs1,[2,92],{17:$V61,27:$V91,53:$Va1,54:$Vb1,55:$Vc1,56:$Vd1}),o($Vs1,[2,93],{17:$V61,27:$V91,53:$Va1,54:$Vb1,55:$Vc1,56:$Vd1}),o($Vs1,[2,94],{17:$V61,27:$V91,53:$Va1,54:$Vb1,55:$Vc1,56:$Vd1}),o([19,52,64],[2,95],{17:$V61,18:$V71,27:$V91,53:$Va1,54:$Vb1,55:$Vc1,56:$Vd1,57:$Ve1,58:$Vf1,59:$Vg1,60:$Vh1,61:$Vi1,62:$Vj1}),o([18,19,52,64],[2,96],{17:$V61,27:$V91,53:$Va1,54:$Vb1,55:$Vc1,56:$Vd1,57:$Ve1,58:$Vf1,59:$Vg1,60:$Vh1,61:$Vi1,62:$Vj1}),o($Vn1,[2,97],{17:$V61,18:$V71,19:$V81,27:$V91,53:$Va1,54:$Vb1,55:$Vc1,56:$Vd1,57:$Ve1,58:$Vf1,59:$Vg1,60:$Vh1,61:$Vi1,62:$Vj1}),o($Vk1,[2,98]),o($Vk1,[2,111],{71:178,22:$Vo1,25:$Vp1}),o($Vt1,[2,113]),{20:[1,180],29:[1,179]},{20:[1,182],29:[1,181]},o($Vk1,[2,110]),o($Vt1,[2,112]),o($Vt1,[2,114]),o($Vt1,[2,115]),o($Vt1,[2,116]),o($Vt1,[2,117])],
defaultActions: {3:[2,2],35:[2,1],39:[2,23],59:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

   


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 62;
break;
case 1:return 60;
break;
case 2:return 59;
break;
case 3:return 61;
break;
case 4:return 57;
break;
case 5:return 58;
break;
case 6:return 53;
break;
case 7:return 54;
break;
case 8:return 27;
break;
case 9:return 17;
break;
case 10:return 55;
break;
case 11:return 18;
break;
case 12:return 19;
break;
case 13:return 56;
break;
case 14:return 16;
break;
case 15:return 63;
break;
case 16:return 64;
break;
case 17:return 50;
break;
case 18:return 52;
break;
case 19:return 30;
break;
case 20:return 22
break;
case 21:return 25
break;
case 22:return 26
break;
case 23:return 29
break;
case 24:return 20
break;
case 25:return 32
break;
case 26:return 33
break;
case 27:return 34
break;
case 28:return 35
break;
case 29:return 36
break;
case 30:return 37
break;
case 31:return 38
break;
case 32:return 39
break;
case 33:return 40
break;
case 34:return 41
break;
case 35:return 42
break;
case 36:return 43
break;
case 37:return 44
break;
case 38:return 45
break;
case 39:return 46
break;
case 40:return 47
break;
case 41:return 48
break;
case 42:/QUITA ESPACIOS EN BLANCO/
break;
case 43: return 66; 
break;
case 44: return 67; 
break;
case 45: return 23; 
break;
case 46: return 68; 
break;
case 47:  return 5;   
break;
case 48:Error.add(new NodoError("Lexico","No se esperaba el caracter: "+yy_.yytext,yy_.yylineno))
break;
}
},
rules: [/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:!=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\|)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:mod\b)/,/^(?:\(\))/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/,/^(?:[[\']([^\'\n]|(\\'))*[\']|[[\"]([^\"\n]|(\\"))*[\"])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica1;
exports.Parser = Gramatica1.Parser;
exports.parse = function () { return Gramatica1.parse.apply(Gramatica1, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}