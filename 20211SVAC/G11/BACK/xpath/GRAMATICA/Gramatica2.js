/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,17,18,19],$V1=[2,18],$V2=[1,14],$V3=[1,34],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,25],$Vf=[1,26],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[1,30],$Vk=[1,31],$Vl=[1,32],$Vm=[1,33],$Vn=[1,41],$Vo=[2,5,15,17,18,19,20,22,23,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$Vp=[1,43],$Vq=[2,5,20,22,23,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,59],$Vv=[1,57],$Vw=[1,58],$Vx=[1,53],$Vy=[1,56],$Vz=[1,64],$VA=[1,65],$VB=[1,60],$VC=[1,63],$VD=[15,30],$VE=[2,62],$VF=[2,63],$VG=[2,5,17,18,19,20,22,23,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$VH=[2,5,17,18,19,20,22,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$VI=[1,83],$VJ=[1,82],$VK=[2,5,17,18,19,20,23,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],$VL=[2,44],$VM=[1,93],$VN=[1,94],$VO=[2,76],$VP=[2,77],$VQ=[1,115],$VR=[1,111],$VS=[1,117],$VT=[1,116],$VU=[1,109],$VV=[1,112],$VW=[1,113],$VX=[1,114],$VY=[2,5,17,18,19,20,22,23,25,26,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50],$VZ=[1,125],$V_=[1,121],$V$=[1,122],$V01=[1,123],$V11=[1,124],$V21=[2,72],$V31=[2,73],$V41=[17,18,19,27,52,59,60,63,64,65,66,67,68,72],$V51=[2,87],$V61=[1,134],$V71=[1,135],$V81=[17,18,19,52,55,56,63,64,65,66,67,68,72],$V91=[2,92],$Va1=[1,137],$Vb1=[1,138],$Vc1=[1,139],$Vd1=[17,18,19,27,52,55,56,59,60,72],$Ve1=[2,100],$Vf1=[1,141],$Vg1=[1,142],$Vh1=[1,143],$Vi1=[1,144],$Vj1=[1,145],$Vk1=[1,146],$Vl1=[27,52,55,56,59,60,63,64,65,66,67,68,72],$Vm1=[2,105],$Vn1=[1,150],$Vo1=[1,149],$Vp1=[1,148],$Vq1=[17,18,19,27,52,55,56,59,60,63,64,65,66,67,68,72],$Vr1=[2,5,17,18,19,20,22,23,25,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,52,55,56,59,60,63,64,65,66,67,68,72],$Vs1=[1,180],$Vt1=[1,181],$Vu1=[17,18,19,22,25,27,52,55,56,59,60,63,64,65,66,67,68,72];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"LISTA":4,"EOF":5,"PUNTO":6,"LISTAS":7,"LISTA1":8,"ATRIBUTO":9,"BARRAS":10,"ASTERISCO":11,"PALABRAS_R":12,"ATRIBUTO1":13,"PR":14,"TK_PARENTESIS":15,"IDS":16,"TK_BARRA_VERTICAL":17,"TK_AND":18,"TK_OR":19,"TK_PUNTO":20,"PUNTO1":21,"TK_DBARRA":22,"TK_IDENTIFICADOR":23,"ASTERISCO1":24,"TK_BARRA":25,"TK_ARROBA":26,"TK_POR":27,"L_ATRIBUTO":28,"TK_DPUNTO":29,"TK_DDP":30,"OPCION":31,"TK_ANCESTOR":32,"TK_ANCESTOR_OR_SELF":33,"TK_ATTRIBUTE":34,"TK_CHILD":35,"TK_DESCENDANT":36,"TK_DESCENDANT_OR_SELF":37,"TK_FOLLOWING":38,"TK_FOLLOWING_SIBLING":39,"TK_NAMESPACE":40,"TK_PARENT":41,"TK_PRECEDING":42,"TK_PRECEDING_SIBLING":43,"TK_SELF":44,"TK_LAST":45,"TK_POSITION":46,"TK_NODE":47,"TK_TEXT":48,"L_ASTERISCO":49,"TK_CORCHETE_IZQUIERDO":50,"EXP":51,"TK_CORCHETE_DERECHO":52,"EXP1":53,"EXP_P":54,"TK_MAS":55,"TK_MENOS":56,"EXP2":57,"EXP1_P":58,"TK_DIVISION":59,"TK_MODULO":60,"EXP3":61,"EXP2_P":62,"TK_MENOR":63,"TK_MAYOR":64,"TK_MENOR_IGUAL":65,"TK_MAYOR_IGUAL":66,"TK_IGUALDAD":67,"TK_DESIGUALDAD":68,"EXP4":69,"EXP3_P":70,"TK_PARENTESIS_IZQUIERDO":71,"TK_PARENTESIS_DERECHO":72,"ATRI":73,"TK_DECIMAL":74,"TK_ENTERO":75,"TK_CADENA":76,"PAL_RE":77,"L_ATRI":78,"ATRI1":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"TK_PARENTESIS",17:"TK_BARRA_VERTICAL",18:"TK_AND",19:"TK_OR",20:"TK_PUNTO",22:"TK_DBARRA",23:"TK_IDENTIFICADOR",25:"TK_BARRA",26:"TK_ARROBA",27:"TK_POR",29:"TK_DPUNTO",30:"TK_DDP",32:"TK_ANCESTOR",33:"TK_ANCESTOR_OR_SELF",34:"TK_ATTRIBUTE",35:"TK_CHILD",36:"TK_DESCENDANT",37:"TK_DESCENDANT_OR_SELF",38:"TK_FOLLOWING",39:"TK_FOLLOWING_SIBLING",40:"TK_NAMESPACE",41:"TK_PARENT",42:"TK_PRECEDING",43:"TK_PRECEDING_SIBLING",44:"TK_SELF",45:"TK_LAST",46:"TK_POSITION",47:"TK_NODE",48:"TK_TEXT",50:"TK_CORCHETE_IZQUIERDO",52:"TK_CORCHETE_DERECHO",55:"TK_MAS",56:"TK_MENOS",59:"TK_DIVISION",60:"TK_MODULO",63:"TK_MENOR",64:"TK_MAYOR",65:"TK_MENOR_IGUAL",66:"TK_MAYOR_IGUAL",67:"TK_IGUALDAD",68:"TK_DESIGUALDAD",71:"TK_PARENTESIS_IZQUIERDO",72:"TK_PARENTESIS_DERECHO",74:"TK_DECIMAL",75:"TK_ENTERO",76:"TK_CADENA"},
productions_: [0,[3,2],[4,1],[4,1],[7,2],[7,1],[8,3],[8,3],[8,3],[8,3],[8,4],[8,3],[8,1],[8,1],[8,2],[8,1],[8,1],[8,1],[8,0],[8,1],[10,1],[10,1],[10,1],[6,2],[6,1],[21,1],[21,1],[16,3],[16,3],[16,2],[16,2],[16,1],[9,4],[9,4],[9,3],[9,4],[9,4],[9,3],[28,2],[28,1],[13,2],[13,2],[13,2],[13,2],[13,0],[12,5],[12,5],[12,4],[12,4],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[31,2],[31,2],[31,2],[31,2],[31,1],[11,4],[11,4],[11,3],[11,3],[11,3],[11,3],[11,2],[11,2],[49,2],[49,1],[24,3],[24,1],[51,2],[54,3],[54,3],[54,0],[53,2],[58,3],[58,3],[58,3],[58,0],[57,2],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,0],[61,2],[70,3],[70,3],[70,3],[70,0],[69,3],[69,1],[69,2],[69,1],[69,1],[69,1],[69,1],[69,2],[69,2],[69,1],[77,3],[73,3],[78,2],[78,1],[79,2],[79,2],[79,2],[79,2],[79,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1]; ReporteGD.agregar('<S>::=<LISTA>','S.VAL = LISTA.VAL',''); return this.$;
break;
case 2:
this.$=$$[$0]; ReporteGD.agregar('<LISTA>::=<PUNTO>','LISTA.VAL = PUNTO.VAL','');
break;
case 3:
this.$=$$[$0]; ReporteGD.agregar('<LISTA>::=<LISTAS>','LISTA.VAL = LISTAS.VAL','');
break;
case 4:
$$[$0].push($$[$0-1]); this.$=$$[$0]; ReporteGD.agregar('<LISTAS>::=<LISTA1><LISTAS>','LISTAS.VAL = LISTA1.VAL + LISTAS.VAL','');
break;
case 5:
this.$=[$$[$0]]; ReporteGD.agregar('<LISTAS>::=<LISTA1>','LISTAS.VAL = LISTA1.VAL','');
break;
case 6:
this.$=$$[$0]; ReporteGD.agregar('<LISTA1>::=<ATRIBUTO>','LISTA1.VAL = ATRIBUTO.VAL + BARRAS.VAL + LISTA1.VAL','');
break;
case 7:
this.$=$$[$0]; ReporteGD.agregar('<LISTA1>::=<ASTERISCO>','LISTA1.VAL = ASTERISCO.VAL + BARRAS.VAL + LISTA1.VAL','');
break;
case 8:
this.$=$$[$0]; ReporteGD.agregar('<LISTA1>::=<PALABRAS_R>','LISTA1.VAL = PALABRAS_R.VAL + BARRAS.VAL + LISTA1.VAL','');
break;
case 9:
this.$=$$[$0-2]; ReporteGD.agregar('<LISTA1>::=<ATRIBUTO1>','LISTA1.VAL = ATRIBUTO1.VAL + BARRAS.VAL + LISTA1.VAL','');
break;
case 10:
this.$=$$[$0-3]; ReporteGD.agregar('<LISTA1>::=<PR>','LISTA1.VAL = PR.VAL + TK_PARENTESIS.VAL + BARRAS.VAL + LISTA1.VAL','');
break;
case 11:
this.$=$$[$0]; ReporteGD.agregar('<LISTA1>::=<IDS>','LISTA1.VAL = IDS.VAL + BARRAS.VAL + LISTA1.VAL','');
break;
case 12:
this.$=$$[$0]; ReporteGD.agregar('<LISTA1>::=<ATRIBUTO>','LISTA1.VAL = ATRIBUTO.VAL','');
break;
case 13:
this.$=$$[$0]; ReporteGD.agregar('<LISTA1>::=<ATRIBUTO1>','LISTA1.VAL = ATRIBUTO1.VAL','');
break;
case 14:
this.$=$$[$0-1]; ReporteGD.agregar('<LISTA1>::=<PR>','LISTA1.VAL = PR.VAL+ TK_PARENTESIS.VAL','');
break;
case 15:
this.$=$$[$0]; ReporteGD.agregar('<LISTA1>::=<PALABRAS_R>','LISTA1.VAL = PALABRAS_R.VAL','');
break;
case 16:
this.$=$$[$0]; ReporteGD.agregar('<LISTA1>::=<IDS>','LISTA1.VAL = IDS.VAL','');
break;
case 17:
this.$=$$[$0]; ReporteGD.agregar('<LISTA1>::=<ASTERISCO>','LISTA1.VAL = ASTERISCO.VAL','');
break;
case 18:
ReporteGD.agregar('<LISTA1>::=Îµ','LISTA1.VAL = EPSILON','');
break;
case 19: case 24: case 26:
Errores.Error.add(new CNodoError.NodoError("Sintactico","No se esperaba el caracter: "+yytext,yylineno))
break;
case 20:
this.$=$$[$0]
break;
case 21: case 22:
this.$ = $$[$0]
break;
case 23:
this.$=$$[$0]; ReporteGD.agregar('<PUNTO>::=tk_punto <PUNTO1>','PUNTO.VAL = TK_PUNTO.VAL + PUNTO1.VAL','');
break;
case 25:
this.$=$$[$0]; ReporteGD.agregar('<PUNTO1>::=<LISTAS>','PUNTO1.VAL = LISTAS.VAL','');
break;
case 27:
this.$ = new Conca('&',$$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); ReporteGD.agregar('<IDS>::=tk_dbarra tk_identificador <ASTERISCO1>','IDS.VAL = TK_DBARRA.VAL + TK_IDENTIFICADOR.VAL + ASTERISCO1.VAL','');
break;
case 28:
this.$ = new Conca('&',$$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); ReporteGD.agregar('<IDS>::=tk_barra tk_identificador <ASTERISCO1>','IDS.VAL = TK_BARRA.VAL + TK_IDENTIFICADOR.VAL +  ASTERISCO1.VAL','');
break;
case 29:
this.$ = new Conca('.',$$[$0-1],$$[$0],new Dato('',_$[$0-1].first_line,_$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column); ReporteGD.agregar('<IDS>::=tk_dbarra tk_identificador','IDS.VAL = TK_DBARRA.VAL + TK_IDENTIFICADOR.VAL','');
break;
case 30:
this.$ = new Conca('.',$$[$0-1],$$[$0],new Dato('',_$[$0-1].first_line,_$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column); ReporteGD.agregar('<IDS>::=tk_barra tk_identificador','IDS.VAL = TK_BARRA.VAL + TK_IDENTIFICADOR.VAL','');
break;
case 31:
this.$ = new Conca('.','',$$[$0],new Dato('',_$[$0].first_line,_$[$0].first_column),_$[$0].first_line,_$[$0].first_column); ReporteGD.agregar('<IDS>::=tk_identificador','IDS.VAL = TK_IDENTIFICADOR.VAL  ','');
break;
case 32:
this.$ = new Conca('?',$$[$0-3],$$[$0-2]+$$[$0-1],new L_Atributo($$[$0],_$[$0].first_line,_$[$0].first_column),_$[$0-3].first_line,_$[$0-3].first_column); ReporteGD.agregar('<ATRIBUTO>::=tk_dbarra tk_arroba tk_por <L_ATRIBUTO>','ATRIBUTO.VAL = TK_DBARRA.VAL + TK_ARROBA.VAL + TK_POR.VAL + L_ATRIBUTO.VAL','');
break;
case 33:
this.$ = new Conca('?',$$[$0-3],$$[$0-2]+$$[$0-1],new L_Atributo($$[$0],_$[$0].first_line,_$[$0].first_column),_$[$0-3].first_line,_$[$0-3].first_column); ReporteGD.agregar('<ATRIBUTO>::=tk_barra tk_arroba tk_por <L_ATRIBUTO>','ATRIBUTO.VAL = TK_BARRA.VAL + TK_ARROBA.VAL + TK_POR.VAL + L_ATRIBUTO.VAL','');
break;
case 34:
this.$ = new Conca('?','',$$[$0-2]+$$[$0-1],new L_Atributo($$[$0],_$[$0].first_line,_$[$0].first_column),_$[$0-2].first_line,_$[$0-2].first_column); ReporteGD.agregar('<ATRIBUTO>::=tk_arroba tk_por <L_ATRIBUTO>','ATRIBUTO.VAL = TK_ARROBA.VAL + TK_POR.VAL + L_ATRIBUTO.VAL','');
break;
case 35:
this.$ = new Conca('?',$$[$0-3],$$[$0-2]+$$[$0-1],new L_Atributo($$[$0],_$[$0].first_line,_$[$0].first_column),_$[$0-3].first_line,_$[$0-3].first_column); ReporteGD.agregar('<ATRIBUTO>::=tk_dbarra tk_arroba tk_por <L_ATRIBUTO>','ATRIBUTO.VAL = TK_DBARRA.VAL + TK_ARROBA.VAL + TK_IDENTIFICADOR.VAL + L_ATRIBUTO.VAL','');
break;
case 36:
this.$ = new Conca('?',$$[$0-3],$$[$0-2]+$$[$0-1],new L_Atributo($$[$0],_$[$0].first_line,_$[$0].first_column),_$[$0-3].first_line,_$[$0-3].first_column); ReporteGD.agregar('<ATRIBUTO>::=tk_barra tk_arroba tk_por <L_ATRIBUTO>','ATRIBUTO.VAL = TK_BARRA.VAL + TK_ARROBA.VAL + TK_IDENTIFICADOR.VAL + L_ATRIBUTO.VAL','');
break;
case 37:
this.$ = new Conca('?','',$$[$0-2]+$$[$0-1],new L_Atributo($$[$0],_$[$0].first_line,_$[$0].first_column),_$[$0-2].first_line,_$[$0-2].first_column); ReporteGD.agregar('<ATRIBUTO>::=tk_arroba tk_por <L_ATRIBUTO>','ATRIBUTO.VAL = TK_ARROBA.VAL + TK_IDENTIFICADOR.VAL + L_ATRIBUTO.VAL','');
break;
case 38:
$$[$0].push($$[$0-1]); this.$=$$[$0]; ReporteGD.agregar('<L_ATRIBUTO>::=<ATRIBUTO1> <L_ATRIBUTO>','L_ATRIBUTO.VAL = ATRIBUTO1.VAL + L_ATRIBUTO.VAL','');
break;
case 39:
this.$=[$$[$0]]; ReporteGD.agregar('<L_ATRIBUTO>::=<ATRIBUTO1>','L_ATRIBUTO.VAL = ATRIBUTO1.VAL','');
break;
case 40:
this.$ = new Atributo($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGD.agregar('<ATRIBUTO1>::=tk_dbarra tk_dpunto','ATRIBUTO1.VAL = TK_DBARRA.VAL + TK_DPUNTO.VAL','');
break;
case 41:
this.$ = new Atributo($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGD.agregar('<ATRIBUTO1>::=tk_dbarra tk_punto','ATRIBUTO1.VAL = TK_DBARRA.VAL + TK_PUNTO.VAL','');
break;
case 42:
this.$ = new Atributo($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGD.agregar('<ATRIBUTO1>::=tk_barra tk_dpunto','ATRIBUTO1.VAL = TK_BARRA.VAL + TK_DPUNTO.VAL','');
break;
case 43:
this.$ = new Atributo($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGD.agregar('<ATRIBUTO1>::=tk_barra tk_punto','ATRIBUTO1.VAL = TK_BARRA.VAL + TK_PUNTO.VAL','');
break;
case 44:
this.$ = new Atributo('','',_$[$0].first_line,_$[$0].first_column); ReporteGD.agregar('<ATRIBUTO1>::= Îµ','ATRIBUTO1.VAL = EPSILON','');
break;
case 45:
this.$ = new Conca('!',$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); ReporteGD.agregar('<PALABRAS_R>::=tk_dbarra <PR> tk_ddp <OPCION>','PALABRAS_R.VAL = TK_DBARRA.VAL + PR.VAL + TK_DDP.VAL + OPCION.VAL','');
break;
case 46:
this.$ = new Conca('!',$$[$0-4],$$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); ReporteGD.agregar('<PALABRAS_R>::=tk_barra <PR> tk_ddp <OPCION>','PALABRAS_R.VAL = TK_BARRA.VAL + PR.VAL + TK_DDP.VAL + OPCION.VAL','');
break;
case 47:
this.$ = new Conca('!',$$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); ReporteGD.agregar('<PALABRAS_R>::=tk_dbarra <PR> tk_ddp <OPCION>','PALABRAS_R.VAL = TK_DBARRA.VAL + PR.VAL + TK_DDP.VAL + OPCION.VAL','');
break;
case 48:
this.$ = new Conca('!',$$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); ReporteGD.agregar('<PALABRAS_R>::=tk_barra <PR> tk_ddp <OPCION>','PALABRAS_R.VAL = TK_BARRA.VAL + PR.VAL + TK_DDP.VAL + OPCION.VAL','');
break;
case 49:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_ancestor','PR.VAL = TK_ANCESTOR.VAL','');
break;
case 50:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_ancestor_or_self','PR.VAL = TK_ANCESTOR_OR_SELF.VAL','');
break;
case 51:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_attribute','PR.VAL = TK_ATTRIBUTE.VAL','');
break;
case 52:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_child','PR.VAL = TK_CHILD.VAL','');
break;
case 53:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_descendant','PR.VAL = TK_DESCENDANT.VAL','');
break;
case 54:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_descendant_or_self','PR.VAL = TK_DESCENDANT_OR_SELF.VAL','');
break;
case 55:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_following','PR.VAL = TK_FOLLOWING.VAL','');
break;
case 56:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_following_sibling','PR.VAL = TK_FOLLOWING_SIBLING.VAL','');
break;
case 57:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_namespace','PR.VAL = TK_NAMESPACE.VAL','');
break;
case 58:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_parent','PR.VAL = TK_PARENT.VAL','');
break;
case 59:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_preceding','PR.VAL = TK_PRECEDING.VAL','');
break;
case 60:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_preceding_sibling','PR.VAL = TK_PRECEDING_SIBLING.VAL ','');
break;
case 61: case 62: case 63: case 64: case 65:
this.$=$$[$0]; ReporteGD.agregar('<PR>::=tk_self','PR = TK_SELF.VAL','');
break;
case 66:
Errores.Error.add(new CNodoError.NodoError("Sintactico","No se esperaba el caracter: "+yytext,yylineno));
break;
case 67:
this.$ = new PR($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGD.agregar('<OPCION>::=tk_last tk_parentesis','OPCION.VAL = TK_LAST.VAL + TK_PARENTESIS.VAL','');
break;
case 68:
this.$ = new PR($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGD.agregar('<OPCION>::=tk_position tk_parentesis','OPCION.VAL = TK_NODE.VAL + TK_PARENTESIS.VAL','');
break;
case 69:
this.$ = new PR($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGD.agregar('<OPCION>::=tk_node tk_parentesis','OPCION.VAL = TK_NODE.VAL + TK_PARENTESIS.VAL','');
break;
case 70:
this.$ = new PR($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); ReporteGD.agregar('<OPCION>::=tk_text tk_parentesis','OPCION.VAL = TK_TEXT.VAL + TK_PARENTESIS.VAL','');
break;
case 71:
this.$ = new PR($$[$0],_$[$0].first_line,_$[$0].first_column); ReporteGD.agregar('<OPCION>::=tk_identificador','OPCION.VAL = TK_IDENTIFICADOR.VAL','');
break;
case 72:
this.$ = new Conca('#',$$[$0-2],$$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); ReporteGD.agregar('<ASTERISCO>::=tk_punto tk_dbarra tk_por <L_ASTERISCO>','ASTERISCO.VAL = TK_DBARRA.VAL+ TK_POR.VAL + L_ASTERISCO.VAL','');
break;
case 73:
this.$ = new Conca('#',$$[$0-2],$$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); ReporteGD.agregar('<ASTERISCO>::=tk_punto tk_barra tk_por <L_ASTERISCO>','ASTERISCO.VAL = TK_DBARRA.VAL + TK_BARRA.VAL+ TK_POR.VAL + L_ASTERISCO.VAL','');
break;
case 74:
this.$ = new Conca('#',$$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); ReporteGD.agregar('<ASTERISCO>::=tk_dbarra tk_por <L_ASTERISCO>','ASTERISCO.VAL = TK_DBARRA TK_POR.VAL + L_ASTERISCO.VAL','');
break;
case 75:
this.$ = new Conca('#',$$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); ReporteGD.agregar('<ASTERISCO>::=tk_barra tk_por <L_ASTERISCO>','ASTERISCO.VAL = TK_BARRA.VAL+TK_POR.VAL+L_ASTERISCO.VAL','');
break;
case 76:
this.$ = new Conca('por',$$[$0-1],$$[$0],new Dato('',_$[$0].first_line,_$[$0].first_column),_$[$0-2].first_line,_$[$0-2].first_column); ReporteGD.agregar('<ASTERISCO>::=tk_punto tk_dbarra tk_por','ASTERISCO.VAL = TK_PUNTO.VAL+ TK_DBARRA.VAL+TK_POR.VAL','');
break;
case 77:
this.$ = new Conca('por',$$[$0-1],$$[$0],new Dato('',_$[$0].first_line,_$[$0].first_column),_$[$0-2].first_line,_$[$0-2].first_column); ReporteGD.agregar('<ASTERISCO>::=tk_punto tk_barra tk_por','ASTERISCO.VAL =TK_PUNTO.VAL+TK_BARRA.VAL+TK_POR.VAL','');
break;
case 78:
this.$ = new Conca('por',$$[$0-1],$$[$0],new Dato('',_$[$0].first_line,_$[$0].first_column),_$[$0-1].first_line,_$[$0-1].first_column); ReporteGD.agregar('<ASTERISCO>::=tk_dbarra tk_por','ASTERISCO.VAL = TK_DBARRA.VAL + TK_POR.VAL','');
break;
case 79:
this.$ = new Conca('por',$$[$0-1],$$[$0],new Dato('',_$[$0].first_line,_$[$0].first_column),_$[$0-1].first_line,_$[$0-1].first_column); ReporteGD.agregar('<ASTERISCO>::=tk_barra tk_por','ASTERISCO.VAL = TK_BARRA.VAL + TK_POR.VAL','');
break;
case 80:
$$[$0].push($$[$0-1]); this.$=$$[$0]; ReporteGD.agregar('<L_ASTERISCO>::= ASTERISCO1 L_ASTERISCO','L_ASTERISCO.VAL = ASTERISCO1.VAL + L_ASTERISCO.VAL','');
break;
case 81:
this.$=[$$[$0]]; ReporteGD.agregar('<L_ASTERISCO>::=<ASTERISCO1>','L_ASTERISCO.VAL = ASTERISCO1.VAL','');
break;
case 82:
this.$ = $$[$0-1]; ReporteGD.agregar('<ASTERISCO1>::=tk_corchete_izquierdo <EXP> tk_corchete_derecho','ASTERISCO1.VAL = EXP.VAL','');
break;
case 83:
this.$ = $$[$0]; ReporteGD.agregar('<ASTERISCO1>::=TK_IDENTIFICADOR','ASTERISCO1.VAL = TK_IDENTIFICADOR.VAL','');
break;
case 84:
 ReporteGD.agregar('<EXP>::=<EXP1> <EXP_P>','EXP_P.inh = EXP1.VAL | EXP.VAL= EXP_P.syn','');
break;
case 85:
 ReporteGD.agregar('<EXP_P>::=tk_mas <EXP1> <EXP_P>','EXP_P.inh = EXP_P.inh + EXP1.VAL | EXP_P.syn = EXP_P.syn','');
break;
case 86:
 ReporteGD.agregar('<EXP_P>::=tk_menos <EXP1> <EXP_P>','EXP_P.inh = EXP_P.inh - EXP1.VAL | EXP_P.syn = EXP_P.syn','');
break;
case 87:
 ReporteGD.agregar('<EXP_P>::=Îµ','EXP_P.syn = EXP_P.inh','');
break;
case 88:
 ReporteGD.agregar('<EXP1>::=<EXP2> <EXP1_P>','EXP1_P.inh = EXP2.VAL | EXP1.VAL= EXP1_P.syn','');
break;
case 89:
 ReporteGD.agregar('<EXP1_P>::=tk_por <EXP2> <EXP1_P>','EXP1_P.inh = EXP1_P.inh * EXP2.VAL | EXP1_P.syn = EXP1_P.syn','');
break;
case 90:
 ReporteGD.agregar('<EXP1_P>::=tk_division <EXP2> <EXP1_P>','EXP1_P.inh = EXP1_P.inh / EXP2.VAL | EXP1_P.syn = EXP1_P.syn','');
break;
case 91:
 ReporteGD.agregar('<EXP1_P>::=tk_modulo <EXP2> <EXP1_P>','EXP1_P.inh = EXP1_P.inh mod EXP2.VAL | EXP1_P.syn = EXP1_P.syn','');
break;
case 92:
 ReporteGD.agregar('<EXP1_P>::=Îµ','EXP1_P.syn = EXP1_P.inh','');
break;
case 93:
 ReporteGD.agregar('<EXP2>::=<EXP3> <EXP2_P>','EXP2_P.inh = EXP3.VAL | EXP2.VAL= EXP2_P.syn');
break;
case 94:
 ReporteGD.agregar('<EXP2_P>::=tk_menor <EXP3> <EXP2_P>','EXP2_P.inh = EXP2_P.inh < EXP3.VAL | EXP2_P.syn = EXP2_P.syn','');
break;
case 95:
 ReporteGD.agregar('<EXP2_P>::=tk_mayor <EXP3> <EXP2_P>','EXP2_P.inh = EXP2_P.inh > EXP3.VAL | EXP2_P.syn = EXP2_P.syn','');
break;
case 96:
 ReporteGD.agregar('<EXP2_P>::=tk_menor_igual <EXP3> <EXP2_P>','EXP2_P.inh = EXP2_P.inh <= EXP3.VAL | EXP2_P.syn = EXP2_P.syn','');
break;
case 97:
 ReporteGD.agregar('<EXP2_P>::=tk_mayor_igual <EXP3> <EXP2_P>','EXP2_P.inh = EXP2_P.inh >= EXP3.VAL | EXP2_P.syn = EXP2_P.syn','');
break;
case 98:
 ReporteGD.agregar('<EXP2_P>::=tk_igualdad <EXP3> <EXP2_P>','EXP2_P.inh = EXP2_P.inh = EXP3.VAL | EXP2_syn = EXP2_P.syn','');
break;
case 99:
 ReporteGD.agregar('<EXP2_P>::=tk_desigualdad <EXP3> <EXP2_P>','EXP2_P.inh = EXP2_P.inh != EXP3.VAL | EXP2_syn = EXP2_P.syn','');
break;
case 100:
 ReporteGD.agregar('<EXP2_P>::=Îµ','EXP2_P.syn = EXP2_P.inh','');
break;
case 101:
 ReporteGD.agregar('<EXP3>::=<EXP4> <EXP3_P>','EXP3_P.inh = EXP4.VAL | EXP4.VAL= EXP3_P.syn','');
break;
case 102:
 ReporteGD.agregar('<EXP3_P>::=tk_or <EXP4> <EXP3_P>','EXP3_P.inh = EXP3_P.inh < EXP4.VAL | EXP3_P.syn = EXP3_P.syn','');
break;
case 103:
 ReporteGD.agregar('<EXP3_P>::=tk_and <EXP4> <EXP3_P>','EXP3_P.inh = EXP3_P.inh < EXP4.VAL | EXP3_P.syn = EXP3_P.syn','');
break;
case 104:
 ReporteGD.agregar('<EXP3>::=tk_barra_vertical <EXP4> <EXP3_P>','EXP3_P.inh = EXP3_P.inh < EXP4.VAL | EXP3_P.syn = EXP3_P.syn','');
break;
case 105:
 ReporteGD.agregar('<EXP3>::=Îµ','EXP3_P.syn = EXP3_P.inh','');
break;
case 106:
 ReporteGD.agregar('<EXP4>::=tk_parentesis_izquierdo <EXP> tk_parentesis_derecho','EXP4.VAL = EXP.VAL ','');
break;
case 107:
 ReporteGD.agregar('<EXP4>::=<ATRI>','EXP4.VAL = ATRI.VAL','');
break;
case 108:
 ReporteGD.agregar('<EXP4>::=tk_arroba <EXP>','EXP4.VAL = TK_ARROBA.VAL + EXP.VAL','');
break;
case 109:
 ReporteGD.agregar('<EXP4>::=tk_decimal','EXP4.VAL = TK_DECIMA.LEXVAL','');
break;
case 110:
 ReporteGD.agregar('<EXP4>::=tk_entero','EXP4.VAL = TK_ENTERO.LEXVAL','');
break;
case 111:
 ReporteGD.agregar('<EXP4>::=tk_cadena','EXP4.VAL = TK_CADENA.VAL','');
break;
case 112:
 ReporteGD.agregar('<EXP4>::=tk_identificador','EXP4.VAL = TK_IDENTIFICADOR.VAL','');
break;
case 113:
 ReporteGD.agregar('<EXP4>::=tk_position tk_parentesis','EXP4.VAL = TK_POSITION.VAL + TK_PARENTESIS.VAL','');
break;
case 114:
 ReporteGD.agregar('<EXP4>::=tk_last tk_parentesis','EXP4.VAL = TK_LAST.VAL + TK_PARENTESIS.VAL','');
break;
case 115:
 ReporteGD.agregar('<EXP4>::=<PAL_RE>','EXP4.VAL = PAL_RE.VAL','');
break;
case 116:
this.$ = new PAL_RE($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);  ReporteGD.agregar('<PAL_RE>::=<PR> tk_ddp <OPCION>','PAL_RE.VAL = PR.VAL + TK_DDP.VAL + OPCION.VAL','');
break;
case 117:
this.$ = new Atri($$[$0-2]+$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);  ReporteGD.agregar('<ATRI>::=tk_arroba tk_por <L_ATRI>','ATRI.VAL = TK_ARROBA.VAL + TK_POR.VAL + L_ATRI.VAL','');
break;
case 118:
$$[$0].push($$[$0-1]); this.$=$$[$0];  ReporteGD.agregar('<L_ATRI>::= ATRI1 L_ATRI','L_ATRI.VAL = ATRI1.VAL + L_ATRI.VAL','');
break;
case 119:
this.$=[$$[$0]];  ReporteGD.agregar('<ATRI1>::=<ATRI1>','L_ATRI.VAL = ATRI1.VAL','');
break;
case 120:
this.$ = new Atributo($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);  ReporteGD.agregar('<ATRI1>::=tk_dbarra tk_dpunto','ATRI1.VAL = TK_DBARRA.VAL + TK_DPUNTO.VAL','');
break;
case 121:
this.$ = new Atributo($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);  ReporteGD.agregar('<ATRI1>::=tk_dbarra tk_punto' ,'ATRI1.VAL = TK_DBARRA.VAL + TK_PUNTO.VAL','');
break;
case 122:
this.$ = new Atributo($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);  ReporteGD.agregar('<ATRI1>::=tk_barra  tk_dpunto','ATRI1.VAL = TK_BARRA.VAL  + TK_TK_DPUNTO.VAL','');
break;
case 123:
this.$ = new Atributo($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);  ReporteGD.agregar('<ATRI1>::=tk_barra  tk_punto' ,'ATRI1.VAL = TK_BARRA.VAL  + TK_PUNTO.VAL','');
break;
case 124:
 ReporteGD.agregar('<ATRI1>::=Îµ','ATRI1.VAL = EPSILON','');
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,7:4,8:7,9:8,11:9,12:10,13:11,14:12,16:13,2:[1,6],20:[1,5],22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),{1:[3]},{5:[1,35]},{5:[2,2]},{5:[2,3]},o($V0,$V1,{8:7,9:8,11:9,12:10,13:11,14:12,16:13,21:36,7:39,2:[1,40],20:$Vn,22:[1,37],23:$V3,25:[1,38],26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($Vo,[2,24]),o([17,18,19],$V1,{8:7,9:8,11:9,12:10,13:11,14:12,16:13,7:42,2:$Vp,5:[2,5],20:$Vn,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($Vq,[2,12],{10:44,17:$Vr,18:$Vs,19:$Vt}),o($Vq,[2,17],{10:48,17:$Vr,18:$Vs,19:$Vt}),o($Vq,[2,15],{10:49,17:$Vr,18:$Vs,19:$Vt}),o($Vq,[2,13],{10:50,17:$Vr,18:$Vs,19:$Vt}),{15:[1,51]},o($Vq,[2,16],{10:52,17:$Vr,18:$Vs,19:$Vt}),{2:$Vu,14:55,20:$Vv,23:$Vw,26:$Vx,27:[1,54],29:$Vy,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm},{2:$Vu,14:62,20:$Vz,23:$VA,26:$VB,27:[1,61],29:$VC,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm},{23:[1,67],27:[1,66]},o($VD,[2,49]),o($VD,[2,50]),o($VD,[2,51]),o($VD,[2,52]),o($VD,[2,53]),o($VD,[2,54]),o($VD,[2,55]),o($VD,[2,56]),o($VD,[2,57]),o($VD,[2,58]),o($VD,[2,59]),o($VD,[2,60]),o($VD,[2,61]),o($VD,$VE),o($VD,$VF),o($VD,[2,64]),o($VD,[2,65]),o($VG,[2,31]),{1:[2,1]},{5:[2,23]},{2:$Vu,14:55,20:$Vv,23:$Vw,26:$Vx,27:[1,68],29:$Vy,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm},{2:$Vu,14:62,20:$Vz,23:$VA,26:$VB,27:[1,69],29:$VC,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm},{5:[2,25]},o($Vo,[2,26]),{22:[1,70],25:[1,71]},{5:[2,4]},o($Vo,[2,19]),o($V0,$V1,{9:8,11:9,12:10,13:11,14:12,16:13,8:72,2:$Vp,20:$Vn,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($VG,[2,20]),o($VG,[2,21]),o($VG,[2,22]),o($V0,$V1,{9:8,11:9,12:10,13:11,14:12,16:13,8:73,2:$Vp,20:$Vn,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($V0,$V1,{9:8,11:9,12:10,13:11,14:12,16:13,8:74,2:$Vp,20:$Vn,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($V0,$V1,{9:8,11:9,12:10,13:11,14:12,16:13,8:75,2:$Vp,20:$Vn,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($Vq,[2,14],{10:76,17:$Vr,18:$Vs,19:$Vt}),o($V0,$V1,{9:8,11:9,12:10,13:11,14:12,16:13,8:77,2:$Vp,20:$Vn,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),{23:[1,79],27:[1,78]},o($VH,[2,78],{49:80,24:81,23:$VI,50:$VJ}),{30:[1,84]},o($VG,[2,40]),o($VG,[2,41]),o($VH,[2,29],{24:85,23:$VI,50:$VJ}),{30:[2,66]},{23:[1,87],27:[1,86]},o($VH,[2,79],{24:81,49:88,23:$VI,50:$VJ}),{30:[1,89]},o($VG,[2,42]),o($VG,[2,43]),o($VH,[2,30],{24:90,23:$VI,50:$VJ}),o($VK,$VL,{28:91,13:92,22:$VM,25:$VN}),o($VK,$VL,{13:92,28:95,22:$VM,25:$VN}),o($VH,$VO,{24:81,49:96,23:$VI,50:$VJ}),o($VH,$VP,{24:81,49:97,23:$VI,50:$VJ}),{27:[1,98]},{27:[1,99]},o($VG,[2,6]),o($VG,[2,7]),o($VG,[2,8]),o($VG,[2,9]),o($V0,$V1,{9:8,11:9,12:10,13:11,14:12,16:13,8:100,2:$Vp,20:$Vn,22:$V2,23:$V3,25:$V4,26:$V5,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$Vj,46:$Vk,47:$Vl,48:$Vm}),o($VG,[2,11]),o($VK,$VL,{13:92,28:101,22:$VM,25:$VN}),o($VK,$VL,{13:92,28:102,22:$VM,25:$VN}),o($VG,[2,74]),o($VH,[2,81],{24:81,49:103,23:$VI,50:$VJ}),{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,51:104,53:105,57:106,61:107,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},o($VY,[2,83]),{23:$VZ,31:120,45:$V_,46:$V$,47:$V01,48:$V11},o($VG,[2,27]),o($VK,$VL,{13:92,28:126,22:$VM,25:$VN}),o($VK,$VL,{13:92,28:127,22:$VM,25:$VN}),o($VG,[2,75]),{23:$VZ,31:128,45:$V_,46:$V$,47:$V01,48:$V11},o($VG,[2,28]),o($VG,[2,34]),o($VK,[2,39],{13:92,28:129,22:$VM,25:$VN}),{20:$Vv,29:$Vy},{20:$Vz,29:$VC},o($VG,[2,37]),o($VG,$V21),o($VG,$V31),o($VH,$VO,{24:81,49:130,23:$VI,50:$VJ}),o($VH,$VP,{24:81,49:131,23:$VI,50:$VJ}),o($VG,[2,10]),o($VG,[2,32]),o($VG,[2,35]),o($VG,[2,80]),{52:[1,132]},o($V41,$V51,{54:133,55:$V61,56:$V71}),o($V81,$V91,{58:136,27:$Va1,59:$Vb1,60:$Vc1}),o($Vd1,$Ve1,{62:140,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1}),o($Vl1,$Vm1,{70:147,17:$Vn1,18:$Vo1,19:$Vp1}),{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,51:151,53:105,57:106,61:107,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},o($Vq1,[2,107]),{2:$Vu,14:119,23:$VQ,26:$VR,27:[1,153],32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,51:152,53:105,57:106,61:107,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},o($Vq1,[2,109]),o($Vq1,[2,110]),o($Vq1,[2,111]),o($Vq1,[2,112]),{15:[1,154],30:$VF},{15:[1,155],30:$VE},o($Vq1,[2,115]),{30:[1,156]},o($VH,[2,47],{24:157,23:$VI,50:$VJ}),{15:[1,158]},{15:[1,159]},{15:[1,160]},{15:[1,161]},o($Vr1,[2,71]),o($VG,[2,33]),o($VG,[2,36]),o($VH,[2,48],{24:162,23:$VI,50:$VJ}),o($VG,[2,38]),o($VG,$V21),o($VG,$V31),o($VY,[2,82]),o($Vq1,[2,84]),{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,53:163,57:106,61:107,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,53:164,57:106,61:107,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},o($Vq1,[2,88]),{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,57:165,61:107,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,57:166,61:107,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,57:167,61:107,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},o($Vq1,[2,93]),{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,61:168,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,61:169,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,61:170,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,61:171,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,61:172,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,61:173,69:108,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},o($Vq1,[2,101]),{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,69:174,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,69:175,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},{2:$Vu,14:119,23:$VQ,26:$VR,32:$V6,33:$V7,34:$V8,35:$V9,36:$Va,37:$Vb,38:$Vc,39:$Vd,40:$Ve,41:$Vf,42:$Vg,43:$Vh,44:$Vi,45:$VS,46:$VT,47:$Vl,48:$Vm,69:176,71:$VU,73:110,74:$VV,75:$VW,76:$VX,77:118},{72:[1,177]},o($Vq1,[2,108]),o($Vq1,[2,124],{78:178,79:179,22:$Vs1,25:$Vt1}),o($Vq1,[2,113]),o($Vq1,[2,114]),{23:$VZ,31:182,45:$V_,46:$V$,47:$V01,48:$V11},o($VG,[2,45]),o($Vr1,[2,67]),o($Vr1,[2,68]),o($Vr1,[2,69]),o($Vr1,[2,70]),o($VG,[2,46]),o($V41,$V51,{54:183,55:$V61,56:$V71}),o($V41,$V51,{54:184,55:$V61,56:$V71}),o($V81,$V91,{58:185,27:$Va1,59:$Vb1,60:$Vc1}),o($V81,$V91,{58:186,27:$Va1,59:$Vb1,60:$Vc1}),o($V81,$V91,{58:187,27:$Va1,59:$Vb1,60:$Vc1}),o($Vd1,$Ve1,{62:188,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1}),o($Vd1,$Ve1,{62:189,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1}),o($Vd1,$Ve1,{62:190,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1}),o($Vd1,$Ve1,{62:191,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1}),o($Vd1,$Ve1,{62:192,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1}),o($Vd1,$Ve1,{62:193,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1}),o($Vl1,$Vm1,{70:194,17:$Vn1,18:$Vo1,19:$Vp1}),o($Vl1,$Vm1,{70:195,17:$Vn1,18:$Vo1,19:$Vp1}),o($Vl1,$Vm1,{70:196,17:$Vn1,18:$Vo1,19:$Vp1}),o($Vq1,[2,106]),o($Vq1,[2,117]),o($Vq1,[2,119],{79:179,78:197,22:$Vs1,25:$Vt1}),{20:[1,199],29:[1,198]},{20:[1,201],29:[1,200]},o($Vq1,[2,116]),o($Vq1,[2,85]),o($Vq1,[2,86]),o($Vq1,[2,89]),o($Vq1,[2,90]),o($Vq1,[2,91]),o($Vq1,[2,94]),o($Vq1,[2,95]),o($Vq1,[2,96]),o($Vq1,[2,97]),o($Vq1,[2,98]),o($Vq1,[2,99]),o($Vq1,[2,102]),o($Vq1,[2,103]),o($Vq1,[2,104]),o($Vq1,[2,118]),o($Vu1,[2,120]),o($Vu1,[2,121]),o($Vu1,[2,122]),o($Vu1,[2,123])],
defaultActions: {3:[2,2],4:[2,3],35:[2,1],36:[2,23],39:[2,25],42:[2,4],59:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

 


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 66;
break;
case 1:return 65;
break;
case 2:return 63;
break;
case 3:return 64;
break;
case 4:return 67;
break;
case 5:return 68;
break;
case 6:return 55;
break;
case 7:return 56;
break;
case 8:return 27;
break;
case 9:return 17;
break;
case 10:return 59;
break;
case 11:return 18;
break;
case 12:return 19;
break;
case 13:return 60;
break;
case 14:return 15;
break;
case 15:return 71;
break;
case 16:return 72;
break;
case 17:return 50;
break;
case 18:return 52;
break;
case 19:return 30;
break;
case 20:return 22
break;
case 21:return 25
break;
case 22:return 26
break;
case 23:return 29
break;
case 24:return 20
break;
case 25:return 32
break;
case 26:return 33
break;
case 27:return 34
break;
case 28:return 35
break;
case 29:return 36
break;
case 30:return 37
break;
case 31:return 38
break;
case 32:return 39
break;
case 33:return 40
break;
case 34:return 41
break;
case 35:return 42
break;
case 36:return 43
break;
case 37:return 44
break;
case 38:return 45
break;
case 39:return 46
break;
case 40:return 47
break;
case 41:return 48
break;
case 42:/QUITA ESPACIOS EN BLANCO/
break;
case 43: return 74; 
break;
case 44: return 75; 
break;
case 45: return 23; 
break;
case 46: return 76; 
break;
case 47:  return 5;   
break;
}
},
rules: [/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:!=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\|)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:mod\b)/,/^(?:\(\))/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/,/^(?:[[\']([^\'\n]|(\\'))*[\']|[[\"]([^\"\n]|(\\"))*[\"])/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica2;
exports.Parser = Gramatica2.Parser;
exports.parse = function () { return Gramatica2.parse.apply(Gramatica2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}