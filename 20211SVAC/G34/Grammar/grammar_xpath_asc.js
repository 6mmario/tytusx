/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar_xpath_asc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,17],$V2=[1,22],$V3=[1,23],$V4=[1,61],$V5=[1,16],$V6=[1,13],$V7=[1,11],$V8=[1,63],$V9=[1,60],$Va=[1,66],$Vb=[1,64],$Vc=[1,65],$Vd=[1,67],$Ve=[1,68],$Vf=[1,28],$Vg=[1,29],$Vh=[1,37],$Vi=[1,39],$Vj=[1,40],$Vk=[1,56],$Vl=[1,58],$Vm=[1,59],$Vn=[1,41],$Vo=[1,42],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,48],$Vv=[1,49],$Vw=[1,50],$Vx=[1,51],$Vy=[1,52],$Vz=[1,53],$VA=[1,12],$VB=[1,30],$VC=[1,31],$VD=[1,32],$VE=[1,33],$VF=[1,70],$VG=[5,24,30],$VH=[2,15,20,22,25,28,29,34,36,38,48,55,56,57,58,65,66,74,75,76,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,109,113,114,115,116],$VI=[5,15,16,18,20,22,24,30,32,44],$VJ=[1,83],$VK=[1,73],$VL=[1,74],$VM=[1,75],$VN=[1,76],$VO=[1,77],$VP=[1,78],$VQ=[1,79],$VR=[1,80],$VS=[1,81],$VT=[1,82],$VU=[1,84],$VV=[1,85],$VW=[1,86],$VX=[5,15,16,18,20,22,24,30,32,44,79,97,100,101,102,103,104,105,106,107,108,109,110,111,112],$VY=[1,97],$VZ=[5,15,16,18,20,22,24,30,32,44,60,79,97,100,101,102,103,104,105,106,107,108,109,110,111,112],$V_=[15,16,18,20,22],$V$=[1,106],$V01=[1,107],$V11=[5,15,16,18,20,22,24,30,32,44,60,65,66,79,97,100,101,102,103,104,105,106,107,108,109,110,111,112],$V21=[1,109],$V31=[5,15,16,18,20,22,24,30,32,44,60,65,66,79,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112],$V41=[2,71],$V51=[5,15,16,18,20,22,24,30,32,44,60,65,66,72,79,96,97,100,101,102,103,104,105,106,107,108,109,110,111,112],$V61=[5,15,16,18,20,22,24,30,32,44,97,100,101,102,103,104,105,106,107],$V71=[5,15,16,18,20,22,24,30,32,44,97,100,101,102,103,104,105,106,107,108,109,112],$V81=[15,16,18,20,22,24],$V91=[1,211],$Va1=[24,30];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"LEXP":4,"EOF":5,"FUNCTIONS":6,"EXP_MAIN":7,"EXP":8,"FLWRExpr":9,"IFEXP":10,"RETURN_":11,"LCLAUSE":12,"WHERECLAUSE":13,"ORDERBY":14,"return":15,"order":16,"by":17,"where":18,"CLAUSE":19,"for":20,"LFOR":21,"let":22,"LLET":23,",":24,"identifier_xquery":25,"in":26,":=":27,"if":28,"(":29,")":30,"then":31,"else":32,"FUNCTION":33,"declare":34,"function":35,"local":36,":":37,"identifier":38,"LPARAMS":39,"as":40,"DATATYPE":41,"?":42,"{":43,"}":44,";":45,"xs":46,"TYPE":47,"string":48,"integer":49,"decimal":50,"float":51,"double":52,"boolean":53,"CALL_FUNCTION":54,"substring":55,"number":56,"upper-case":57,"lower-case":58,"UNION_PATH":59,"|":60,"PATH_EXP_NO_ROOT":61,"LOCATION_PATH":62,"RELATIVE_LOCATION_PATH":63,"ABSOLUTE_LOCATION_PATH":64,"//":65,"/":66,"STEP_ROOT":67,"STEP":68,"PREDICATE":69,"ABBREVIATED_STEP":70,"AXIS_NAME":71,"::":72,"NODE_TEST":73,"@":74,".":75,"..":76,"NAME_TEST":77,"NODE_TYPE":78,"*":79,"CNAME":80,"node()":81,"text()":82,"ancestor":83,"ancestor-or-self":84,"attribute":85,"child":86,"descendant":87,"descendant-or-self":88,"following":89,"following-sibling":90,"namespace":91,"parent":92,"preceding":93,"preceding-sibling":94,"self":95,"[":96,"]":97,"FILTER_EXP":98,"PRIMARY_EXP":99,"or":100,"and":101,"=":102,"!=":103,"<":104,">":105,"<=":106,">=":107,"+":108,"-":109,"div":110,"mod":111,"to":112,"string_literal":113,"number_literal":114,"last()":115,"position()":116,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"return",16:"order",17:"by",18:"where",20:"for",22:"let",24:",",25:"identifier_xquery",26:"in",27:":=",28:"if",29:"(",30:")",31:"then",32:"else",34:"declare",35:"function",36:"local",37:":",38:"identifier",40:"as",42:"?",43:"{",44:"}",45:";",46:"xs",48:"string",49:"integer",50:"decimal",51:"float",52:"double",53:"boolean",55:"substring",56:"number",57:"upper-case",58:"lower-case",60:"|",65:"//",66:"/",72:"::",74:"@",75:".",76:"..",79:"*",81:"node()",82:"text()",83:"ancestor",84:"ancestor-or-self",85:"attribute",86:"child",87:"descendant",88:"descendant-or-self",89:"following",90:"following-sibling",91:"namespace",92:"parent",93:"preceding",94:"preceding-sibling",95:"self",96:"[",97:"]",100:"or",101:"and",102:"=",103:"!=",104:"<",105:">",106:"<=",107:">=",108:"+",109:"-",110:"div",111:"mod",112:"to",113:"string_literal",114:"number_literal",115:"last()",116:"position()"},
productions_: [0,[3,2],[3,3],[7,1],[7,1],[7,1],[7,1],[7,1],[9,5],[9,4],[9,4],[9,3],[14,3],[13,2],[12,2],[12,1],[19,2],[19,2],[21,5],[21,3],[23,5],[23,3],[10,8],[6,2],[6,1],[33,15],[33,14],[11,2],[39,6],[39,4],[41,3],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[54,6],[54,5],[54,8],[54,6],[54,4],[54,4],[54,4],[54,4],[4,3],[4,1],[59,3],[59,1],[62,1],[62,1],[64,2],[64,2],[63,3],[63,3],[63,1],[67,2],[67,1],[67,1],[68,3],[68,2],[68,1],[70,1],[70,1],[73,1],[73,1],[77,1],[77,1],[80,1],[80,1],[80,1],[80,1],[78,1],[78,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[69,3],[61,1],[61,3],[61,3],[61,1],[98,1],[98,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,2],[8,2],[8,1],[99,3],[99,1],[99,1],[99,1],[99,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

  yy.rgquerys.setValue('INI -> LEXP EOF;\n');
  return new yy.AstXquery($$[$0-1], undefined);

break;
case 2:

  yy.rgquerys.setValue('INI -> FUNCTIONS LEXP EOF;\n');
  return new yy.AstXquery($$[$0-1], $$[$0-2]); 

break;
case 3:
yy.rgquerys.setValue('EXP_MAIN -> EXP ;\n'); this.$ = $$[$0]; 
break;
case 4:
yy.rgquerys.setValue('EXP_MAIN -> FLWRExp ;\n'); this.$ = $$[$0]; 
break;
case 5:
 yy.rgquerys.setValue('EXP_MAIN -> IFEXP ;\n'); this.$ = $$[$0]; 
break;
case 6:
 yy.rgquerys.setValue('EXP_MAIN -> RETURN ;\n'); this.$ = $$[$0]; 
break;
case 7:

        yy.errorsXPATH.push(new yy.NodeError(yytext, 'Sintactico', 'se esperaba EXP|FLWREXPR|IFEXP|RETURN_', this._$.first_line, this._$.first_column, 'XPATH'));
     
break;
case 8:

            yy.rgquerys.setValue('FLWRExpr -> LCLAUSE WHERECLAUSE ORDERBY return EXP_MAIN ;\n');
            this.$ = new yy.Expression.FLWR(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4], $$[$0-2], $$[$0-3], new yy.Expression.Return(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0])); 
          
break;
case 9:

           yy.rgquerys.setValue('FLWRExpr -> LCLAUSE WHERECLAUSE return EXP_MAIN ;\n');
           this.$ = new yy.Expression.FLWR(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], undefined, $$[$0-2], new yy.Expression.Return(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0])); 
         
break;
case 10:

            yy.rgquerys.setValue('FLWRExpr -> LCLAUSE ORDERBY return EXP_MAIN ;\n');
           this.$ = new yy.Expression.FLWR(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-2], undefined, new yy.Expression.Return(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0])); 
         
break;
case 11:
 
           yy.rgquerys.setValue('FLWRExpr -> LCLAUSE  return EXP_MAIN ;\n');
           this.$ = new yy.Expression.FLWR(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], undefined, undefined, new yy.Expression.Return(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0])); 
           
break;
case 12:
 yy.rgquerys.setValue('ORDERBY -> order by  EXP_MAIN ;\n');
        this.$ = new yy.Expression.OrderBy(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0]); 
break;
case 13:
 
                yy.rgquerys.setValue('WHERECLAUSE -> were   EXP_MAIN ;\n');
                this.$ = new yy.Expression.Where(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 14:
yy.rgquerys.setValue('LCLAUSE -> LCLAUSE CLAUSE;\n'); $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 15:
 yy.rgquerys.setValue('LCLAUSE->CLAUSE;\n'); this.$ = [$$[$0]]; 
break;
case 16:
 
              yy.rgquerys.setValue('CLAUSE -> for LFOR ;\n');
              this.$ = new yy.Expression.ForStament(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 17:

                  yy.rgquerys.setValue('CLAUSE -> let;\n'); 
                  this.$ = new yy.Expression.LetStament(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 18:

        yy.rgquerys.setValue('LFOR -> LFOR , identificador_xquery in EXP_MAIN ;\n');
        $$[$0-4].push(new yy.Expression.Assigment(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0]));
        this.$ = $$[$0-4];
      
break;
case 19:

       yy.rgquerys.setValue('LFOR -> identificador_xquery in  EXP_MAIN ;\n');
       this.$ = [new yy.Expression.Assigment(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])];
     
break;
case 20:

        yy.rgquerys.setValue('LLET -> LLET , identificador_xquery :=  EXP_MAIN ;\n');
        $$[$0-4].push(new yy.Expression.Assigment(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0]));
        this.$ = $$[$0-4];
      
break;
case 21:

       yy.rgquerys.setValue('LLET -> identificador_xquery :=  EXP_MAIN ;\n');
       this.$ = [new yy.Expression.Assigment(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0])];
     
break;
case 22:

        yy.rgquerys.setValue('IFEXP -> if ( EXP_MAIN ) then EXP_MAIN else  EXP_MAIN ;\n');
        this.$ = new yy.Expression.IfStament(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], $$[$0]);
      
break;
case 23:
yy.rgquerys.setValue('FUNCTIONS -> FUNCTIONS FUNCTION;\n'); $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 24:
yy.rgquerys.setValue('FUNCTIONS -> FUNCTION ;\n'); this.$ = [$$[$0]]; 
break;
case 25:

           yy.rgquerys.setValue('FUNCTION -> declare function local : identicador ( LPARAMS ) as DATATYPE ? { EXP_MAIN } ; ;\n');
           this.$ = new yy.FunctionXquery(_$[$0-14].first_line, _$[$0-14].first_column, $$[$0-10], $$[$0-8], $$[$0-5], $$[$0-2]);
         
break;
case 26:

           yy.rgquerys.setValue('FUNCTION -> declare function local : identicador ( ) as DATATYPE ? { EXP_MAIN} ; ;\n');
           this.$ = new yy.FunctionXquery(_$[$0-13].first_line, _$[$0-13].first_column, $$[$0-9], undefined, $$[$0-5], $$[$0-2]);
         
break;
case 27:
 
  yy.rgquerys.setValue('RETURN_ -> return EXP_MAIN ;\n');
  this.$ = new yy.Expression.Return(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 28:
 
          yy.rgquerys.setValue('LPARAMS -> LPARAMS ,  identificador_xquery as DATATYPE ? ;\n');
          $$[$0-5].push(new yy.ParamsXquery(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]));
          this.$ = $$[$0-5]; 
        
break;
case 29:
 
          yy.rgquerys.setValue('LPARAMS -> identificador_xquery as  DATATYPE ?;\n');
          this.$ = [new yy.ParamsXquery(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-1])]; 
break;
case 30:
  yy.rgquerys.setValue('DATATYPE -> xs :  TYPE ;\n'); this.$ = $$[$0]; 
break;
case 31:
yy.rgquerys.setValue('TYPE -> string;\n'); this.$ = $$[$0]; 
break;
case 32:
yy.rgquerys.setValue('TYPE -> integer;\n'); this.$ = 'number'; 
break;
case 33:
yy.rgquerys.setValue('TYPE -> decimal;\n'); this.$ = 'number'; 
break;
case 34: case 35:
yy.rgquerys.setValue('TYPE -> float ;\n'); this.$ = 'number'; 
break;
case 36:
yy.rgquerys.setValue('TYPE -> boolean ;\n'); this.$ = 'boolean'; 
break;
case 37:

                yy.rgquerys.setValue('CALL_FUNCTION -> local : identicador  ( LEXP ) ;\n');
                this.$ = new yy.Expression.CallFunctions(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
              
break;
case 38:

                yy.rgquerys.setValue('CALL_FUNCTION -> local : identicador  () ;\n');
                this.$ = new yy.Expression.CallFunctions(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], undefined); 
              
break;
case 39:
 
                yy.rgquerys.setValue('CALL_FUNCTION -> SUBSTRING ( EXP, EXP, EXP );\n');
                this.$ = new yy.Expression.SubString(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-3], $$[$0-1]); 
              
break;
case 40:
 
                yy.rgquerys.setValue('CALL_FUNCTION -> SUBSTRING ( EXP, EXP );\n');
                this.$ = new yy.Expression.SubString(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1], undefined); 
              
break;
case 41:
 
                yy.rgquerys.setValue('CALL_FUNCTION -> NUMBER ( EXP );\n');
                this.$ = new yy.Expression.NumberFn(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
              
break;
case 42:
 
                yy.rgquerys.setValue('CALL_FUNCTION -> STRING ( EXP );\n');
                this.$ = new yy.Expression.StringFn(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
              
break;
case 43:
 
                yy.rgquerys.setValue('CALL_FUNCTION -> UPPER-CASE ( EXP );\n');
                this.$ = new yy.Expression.UpperCase(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
              
break;
case 44:
 
                yy.rgquerys.setValue('CALL_FUNCTION -> LOWER-CASE ( EXP );\n');
                this.$ = new yy.Expression.LowerCase(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
              
break;
case 45:
yy.rgquerys.setValue('LEXP -> LEXP ,  EXP_MAIN ;\n');$$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 46:
yy.rgquerys.setValue('LEXP ->EXP_MAIN ;\n'); this.$ = [$$[$0]]; 
break;
case 47:

  yy.rgquerys.setValue('UNION_PATH -> UNION_PATH | PATH_EXP_NO_ROOT;\n');
  $$[$0-2].push($$[$0]);
  this.$ = $$[$0-2];

break;
case 48:

  yy.rgquerys.setValue('UNION_PATH -> PATH_EXP_NO_ROOT;\n');
  this.$ = [$$[$0]];

break;
case 49:
 yy.rgquerys.setValue('LOCATION_PATH -> RELATIVE_LOCATION_PATH;\n'); this.$ = $$[$0]; 
break;
case 50:
 yy.rgquerys.setValue('LOCATION_PATH -> ABSOLUTE_LOCATION_PATH;\n'); this.$ = $$[$0]; 
break;
case 51:

  yy.rgquerys.setValue('ABSOLUTE_LOCATION_PATH -> // RELATIVE_LOCATION_PATH;\n');
  $$[$0][0] = new yy.Expression.RelativeLocationPath(
    _$[$0-1].first_line, _$[$0-1].first_column, $$[$0][0]
  );
  this.$ = $$[$0];

break;
case 52:

  yy.rgquerys.setValue('ABSOLUTE_LOCATION_PATH -> / RELATIVE_LOCATION_PATH;\n');
  $$[$0][0] = new yy.Expression.AbsoluteLocationPath(
    _$[$0-1].first_line, _$[$0-1].first_column, $$[$0][0]
  );
  this.$ = $$[$0];

break;
case 53:

  yy.rgquerys.setValue('RELATIVE_LOCATION_PATH -> // STEP_ROOT;\n');
  $$[$0-2].push(new yy.Expression.RelativeLocationPath(
    _$[$0-2].first_line, _$[$0-2].first_column, $$[$0]
  ));
  this.$ = $$[$0-2];

break;
case 54:

  yy.rgquerys.setValue('RELATIVE_LOCATION_PATH -> / STEP_ROOT;\n');
  $$[$0-2].push(new yy.Expression.AbsoluteLocationPath(
    _$[$0-2].first_line, _$[$0-2].first_column, $$[$0]
  ));
  this.$ = $$[$0-2];

break;
case 55:

  yy.rgquerys.setValue('RELATIVE_LOCATION_PATH -> STEP_ROOT;\n');
  this.$ = [$$[$0]];

break;
case 56:

  yy.rgquerys.setValue('STEP_ROOT -> STEP PREDICATE;\n');
  this.$ = new yy.Expression.Predicate(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0]);

break;
case 57:

  yy.rgquerys.setValue('STEP_ROOT -> STEP;\n');
  this.$ = $$[$0];

break;
case 58:
 yy.rgquerys.setValue('STEP_ROOT -> ABBREVIATED_STEP;\n'); this.$ = $$[$0]; 
break;
case 59:

  yy.rgquerys.setValue('STEP -> AXIS_NAME :: NODE_TEST;\n');
  $$[$0-2].nameAxis = $$[$0].name;
  this.$ = $$[$0-2];

break;
case 60:
 yy.rgquerys.setValue('STEP -> @ NODE_TEST;\n'); 
                this.$= new yy.Expression.atributo(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0].name); 
break;
case 61:

  yy.rgquerys.setValue('STEP -> NODE_TEST;\n');
  this.$ = $$[$0];

break;
case 62:
 
  yy.rgquerys.setValue('ABBREVIATED_STEP -> .;\n');
  this.$ = new yy.Expression.Abbreviated(_$[$0].first_line, _$[$0].first_column, false); 

break;
case 63:
 
  yy.rgquerys.setValue('ABBREVIATED_STEP -> ..;\n');
  this.$ = new yy.Expression.Abbreviated(_$[$0].first_line, _$[$0].first_column, true); 

break;
case 64:

  yy.rgquerys.setValue('NODE_TEST -> NAME_TEST;\n');
  this.$ = $$[$0];

break;
case 65:

  yy.rgquerys.setValue('NODE_TEST -> NODE_TYPE;\n');
  this.$ = $$[$0];

break;
case 66:

  yy.rgquerys.setValue('NAME_TEST -> *;\n');
  this.$ = new yy.Expression.NodeAll(_$[$0].first_line, _$[$0].first_column);

break;
case 67:

  yy.rgquerys.setValue('NAME_TEST -> CNAME;\n');
  this.$ = $$[$0];

break;
case 68:

  yy.rgquerys.setValue('CNAME -> ID;\n');
  this.$ = new yy.Expression.Identifier(_$[$0].first_line, _$[$0].first_column, $$[$0]);

break;
case 69:

  yy.rgquerys.setValue('CNAME -> ID_XQUERY;\n');
  this.$ = new yy.Expression.IdentifierXquery(_$[$0].first_line, _$[$0].first_column, $$[$0]);

break;
case 70:
 yy.rgquerys.setValue('CNAME -> CALL_FUNCTION;\n'); this.$ = $$[$0]; 
break;
case 71:

  yy.rgquerys.setValue('CNAME -> AXIS_NAME;\n');
  this.$ = $$[$0];

break;
case 72:
 
  yy.rgquerys.setValue('NODE_TYPE -> NODE();\n');
  this.$ = new yy.Expression.Nodo(_$[$0].first_line, _$[$0].first_column); 

break;
case 73:
 
  yy.rgquerys.setValue('NODE_TYPE -> TEXT();\n');
  this.$ = new yy.Expression.Text(_$[$0].first_line, _$[$0].first_column); 

break;
case 74:

  yy.rgquerys.setValue('AXIS_NAME -> ANCESTOR;\n');
  this.$ = new yy.Expression.Ancestor(_$[$0].first_line, _$[$0].first_column);

break;
case 75:

  yy.rgquerys.setValue('AXIS_NAME -> ANCESTOR-OR-SELF;\n');
  this.$ = new yy.Expression.AncestorOrSelf(_$[$0].first_line, _$[$0].first_column);

break;
case 76:

  yy.rgquerys.setValue('AXIS_NAME -> ATTRIBUTE-OR-SELF;\n');
  this.$ = new yy.Expression.Attribute(_$[$0].first_line, _$[$0].first_column);

break;
case 77:

  yy.rgquerys.setValue('AXIS_NAME -> CHILD;\n');
  this.$ = new yy.Expression.Child(_$[$0].first_line, _$[$0].first_column);

break;
case 78:

  yy.rgquerys.setValue('AXIS_NAME -> DESCAENDANT;\n');
  this.$ = new yy.Expression.Descendant(_$[$0].first_line, _$[$0].first_column);

break;
case 79:

  yy.rgquerys.setValue('AXIS_NAME -> DESCENDANT-OR-SELF;\n');
  this.$ = new yy.Expression.DescendantOrSelf(_$[$0].first_line, _$[$0].first_column);

break;
case 80:

  yy.rgquerys.setValue('AXIS_NAME -> FOLLOWING;\n');
  this.$ = new yy.Expression.Following(_$[$0].first_line, _$[$0].first_column);

break;
case 81:

  yy.rgquerys.setValue('AXIS_NAME -> FOLLOWING-SIBLING;\n');
  this.$ = new yy.Expression.FollowingSibling(_$[$0].first_line, _$[$0].first_column);

break;
case 82:

  yy.rgquerys.setValue('AXIS_NAME -> NAMESPACE;\n');
  this.$ = new yy.Expression.Namespace(_$[$0].first_line, _$[$0].first_column);

break;
case 83:

  yy.rgquerys.setValue('AXIS_NAME -> PARENT;\n');
  this.$ = new yy.Expression.Parent(_$[$0].first_line, _$[$0].first_column);

break;
case 84:

  yy.rgquerys.setValue('AXIS_NAME -> PRECEDING;\n');
  this.$ = new yy.Expression.Preceding(_$[$0].first_line, _$[$0].first_column);

break;
case 85:

  yy.rgquerys.setValue('AXIS_NAME -> PRECEDING-SIBLING;\n');
  this.$ = new yy.Expression.PrecedingSibling(_$[$0].first_line, _$[$0].first_column);

break;
case 86:

  yy.rgquerys.setValue('AXIS_NAME -> SELF;\n');
  this.$ = new yy.Expression.Self(_$[$0].first_line, _$[$0].first_column);

break;
case 87:
 yy.rgquerys.setValue('PREDICATE -> [ EXP ];\n'); this.$ = $$[$0-1]; 
break;
case 88:

  yy.rgquerys.setValue('PATH_EXP_NO_ROOT -> LOCATION_PATH;\n');
  this.$ = new yy.Expression.PathExp(_$[$0].first_line, _$[$0].first_column, $$[$0]);

break;
case 89:

  yy.rgquerys.setValue('PATH_EXP_NO_ROOT -> // RELATIVE_LOCATION_PATH;\n');

break;
case 90:

  yy.rgquerys.setValue('PATH_EXP_NO_ROOT -> / RELATIVE_LOCATION_PATH;\n');

break;
case 91:
 yy.rgquerys.setValue('PATH_EXP_NO_ROOT -> FILTER_EXP;\n'); this.$ = $$[$0]; 
break;
case 92:
 yy.rgquerys.setValue('FILTER_EXP -> PRIMARY_EXP;\n'); this.$ = $$[$0]; 
break;
case 93:

  yy.rgquerys.setValue('FILTER_EXP -> PRIMARY_EXP PREDICATE;\n');
  this.$ = new yy.Expression.Predicate(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0]);

break;
case 94:
 yy.rgquerys.setValue('EXP -> EXP OR EXP;\n'); this.$ = new yy.Expression.Or(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], $$[$0-1]); 
break;
case 95:
 yy.rgquerys.setValue('EXP -> EXP AND EXP;\n'); this.$ = new yy.Expression.And(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], $$[$0-1]); 
break;
case 96:
 yy.rgquerys.setValue('EXP -> EXP = EXP;\n'); this.$ = new yy.Expression.Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], "="); 
break;
case 97:
 yy.rgquerys.setValue('EXP -> EXP != EXP;\n'); this.$ = new yy.Expression.Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], "!="); 
break;
case 98:
 yy.rgquerys.setValue('EXP -> EXP < EXP;\n'); this.$ = new yy.Expression.Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], "<"); 
break;
case 99:
 yy.rgquerys.setValue('EXP -> EXP > EXP;\n'); this.$ = new yy.Expression.Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], ">"); 
break;
case 100:
 yy.rgquerys.setValue('EXP -> EXP <= EXP;\n'); this.$ = new yy.Expression.Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], "<="); 
break;
case 101:
 yy.rgquerys.setValue('EXP -> EXP >= EXP;\n'); this.$ = new yy.Expression.Relational(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], ">="); 
break;
case 102:
 yy.rgquerys.setValue('EXP -> EXP + EXP;\n'); this.$ = new yy.Expression.Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], $$[$0-1]); 
break;
case 103:
 yy.rgquerys.setValue('EXP -> EXP - EXP;\n'); this.$ = new yy.Expression.Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], $$[$0-1]); 
break;
case 104:
 yy.rgquerys.setValue('EXP -> EXP * EXP;\n'); this.$ = new yy.Expression.Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], $$[$0-1]); 
break;
case 105:
 yy.rgquerys.setValue('EXP -> EXP DIV EXP;\n'); this.$ = new yy.Expression.Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], $$[$0-1]); 
break;
case 106:
 yy.rgquerys.setValue('EXP -> EXP MOD EXP;\n'); this.$ = new yy.Expression.Arithmetic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0], $$[$0-1]); 
break;
case 107:
 yy.rgquerys.setValue('EXP -> EXP TO EXP;\n'); this.$ = new yy.Expression.To(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 108:
 yy.rgquerys.setValue('EXP -> - EXP;\n'); this.$ = new yy.Expression.NegativeNumber(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 109:
 
  yy.rgquerys.setValue('PRIMARY_EXP -> ();\n');
  this.$ = new yy.Expression.Epsilon(_$[$0-1].first_line, _$[$0-1].first_column); 
  
break;
case 110:

  yy.rgquerys.setValue('EXP -> UNION_PATH;\n');
  this.$ = new yy.Expression.UnionPath(_$[$0].first_line, _$[$0].first_column, $$[$0]);

break;
case 111:
 yy.rgquerys.setValue('PRIMARY_EXP -> ( EXP );\n'); this.$ = $$[$0-1]; 
break;
case 112:

  yy.rgquerys.setValue('PRIMARY_EXP -> STRING_LITERAL;\n');
  this.$ = new yy.Expression.Literal(_$[$0].first_line, _$[$0].first_column, $$[$0], "string");

break;
case 113:

  yy.rgquerys.setValue('PRIMARY_EXP -> NUMBER_LITERAL;\n');
  this.$ = new yy.Expression.Literal(_$[$0].first_line, _$[$0].first_column, +$$[$0], "number");

break;
case 114:
 yy.rgquerys.setValue('PRIMARY_EXP -> LAST();\n'); 
          this.$ = new yy.Expression.Last(_$[$0].first_line, _$[$0].first_column);
break;
case 115:
 yy.rgquerys.setValue('PRIMARY_EXP -> POSITION();\n'); 
              this.$ = new yy.Expression.Position(_$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,33:5,34:$V7,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{1:[3]},{5:[1,69],24:$VF},{2:$V0,4:71,7:4,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,33:72,34:$V7,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VG,[2,46]),o($VH,[2,24]),o($VI,[2,3],{79:$VJ,100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW}),o($VI,[2,4]),o($VI,[2,5]),o($VI,[2,6]),o($VI,[2,7]),{35:[1,87]},{8:88,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{2:$V0,7:90,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,30:[1,89],36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VX,[2,110],{60:[1,91]}),{13:92,14:93,15:[1,94],16:$VY,18:[1,96],19:95,20:$V2,22:$V3},{29:[1,98]},{2:$V0,7:99,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VZ,[2,48]),o($V_,[2,15]),o($VZ,[2,88]),o($VZ,[2,91],{65:[1,100],66:[1,101]}),{21:102,25:[1,103]},{23:104,25:[1,105]},o($VZ,[2,49],{65:$V$,66:$V01}),o($VZ,[2,50]),o($V11,[2,92],{69:108,96:$V21}),o($V11,[2,55]),{25:$V4,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,63:110,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz},{25:$V4,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,63:111,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz},o($V31,[2,112]),o($V31,[2,113]),o($V31,[2,114]),o($V31,[2,115]),o($V11,[2,57],{69:112,96:$V21}),o($V11,[2,58]),o($V31,$V41,{72:[1,113]}),{25:$V4,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,71:115,73:114,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz},o($V31,[2,61]),o($V11,[2,62]),o($V11,[2,63]),o($V51,[2,74]),o($V51,[2,75]),o($V51,[2,76]),o($V51,[2,77]),o($V51,[2,78]),o($V51,[2,79]),o($V51,[2,80]),o($V51,[2,81]),o($V51,[2,82]),o($V51,[2,83]),o($V51,[2,84]),o($V51,[2,85]),o($V51,[2,86]),o($V31,[2,64]),o($V31,[2,65]),o($V31,[2,66]),o($V31,[2,67]),o($V31,[2,72]),o($V31,[2,73]),o($V31,[2,68]),o($V31,[2,69]),o($V31,[2,70]),{37:[1,116]},{29:[1,117]},{29:[1,118]},{29:[1,119]},{29:[1,120]},{29:[1,121]},{1:[2,1]},{2:$V0,7:122,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{5:[1,123],24:$VF},o($VH,[2,23]),{8:124,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:125,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:126,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:127,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:128,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:129,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:130,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:131,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:132,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:133,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:134,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:135,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:136,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{8:137,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{36:[1,138]},o($VX,[2,108]),o($VX,[2,109]),{30:[1,139]},{25:$V4,29:[1,141],36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,61:140,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,113:$VB,114:$VC,115:$VD,116:$VE},{14:142,15:[1,143],16:$VY},{15:[1,144]},{2:$V0,7:145,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($V_,[2,14]),{2:$V0,7:146,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{17:[1,147]},{2:$V0,7:148,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VI,[2,27]),{25:$V4,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,63:149,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz},{25:$V4,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,63:150,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz},o($V_,[2,16],{24:[1,151]}),{26:[1,152]},o($V_,[2,17],{24:[1,153]}),{27:[1,154]},{25:$V4,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,67:155,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz},{25:$V4,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,67:156,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz},o($V11,[2,93]),{8:157,25:$V4,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VZ,[2,51],{65:$V$,66:$V01}),o($VZ,[2,52],{65:$V$,66:$V01}),o($V11,[2,56]),{25:$V4,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,71:115,73:158,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz},o($V31,[2,60]),o($V31,$V41),{38:[1,159]},{2:$V0,7:160,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{2:$V0,7:161,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{2:$V0,7:162,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{2:$V0,7:163,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{2:$V0,7:164,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VG,[2,45]),{1:[2,2]},o([5,15,16,18,20,22,24,30,32,44,97,100],[2,94],{79:$VJ,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW}),o([5,15,16,18,20,22,24,30,32,44,97,100,101],[2,95],{79:$VJ,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW}),o($V61,[2,96],{79:$VJ,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW}),o($V61,[2,97],{79:$VJ,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW}),o($V61,[2,98],{79:$VJ,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW}),o($V61,[2,99],{79:$VJ,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW}),o($V61,[2,100],{79:$VJ,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW}),o($V61,[2,101],{79:$VJ,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW}),o($V71,[2,102],{79:$VJ,110:$VU,111:$VV}),o($V71,[2,103],{79:$VJ,110:$VU,111:$VV}),o($VX,[2,104]),o($VX,[2,105]),o($VX,[2,106]),o([5,15,16,18,20,22,24,30,32,44,97,100,101,102,103,104,105,106,107,112],[2,107],{79:$VJ,108:$VS,109:$VT,110:$VU,111:$VV}),{37:[1,165]},o($V31,[2,111]),o($VZ,[2,47]),{2:$V0,7:90,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{15:[1,166]},{2:$V0,7:167,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{2:$V0,7:168,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VI,[2,11]),o([15,16],[2,13]),{2:$V0,7:169,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{30:[1,170]},o($VZ,[2,89],{65:$V$,66:$V01}),o($VZ,[2,90],{65:$V$,66:$V01}),{25:[1,171]},{2:$V0,7:172,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{25:[1,173]},{2:$V0,7:174,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($V11,[2,53]),o($V11,[2,54]),{79:$VJ,97:[1,175],100:$VK,101:$VL,102:$VM,103:$VN,104:$VO,105:$VP,106:$VQ,107:$VR,108:$VS,109:$VT,110:$VU,111:$VV,112:$VW},o($V31,[2,59]),{29:[1,176]},{24:[1,177]},{30:[1,178]},{30:[1,179]},{30:[1,180]},{30:[1,181]},{38:[1,182]},{2:$V0,7:183,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($VI,[2,9]),o($VI,[2,10]),{15:[2,12]},{31:[1,184]},{26:[1,185]},o($V81,[2,19]),{27:[1,186]},o($V81,[2,21]),o($V11,[2,87]),{2:$V0,4:187,7:4,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,30:[1,188],36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{2:$V0,7:189,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($V31,[2,41]),o($V31,[2,42]),o($V31,[2,43]),o($V31,[2,44]),{29:[1,190]},o($VI,[2,8]),{2:$V0,7:191,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{2:$V0,7:192,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{2:$V0,7:193,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{24:$VF,30:[1,194]},o($V31,[2,38]),{24:[1,195],30:[1,196]},{25:[1,199],30:[1,198],39:197},{32:[1,200]},o($V81,[2,18]),o($V81,[2,20]),o($V31,[2,37]),{2:$V0,7:201,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($V31,[2,40]),{24:[1,203],30:[1,202]},{40:[1,204]},{40:[1,205]},{2:$V0,7:206,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{30:[1,207]},{40:[1,208]},{25:[1,209]},{41:210,46:$V91},{41:212,46:$V91},o($VI,[2,22]),o($V31,[2,39]),{41:213,46:$V91},{40:[1,214]},{42:[1,215]},{37:[1,216]},{42:[1,217]},{42:[1,218]},{41:219,46:$V91},{43:[1,220]},{47:221,48:[1,222],49:[1,223],50:[1,224],51:[1,225],52:[1,226],53:[1,227]},o($Va1,[2,29]),{43:[1,228]},{42:[1,229]},{2:$V0,7:230,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},{42:[2,30]},{42:[2,31]},{42:[2,32]},{42:[2,33]},{42:[2,34]},{42:[2,35]},{42:[2,36]},{2:$V0,7:231,8:6,9:7,10:8,11:9,12:15,15:$V1,19:19,20:$V2,22:$V3,25:$V4,28:$V5,29:$V6,36:$V8,38:$V9,48:$Va,54:62,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:14,61:18,62:20,63:24,64:25,65:$Vf,66:$Vg,67:27,68:34,70:35,71:36,73:38,74:$Vh,75:$Vi,76:$Vj,77:54,78:55,79:$Vk,80:57,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,98:21,99:26,109:$VA,113:$VB,114:$VC,115:$VD,116:$VE},o($Va1,[2,28]),{44:[1,232]},{44:[1,233]},{45:[1,234]},{45:[1,235]},o($VH,[2,26]),o($VH,[2,25])],
defaultActions: {69:[2,1],123:[2,2],169:[2,12],221:[2,30],222:[2,31],223:[2,32],224:[2,33],225:[2,34],226:[2,35],227:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip */
break;
case 1: return "//";    
break;
case 2: return "/";     
break;
case 3: return "(";     
break;
case 4: return ")";     
break;
case 5: return "[";     
break;
case 6: return "]";     
break;
case 7: return "{";     
break;
case 8: return "}";     
break;
case 9: return "::";    
break;
case 10: return "|";     
break;
case 11: return "+";     
break;
case 12: return "-";     
break;
case 13: return "*";     
break;
case 14: return "div";   
break;
case 15: return "=";     
break;
case 16: return "!=";    
break;
case 17: return "<=";    
break;
case 18: return ">=";    
break;
case 19: return "<";     
break;
case 20: return ">";     
break;
case 21: return "and";   
break;
case 22: return "or";    
break;
case 23: return "mod";   
break;
case 24: return "..";    
break;
case 25: return ".";     
break;
case 26: return "@";     
break;
case 27: return ",";     
break;
case 28: return ":=";    
break;
case 29: return "?";     
break;
case 30: return ":";     
break;
case 31: return ";";     
break;
case 32: return "node()";      
break;
case 33: return "text()";      
break;
case 34: return "last()";      
break;
case 35: return "position()"; 
break;
case 36: return "ancestor-or-self";   
break;
case 37: return "descendant-or-self"; 
break;
case 38: return "following-sibling";  
break;
case 39: return "preceding-sibling";  
break;
case 40: return "ancestor";           
break;
case 41: return "attribute";          
break;
case 42: return "child";              
break;
case 43: return "descendant";         
break;
case 44: return "following";          
break;
case 45: return "namespace";          
break;
case 46: return "parent";             
break;
case 47: return "preceding";          
break;
case 48: return "self";               
break;
case 49: return "for";                
break;
case 50: return "let";                
break;
case 51: return "where";              
break;
case 52: return "order";              
break;
case 53: return "return";             
break;
case 54: return "by";                 
break;
case 55: return "in";                 
break;
case 56: return "to";                 
break;
case 57: return "if";                 
break;
case 58: return "then";               
break;
case 59: return "else";               
break;
case 60: return "string";             
break;
case 61: return "integer";            
break;
case 62: return "float";              
break;
case 63: return "decimal";            
break;
case 64: return "declare";            
break;
case 65: return "as";                 
break;
case 66: return "xs";                 
break;
case 67: return "function";           
break;
case 68: return "local";              
break;
case 69: return "substring";          
break;
case 70: return "upper-case";         
break;
case 71: return "lower-case";         
break;
case 72: return "number";             
break;
case 73: return "string";             
break;
case 74: return "boolean";            
break;
case 75: return "double";             
break;
case 76: return "number_literal";  
break;
case 77: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return "string_literal"; 
break;
case 78: return "identifier_xquery";      
break;
case 79: return "identifier";      
break;
case 80: return "EOF"; 
break;
case 81:yy.errorsXPATH.push(new yy.NodeError(yy_.yytext, 'lexico', 'Token no perteneciente al lenguaje.', yy_.yylloc.first_line, yy_.yylloc.first_column, 'XPATH'));
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:::)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:=|eq\b)/i,/^(?:!=|ne\b)/i,/^(?:<=|le\b)/i,/^(?:>=|ge\b)/i,/^(?:<|lt\b)/i,/^(?:>|gt\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:mod\b)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:,)/i,/^(?::=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:node\(\))/i,/^(?:text\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:ancestor-or-self\b)/i,/^(?:descendant-or-self\b)/i,/^(?:following-sibling\b)/i,/^(?:preceding-sibling\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:for\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:order\b)/i,/^(?:return\b)/i,/^(?:by\b)/i,/^(?:in\b)/i,/^(?:to\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:string\b)/i,/^(?:integer\b)/i,/^(?:float\b)/i,/^(?:decimal\b)/i,/^(?:declare\b)/i,/^(?:as\b)/i,/^(?:xs\b)/i,/^(?:function\b)/i,/^(?:local\b)/i,/^(?:substring\b)/i,/^(?:upper-case\b)/i,/^(?:lower-case\b)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:".*?"|'.*?'|`.*?`)/i,/^(?:(\$)([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar_xpath_asc;
exports.Parser = grammar_xpath_asc.Parser;
exports.parse = function () { return grammar_xpath_asc.parse.apply(grammar_xpath_asc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}