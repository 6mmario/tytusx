/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorizq_xpath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,4],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,17],$Vb=[1,18],$Vc=[1,19],$Vd=[1,20],$Ve=[1,21],$Vf=[1,22],$Vg=[1,23],$Vh=[1,24],$Vi=[1,25],$Vj=[1,26],$Vk=[1,27],$Vl=[1,28],$Vm=[1,29],$Vn=[1,30],$Vo=[1,31],$Vp=[1,32],$Vq=[1,33],$Vr=[2,5,7,11,12,13,15,16,17,18,19,43,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,62],$Vs=[1,38],$Vt=[2,5,7,11,12,13,15,16,17,18,19,21,23,28,29,30,31,32,33,34,35,36,37,43,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,62],$Vu=[2,5,7,11,12,13,15,16,17,18,19,21,23,28,29,30,31,32,33,34,35,36,37,39,40,43,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,62],$Vv=[1,41],$Vw=[1,42],$Vx=[2,70],$Vy=[1,44],$Vz=[1,76],$VA=[1,74],$VB=[1,75],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,80],$VG=[1,81],$VH=[1,82],$VI=[1,83],$VJ=[1,84],$VK=[11,12,13,15,16,17,18,19,23,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,62],$VL=[23,39,40];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ELEMENTO":4,"EOF":5,"ELEMENTO_P":6,"tk_barra_or":7,"EXPRESION":8,"CONTENIDO":9,"SIMBOLOS":10,"tk_diagonal":11,"tk_diagonal_doble":12,"tk_arroba":13,"ARROPROD":14,"tk_puntos_seguidos":15,"tk_punto":16,"tk_asterisco":17,"tk_identificador":18,"tk_numero":19,"RESERVA":20,"tk_corchete_izq":21,"COMPLEMENTO":22,"tk_corchete_der":23,"PREDICADO":24,"OPERACIONES":25,"OPERADOR":26,"MASSENTENCIA":27,"tk_mas":28,"tk_menos":29,"tk_div":30,"tk_igual":31,"tk_indiferente":32,"tk_menor_igual":33,"tk_menor":34,"tk_mayor_igual":35,"tk_mayor":36,"tk_mod":37,"ITEMFINAL":38,"tk_or":39,"tk_and":40,"tk_caracter":41,"tk_hilera":42,"tk_ancestor":43,"ITEMRESERVA":44,"tk_ancestor_or_self":45,"tk_attribute":46,"tk_child":47,"tk_descendant":48,"tk_descendant_or_self":49,"tk_following":50,"tk_following_sibling":51,"tk_namespace":52,"tk_parent":53,"tk_preceding":54,"tk_preceding_sibling":55,"tk_self":56,"tk_node":57,"tk_parentesis_izq":58,"tk_parentesis_der":59,"tk_last":60,"tk_position":61,"tk_text":62,"tk_cuatro_puntos":63,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_barra_or",11:"tk_diagonal",12:"tk_diagonal_doble",13:"tk_arroba",15:"tk_puntos_seguidos",16:"tk_punto",17:"tk_asterisco",18:"tk_identificador",19:"tk_numero",21:"tk_corchete_izq",23:"tk_corchete_der",28:"tk_mas",29:"tk_menos",30:"tk_div",31:"tk_igual",32:"tk_indiferente",33:"tk_menor_igual",34:"tk_menor",35:"tk_mayor_igual",36:"tk_mayor",37:"tk_mod",39:"tk_or",40:"tk_and",41:"tk_caracter",42:"tk_hilera",43:"tk_ancestor",45:"tk_ancestor_or_self",46:"tk_attribute",47:"tk_child",48:"tk_descendant",49:"tk_descendant_or_self",50:"tk_following",51:"tk_following_sibling",52:"tk_namespace",53:"tk_parent",54:"tk_preceding",55:"tk_preceding_sibling",56:"tk_self",57:"tk_node",58:"tk_parentesis_izq",59:"tk_parentesis_der",60:"tk_last",61:"tk_position",62:"tk_text",63:"tk_cuatro_puntos"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,2],[8,2],[8,1],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[14,1],[14,1],[9,3],[9,3],[9,2],[22,2],[24,1],[25,2],[25,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[27,3],[27,3],[27,1],[38,1],[38,1],[38,1],[38,1],[38,2],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[20,2],[20,2],[20,2],[20,2],[20,2],[20,2],[20,2],[20,2],[20,2],[20,2],[20,2],[20,2],[20,2],[20,3],[20,3],[20,3],[20,3],[44,2],[44,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:

			this.$= new Nodo("ELE", "ELE" );
			this.$.agregarHijo($$[$0-1]);
            this.$.agregarHijo($$[$0]);
		
break;
case 3: case 5:

			this.$= new Nodo("ELE", "ELE" );
            this.$.agregarHijo($$[$0]);
		
break;
case 4:

            this.$= new Nodo("ELE", "ELE" );
			this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
            this.$.agregarHijo($$[$0]);
        
break;
case 6:

            listaErrores.push(new TokenError("XPATH",'Este es un error sint√°ctico ' , "Me recupero con: " + yytext , _$[$0-1].first_line, _$[$0].first_column ));
        
break;
case 7:

                this.$= new Nodo("EXP", "EXP" );
				this.$.agregarHijo($$[$0-1]);
                this.$.agregarHijo($$[$0]);
        
break;
case 8:

                this.$= new Nodo("EXP", "EXP" );
				this.$.agregarHijo($$[$0]);
        
break;
case 9:

			this.$ = new Nodo("SIMBOLOS", "SIMBOLOS");
			this.$.agregarHijo(new Nodo($$[$0], $$[$0]));
        
break;
case 10: case 12: case 13: case 14: case 15: case 16:

            this.$ = new Nodo("SIMBOLOS", "SIMBOLOS");
			this.$.agregarHijo(new Nodo($$[$0], $$[$0]));
        
break;
case 11:

            this.$ = new Nodo("SIMBOLOS", "SIMBOLOS");
			this.$.agregarHijo(new Nodo($$[$0-1], $$[$0-1]));
			this.$.agregarHijo($$[$0]);
        
break;
case 17:

            this.$ = new Nodo("SIMBOLOS", "SIMBOLOS");
			this.$.agregarHijo($$[$0]);
        
break;
case 18: case 19:

            this.$ = new Nodo("ARROPROD", "ARROPROD");
			this.$.agregarHijo(new Nodo($$[$0], $$[$0]));
        
break;
case 20:

            this.$ = new Nodo("CONTENIDO","CONTENIDO");
			this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
			this.$.agregarHijo($$[$0-1]);
			this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 21:

			this.$ = new Nodo("CONTENIDO","CONTENIDO");
			this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
			this.$.agregarHijo($$[$0-1]);
			this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
		
break;
case 22:

			this.$ = new Nodo("CONTENIDO","CONTENIDO");
			this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
			this.$.agregarHijo(new Nodo($$[$01],$$[$01]));
		
break;
case 23:

			this.$ = new Nodo("COMPLEMENTO", "COMPLEMENTO");
			this.$.agregarHijo($$[$0-1]);
			this.$.agregarHijo($$[$0]);
		
break;
case 24:

			this.$ = new Nodo("PREDICADO", "PREDICADO");
			this.$.agregarHijo($$[$0]);
		
break;
case 25:

			this.$ = new Nodo("OPERACIONES", "OPERACIONES");
			this.$.agregarHijo($$[$0-1]);
			this.$.agregarHijo($$[$0]);
		
break;
case 26:

			this.$ = new Nodo("OPERACIONES", "OPERACIONES");
			this.$.agregarHijo($$[$0]);
		
break;
case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37:

			this.$ = new Nodo("OPERADOR", "OPERADOR");
			this.$.agregarHijo(new Nodo($$[$0], $$[$0]));
		
break;
case 38:

			this.$ = new Nodo("MASSENTENCIA", "MASSENTENCIA");
			this.$.agregarHijo($$[$0-2]);
			this.$.agregarHijo(new Nodo($$[$0-1], $$[$0-1]));
			this.$.agregarHijo($$[$0]);
		
break;
case 39:

			this.$ = new Nodo("MASSENTENCIA", "MASSENTENCIA");
			this.$.agregarHijo($$[$0-2]);
			this.$.agregarHijo(new Nodo($$[$0-1], $$[$0-1]));
			this.$.agregarHijo($$[$0-1]);
		
break;
case 40:

			this.$ = new Nodo("MASSENTENCIA", "MASSENTENCIA");
			this.$.agregarHijo($$[$0]);
		
break;
case 41:

			this.$ = new Nodo("ITEMFINAL", "ITEMFINAL");
			this.$.agregarHijo($$[$0]);
		
break;
case 42: case 43: case 44: case 46: case 47: case 48: case 49: case 50: case 51:

			this.$ = new Nodo("ITEMFINAL", "ITEMFINAL");
			this.$.agregarHijo(new Nodo($$[$0], $$[$0]));
		
break;
case 45:

			this.$ = new Nodo("ITEMFINAL", "ITEMFINAL");
			this.$.agregarHijo(new Nodo($$[$0-1], $$[$0-1]));
			this.$.agregarHijo($$[$0]);
		
break;
case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64:

			this.$ = new Nodo("RESERVA", "RESERVA");
			this.$.agregarHijo(new Nodo($$[$0-1], $$[$0-1]));
			this.$.agregarHijo($$[$0]);
		
break;
case 65: case 66: case 67: case 68:

			this.$ = new Nodo("RESERVA", "RESERVA");
			this.$.agregarHijo(new Nodo($$[$0-2], $$[$0-2]));
			this.$.agregarHijo(new Nodo($$[$0-1], $$[$0-1]));
			this.$.agregarHijo(new Nodo($$[$0], $$[$0]));
		
break;
case 69:

			this.$ = new Nodo("ITEM_RESERVA", "ITEM_RESERVA");
			this.$.agregarHijo(new Nodo($$[$0-1], $$[$0-1]));
			this.$.agregarHijo($$[$0]);
		
break;
case 70:

			this.$ = new Nodo("ITEM_RESERVA", "ITEM_RESERVA");
			this.$.agregarHijo(new Nodo("Œµ","Œµ"));
        
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,8:5,10:7,11:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:$V7,18:$V8,19:$V9,20:16,43:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk,55:$Vl,56:$Vm,57:$Vn,60:$Vo,61:$Vp,62:$Vq},{1:[3]},{2:$V0,5:[1,34],6:35,7:$V1,8:5,10:7,11:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:$V7,18:$V8,19:$V9,20:16,43:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk,55:$Vl,56:$Vm,57:$Vn,60:$Vo,61:$Vp,62:$Vq},o($Vr,[2,3]),{8:36,10:7,11:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:$V7,18:$V8,19:$V9,20:16,43:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk,55:$Vl,56:$Vm,57:$Vn,60:$Vo,61:$Vp,62:$Vq},o($Vr,[2,5],{9:37,21:$Vs}),{7:[1,39]},o($Vt,[2,8]),o($Vu,[2,9]),o($Vu,[2,10]),{14:40,17:$Vv,18:$Vw},o($Vu,[2,12]),o($Vu,[2,13]),o($Vu,[2,14]),o($Vu,[2,15]),o($Vu,[2,16]),o($Vu,[2,17]),o($Vu,$Vx,{44:43,63:$Vy}),o($Vu,$Vx,{44:45,63:$Vy}),o($Vu,$Vx,{44:46,63:$Vy}),o($Vu,$Vx,{44:47,63:$Vy}),o($Vu,$Vx,{44:48,63:$Vy}),o($Vu,$Vx,{44:49,63:$Vy}),o($Vu,$Vx,{44:50,63:$Vy}),o($Vu,$Vx,{44:51,63:$Vy}),o($Vu,$Vx,{44:52,63:$Vy}),o($Vu,$Vx,{44:53,63:$Vy}),o($Vu,$Vx,{44:54,63:$Vy}),o($Vu,$Vx,{44:55,63:$Vy}),o($Vu,$Vx,{44:56,63:$Vy}),{58:[1,57]},{58:[1,58]},{58:[1,59]},{58:[1,60]},{1:[2,1]},o($Vr,[2,2]),o($Vr,[2,4],{9:37,21:$Vs}),o($Vt,[2,7]),{8:62,10:7,11:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:$V7,18:$V8,19:$V9,20:16,22:61,23:[1,63],43:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk,55:$Vl,56:$Vm,57:$Vn,60:$Vo,61:$Vp,62:$Vq},o($Vr,[2,6]),o($Vu,[2,11]),o($Vu,[2,18]),o($Vu,[2,19]),o($Vu,[2,52]),{10:64,11:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:$V7,18:$V8,19:$V9,20:16,43:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk,55:$Vl,56:$Vm,57:$Vn,60:$Vo,61:$Vp,62:$Vq},o($Vu,[2,53]),o($Vu,[2,54]),o($Vu,[2,55]),o($Vu,[2,56]),o($Vu,[2,57]),o($Vu,[2,58]),o($Vu,[2,59]),o($Vu,[2,60]),o($Vu,[2,61]),o($Vu,[2,62]),o($Vu,[2,63]),o($Vu,[2,64]),{59:[1,65]},{59:[1,66]},{59:[1,67]},{59:[1,68]},{23:[1,69]},{9:37,17:$Vz,21:$Vs,23:[1,70],24:71,25:72,26:73,28:$VA,29:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ},o($Vt,[2,22]),o($Vu,[2,69]),o($Vu,[2,65]),o($Vu,[2,66]),o($Vu,[2,67]),o($Vu,[2,68]),o($Vt,[2,20]),o($Vt,[2,21]),{23:[2,23]},{23:[2,24]},{11:[1,93],12:[1,94],13:[1,91],15:[1,95],16:[1,96],17:[1,97],18:[1,90],19:[1,92],20:87,23:[2,26],27:85,38:86,41:[1,88],42:[1,89],43:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk,55:$Vl,56:$Vm,57:$Vn,60:$Vo,61:$Vp,62:$Vq},o($VK,[2,27]),o($VK,[2,28]),o($VK,[2,29]),o($VK,[2,30]),o($VK,[2,31]),o($VK,[2,32]),o($VK,[2,33]),o($VK,[2,34]),o($VK,[2,35]),o($VK,[2,36]),o($VK,[2,37]),{23:[2,25]},{23:[2,40],39:[1,98],40:[1,99]},o($VL,[2,41]),o($VL,[2,42]),o($VL,[2,43]),o($VL,[2,44]),{14:100,17:$Vv,18:$Vw},o($VL,[2,46]),o($VL,[2,47]),o($VL,[2,48]),o($VL,[2,49]),o($VL,[2,50]),o($VL,[2,51]),{8:102,10:7,11:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:$V7,18:$V8,19:$V9,20:16,22:101,43:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk,55:$Vl,56:$Vm,57:$Vn,60:$Vo,61:$Vp,62:$Vq},{8:102,10:7,11:$V2,12:$V3,13:$V4,15:$V5,16:$V6,17:$V7,18:$V8,19:$V9,20:16,22:103,43:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,54:$Vk,55:$Vl,56:$Vm,57:$Vn,60:$Vo,61:$Vp,62:$Vq},o($VL,[2,45]),{23:[2,38]},{9:37,17:$Vz,21:$Vs,24:71,25:72,26:73,28:$VA,29:$VB,30:$VC,31:$VD,32:$VE,33:$VF,34:$VG,35:$VH,36:$VI,37:$VJ},{23:[2,39]}],
defaultActions: {34:[2,1],71:[2,23],72:[2,24],85:[2,25],101:[2,38],103:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 57;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace_node';
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 43;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48;
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55;
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 56;
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61;
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 27: listaTokens.push(new Token("Barra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 7;
break;
case 28: listaTokens.push(new Token("Suma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 29: listaTokens.push(new Token("Resta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 30: listaTokens.push(new Token("Asterisco", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 17;
break;
case 31: listaTokens.push(new Token("Indiferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 32: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 33: listaTokens.push(new Token("Menor_igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 34: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 35: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 36: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 37: listaTokens.push(new Token("Cuatro_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63;
break;
case 38: listaTokens.push(new Token("Diagonal_doble", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 12;
break;
case 39: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 11;
break;
case 40: listaTokens.push(new Token("Arroba", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 13;
break;
case 41: listaTokens.push(new Token("Puntos_Seguidos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 15;
break;
case 42: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 43: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 44: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 45: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 46: listaTokens.push(new Token("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 16;
break;
case 47: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 48: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 49: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 50: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 51: listaTokens.push(new Token("Restriccion", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_restriccion";
break;
case 52: return "EOF"; 
break;
case 53: listaErrores.push(new Token("ERROR LEXICO", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:namespace-node\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!=)/,/^(?:=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:'[^\']*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z_√Ä-√ø\u00F1\u00D1]([a-zA-Z√Ä-√ø\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[^/\+=*!><@|_\[\]-]+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorizq_xpath;
exports.Parser = analizadorizq_xpath.Parser;
exports.parse = function () { return analizadorizq_xpath.parse.apply(analizadorizq_xpath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}