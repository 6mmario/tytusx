/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XpathAnalyzerDescendant = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,6],$V5=[1,7],$V6=[5,14,17,26,32,33,34,35,36,37,38,39,40,41,42,43],$V7=[2,4],$V8=[1,14],$V9=[1,30],$Va=[5,8,14,17,26,32,33,34,35,36,37,38,39,40,41,42,43],$Vb=[1,51],$Vc=[1,58],$Vd=[1,59],$Ve=[1,60],$Vf=[1,61],$Vg=[1,62],$Vh=[1,63],$Vi=[1,64],$Vj=[1,65],$Vk=[1,66],$Vl=[1,67],$Vm=[1,68],$Vn=[1,69],$Vo=[1,70],$Vp=[1,71],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,55],$Vu=[1,56],$Vv=[1,57],$Vw=[1,84],$Vx=[1,93],$Vy=[1,94],$Vz=[1,87],$VA=[1,88],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[1,92],$VF=[1,82],$VG=[1,83],$VH=[1,85],$VI=[1,86],$VJ=[14,17,26,32,33,34,35,36,37,38,39,40,41,42,43],$VK=[2,42],$VL=[1,107],$VM=[17,26,32,33,34,35,36,37,38,39,40,41],$VN=[17,26,32,33,34,35,36,37,38,39];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LISTA-XPATH":4,"EOF":5,"XPATH-EXPRESION":6,"LISTA-XPATH_P":7,"node_set":8,"EXPRESION":9,"XPATH-EXPRESION_P":10,"FIRST_EXPRESION":11,"XPATH_EXPRESION_P":12,"identifier":13,"times":14,"node":15,"lparen":16,"rparen":17,"LISTA_PREDICATES":18,"root_expresion":19,"atribute_expresion":20,"current_expresion":21,"parent_expresion":22,"any_expresion":23,"lcorchetes":24,"PREDICATE":25,"rcorchetes":26,"LISTA_PREDICATES_P":27,"EXPRESION_NUMERICA":28,"EXPRESION_RELACIONAL":29,"EXPRESION_LOGICA":30,"PRIMITIVA":31,"or":32,"and":33,"lt":34,"lte":35,"gt":36,"gte":37,"equal":38,"nequal":39,"plus":40,"minus":41,"div":42,"mod":43,"AXES_NAME":44,"ancestor-or-self":45,"ancestor":46,"attribute":47,"child":48,"descendant-or-self":49,"descendant":50,"following-sibling":51,"following":52,"namespace":53,"preceding-sibling":54,"preceding":55,"parent":56,"self":57,"FUNCION_NATIVA":58,"last":59,"position":60,"text":61,"axe_connector":62,"DoubleLiteral":63,"IntegerLiteral":64,"StringLiteral":65,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"node_set",10:"XPATH-EXPRESION_P",13:"identifier",14:"times",15:"node",16:"lparen",17:"rparen",19:"root_expresion",20:"atribute_expresion",21:"current_expresion",22:"parent_expresion",23:"any_expresion",24:"lcorchetes",26:"rcorchetes",32:"or",33:"and",34:"lt",35:"lte",36:"gt",37:"gte",38:"equal",39:"nequal",40:"plus",41:"minus",42:"div",43:"mod",45:"ancestor-or-self",46:"ancestor",47:"attribute",48:"child",49:"descendant-or-self",50:"descendant",51:"following-sibling",52:"following",53:"namespace",54:"preceding-sibling",55:"preceding",56:"parent",57:"self",59:"last",60:"position",61:"text",62:"axe_connector",63:"DoubleLiteral",64:"IntegerLiteral",65:"StringLiteral"},
productions_: [0,[3,2],[4,2],[7,3],[7,0],[6,2],[6,2],[12,2],[12,0],[11,1],[11,1],[11,3],[11,2],[11,4],[11,2],[9,2],[9,3],[9,2],[9,2],[9,2],[9,4],[9,2],[9,3],[9,2],[9,2],[9,2],[9,4],[9,3],[9,4],[9,3],[9,3],[9,3],[9,5],[9,3],[9,4],[9,3],[9,3],[9,3],[9,5],[9,1],[18,4],[27,4],[27,0],[25,1],[25,1],[25,1],[25,1],[25,3],[30,3],[30,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[28,3],[28,3],[28,3],[28,3],[28,3],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[58,3],[58,3],[58,3],[31,1],[31,3],[31,1],[31,1],[31,1],[31,1],[31,2],[31,2],[31,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 ReporteGramatical.agregarProduccionXpath("S -> LISTA-XPATH EOF","S.LISTA = LISTA_XPATH;");
                          this.$ = new ListaXpathExpresion($$[$0-1], _$[$0-1].first_line,_$[$0-1].first_column); return this.$; 
break;
case 2:
 ReporteGramatical.agregarProduccionXpath("LISTA-XPATH -> XPATH LISTA_XPATH_P","LISTA-XPATH_P.LISTA = [ XPATH ];</br>LISTA_XPATH.LISTA = LISTA_XPATH_P.LISTA;");
                                            this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 3:
 ReporteGramatical.agregarProduccionXpath("LISTA-XPATH_P -> | XPATH LISTA-XPATH_P","LISTA-XPATH_P.LISTA.ADD( XPATH );</br>LISTA-XPATH_P1.LISTA = LISTA-XPATH_P.LISTA;");
                                                         this.$ = $$[$0]; this.$.unshift($$[$0-1]);  
break;
case 4:
 ReporteGramatical.agregarProduccionXpath("LISTA-XPATH_P -> epsilon","LISTA-XPATH_P.LISTA_SINTETIZADA = LISTA-XPATH_P.LISTA_HEREDADA;");
                    this.$ = [];
                
break;
case 5:
 ReporteGramatical.agregarProduccionXpath("XPATH -> EXPRESION XPATH_P","XPATH.LISTA.ADD(EXPRESION); XPATH_P.LISTA = XPATH.LISTA;");
                                                 this.$ = $$[$0];  this.$.unshift($$[$0-1]); 
break;
case 6:
 ReporteGramatical.agregarProduccionXpath("XPATH -> EXPRESION XPATH_P","XPATH.LISTA.ADD(EXPRESION); XPATH_P.LISTA = XPATH.LISTA;");
                                                      this.$ = $$[$0];  this.$.unshift($$[$0-1]); 
break;
case 7:
 ReporteGramatical.agregarProduccionXpath("XPATH_P -> EXPRESION XPATH_P","XPATH_P.LISTA.ADD( XPATH );</br>XPATH_P1.LISTA = XPATH_P.LISTA;");
                                                  this.$ = $$[$0]; this.$.unshift($$[$0-1]); 
break;
case 8:
  ReporteGramatical.agregarProduccionXpath("XPATH_P -> epsilon","XPATH_P.LISTA_SINTETIZADA = XPATH_P.LISTA_HEREDADA;");
                       this.$ = []; 
break;
case 9:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> id","EXPRESION = NodoXpath(id);");
                                this.$ = new RootIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 10:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> *","EXPRESION = NodoXpath('*');");
                            this.$ = new RootTimes([],_$[$0].first_line,_$[$0].first_column); 
break;
case 11:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> node()","EXPRESION = NodoXpath('node');");
                                         this.$ = new RootNode([],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 12:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> id LISTA_PREDICADOS","EXPRESION = NodoXpath(id, LISTA_PREDICADOS);");
                                                  this.$ = new RootIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 13:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> node LISTA_PREDICADOS","EXPRESION = NodoXpath('node', LISTA_PREDICADOS);");
                                                          this.$ = new RootNode($$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 14:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> * LISTA_PREDICADOS","EXPRESION = NodoXpath('*', LISTA_PREDICADOS);");
                                             this.$ = new RootTimes($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 15:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /id","EXPRESION = NodoXpath('/',id);");
                                        this.$ = new RootIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 16:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /@id","EXPRESION = NodoXpath('/@',id);");
                                                            this.$ = new RootAtribute($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 17:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /.","EXPRESION = NodoXpath('/.');");
                                                this.$ = new RootCurrent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 18:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /..","EXPRESION = NodoXpath('/..');");
                                                this.$ = new RootParent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 19:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /*","EXPRESION = NodoXpath('/*');");
                                    this.$ = new RootTimes([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 20:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /node()","EXPRESION = NodoXpath('/node');");
                                                this.$ = new RootNode([],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 21:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //id","EXPRESION = NodoXpath('//',id);");
                                        this.$ = new AnyIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 22:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@id","EXPRESION = NodoXpath('//@',id);");
                                                            this.$ = new AnyAtribute($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 23:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //.","EXPRESION = NodoXpath('//.');");
                                                this.$ = new AnyCurrent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 24:
    ReporteGramatical.agregarProduccionXpath("EXPRESION -> //..","EXPRESION = NodoXpath('//..');");
                                                this.$ = new AnyParent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 25:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //*","EXPRESION = NodoXpath('//*');");
                                    this.$ = new AnyTimes([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 26:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //node()","EXPRESION = NodoXpath('//node');");
                                                this.$ = new AnyNode([],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 27:
    ReporteGramatical.agregarProduccionXpath("EXPRESION -> /id LISTA_PREDICADOS","EXPRESION = NodoXpath('/',id, LISTA_PREDICADOS);");
                                                            this.$ = new RootIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 28:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /@id LISTA_PREDICADOS","EXPRESION = NodoXpath('/@',id,LISTA_PREDICADOS);");
                                                                            this.$ = new RootAtribute($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 29:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> '/.' LISTA_PREDICADOS","EXPRESION = NodoXpath('/.',LISTA_PREDICADOS);");
                                                                this.$ = new RootCurrent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 30:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> '/..' LISTA_PREDICADOS","EXPRESION = NodoXpath('/..',LISTA_PREDICADOS);");
                                                                this.$ = new RootParent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 31:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /* LISTA_PREDICADOS","EXPRESION = NodoXpath('/*',LISTA_PREDICADOS);");
                                                    this.$ = new RootTimes($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 32:
    ReporteGramatical.agregarProduccionXpath("EXPRESION -> '/node()' LISTA_PREDICADOS","EXPRESION = NodoXpath('/node',LISTA_PREDICADOS);");
                                                                    this.$ = new RootNode($$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 33:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //id LISTA_PREDICADOS","EXPRESION = NodoXpath('//',id, LISTA_PREDICADOS);");
                                                        this.$ = new AnyIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 34:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@id LISTA_PREDICADOS","EXPRESION = NodoXpath('//@',id,LISTA_PREDICADOS);");
                                                                            this.$ = new AnyAtribute($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 35:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> '//.' LISTA_PREDICADOS","EXPRESION = NodoXpath('//.',LISTA_PREDICADOS);");
                                                                this.$ = new AnyCurrent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 36:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> '//..' LISTA_PREDICADOS","EXPRESION = NodoXpath('//..',LISTA_PREDICADOS);");
                                                                this.$ = new AnyParent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 37:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //* LISTA_PREDICADOS","EXPRESION = NodoXpath('//*',LISTA_PREDICADOS);");
                                                    this.$ = new AnyTimes($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 38:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //node() LISTA_PREDICADOS","EXPRESION = NodoXpath('//node',LISTA_PREDICADOS);");
                                                                this.$ = new AnyNode($$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 39:

              ReporteGramatical.agregarProduccionXpath("EXPRESION -> error","ListaErrores.agregar(error)");
              ListaErrores.AgregarErrorXPATH(new TokenError(TipoError.Sintactico,"No se esperaba: "+yytext+".",_$[$0].first_line,_$[$0].first_column));
              this.$ = new NodoError(_$[$0].first_line,_$[$0].first_column);
          
break;
case 40:
 ReporteGramatical.agregarProduccionXpath("LISTA_PREDICADOS -> [ PREDICADO ] LISTA_PREDICADOS_P","LISTA_PREDICADOS.LISTA = LISTA_PREDICADOS_P.LISTA; </br>LISTA_PREDICADOS.LISTA.ADD_FIRST(PREDICADO);");
                                                                        this.$ = $$[$0]; this.$.unshift($$[$0-2]);
                                                                      
break;
case 41:
 ReporteGramatical.agregarProduccionXpath("PREDICADOS_P-> [ PREDICADO ] PREDICADOS_P","PREDICADOS_P.LISTA = PREDICADOS_P1.LISTA ;</br>PREDICADOS_P.LISTA.ADD_FIRST( PREDICADO );");
                                                                           this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 42:
  ReporteGramatical.agregarProduccionXpath("PREDICADOS_P -> epsilon","PREDICADOS_P.LISTA = [];");
                        this.$ = []; 
break;
case 43:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> EXPRESION_NUMERICA","PREDICADO = EXPRESION_NUMERICA;");
                                 this.$ = $$[$0]; 
break;
case 44:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> EXPRESION_RELACIONAL","PREDICADO = EXPRESION_RELACIONAL;");
                                   this.$ = $$[$0]; 
break;
case 45:
  ReporteGramatical.agregarProduccionXpath("PREDICADO -> EXPRESION_LOGICA","PREDICADO = EXPRESION_LOGICA;");
                                this.$ = $$[$0]; 
break;
case 46:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> PRIMITIVA","PREDICADO = PRIMITIVA;");
                        this.$ = $$[$0]; 
break;
case 47:
   ReporteGramatical.agregarProduccionXpath("PREDICADO -> ( PREDICADO )","PREDICADO = PREDICADO1;");
                                        this.$ = $$[$0-1]; 
break;
case 48:
  ReporteGramatical.agregarProduccionXpath("PREDICADO -> PREDICADO or PREDICADO","PREDICADO = new OrLogica(PREDICADO1,PREDICADO2);");
                                            this.$ = new OrLogica($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 49:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> PREDICADO or PREDICADO","PREDICADO = new AndLogica(PREDICADO1,PREDICADO2);");
                                            this.$ = new AndLogica($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 50:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO < PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'<');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.lessThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 51:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO <= PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'<=');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.lessOrEqualThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 52:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO > PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'>');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.greaterThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 53:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO >= PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'>=');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.greaterOrLessThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 54:
   ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO = PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'=');");
                                                    this.$ = new Comparison($$[$0-2],$$[$0],RelationalOperators.equal,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 55:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO != PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'!=');");
                                                    this.$ = new Comparison($$[$0-2],$$[$0],RelationalOperators.notEqual,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 56:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO + PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'+');");
                                                this.$ = new Suma($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 57:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO - PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'-');");
                                                this.$ = new Resta($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 58:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO * PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'*');");
                                                this.$ = new Multiplicacion($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 59:
   ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO div PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'/');");
                                                this.$ = new Division($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 60:
   ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO mod PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'%');");
                                                this.$ = new Modulo($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 61:
 this.$ = AxeType.ancestoOrSelfType; 
break;
case 62:
 this.$ = AxeType.ancestorType; 
break;
case 63:
 this.$ = AxeType.attributeType; 
break;
case 64:
 this.$ = AxeType.childType; 
break;
case 65:
 this.$ = AxeType.descendantOrSelfType; 
break;
case 66:
 this.$ = AxeType.descendantType; 
break;
case 67:
 this.$ = AxeType.followingSiblingType; 
break;
case 68:
 this.$ = AxeType.followingType; 
break;
case 69:
 this.$ = AxeType.namespaceType; 
break;
case 70:
 this.$ = AxeType.precedingSiblingType; 
break;
case 71:
 this.$ = AxeType.precedingType; 
break;
case 72:
 this.$ = AxeType.parentType; 
break;
case 73:
 this.$ = AxeType.selfType; 
break;
case 74:
 ReporteGramatical.agregarProduccionXpath("FUNCION_NATIVA -> last()","FUNCION_NATIVA = new FuncionNativa('last');");
                                     this.$ = new NativeFunctionExpresion(NativeFunction.last, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 75:
    ReporteGramatical.agregarProduccionXpath("FUNCION_NATIVA -> position()","FUNCION_NATIVA = new FuncionNativa('position');");
                                            this.$ = new NativeFunctionExpresion(NativeFunction.position, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 76:
 ReporteGramatical.agregarProduccionXpath("FUNCION_NATIVA -> text()","FUNCION_NATIVA = new FuncionNativa('text');");
                                     this.$ = new NativeFunctionExpresion(NativeFunction.text, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 77:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> LISTA-XPATH","PRIMITIVA = new ListaXpath( LISTA-XPATH );");
                         this.$ = new ListaXpathExpresion($$[$0], _$[$0].first_line,_$[$0].first_column); 
break;
case 78:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> AXES_NAME :: XPATH-EXPRESION","PRIMITIVA = new AxeExpresion('"+AxeType[$$[$0-2]]+"', XPATH-EXPRESION );");
                                                     this.$ = AxeFabric.createAxeExpresion($$[$0-2], new XpathExpresion($$[$0], _$[$0].first_line,_$[$0].first_column) ,
                                                                                       _$[$0-1].first_line, _$[$0-1].first_column);
                                                    
break;
case 79:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> FUNCION_NATIVA-XPATH","PRIMITIVA = FUNCION_NATIVA;");
                            this.$ = $$[$0]; 
break;
case 80:
  ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> decimal","PRIMITIVA = new PRIMITIVA(Tipo.Decimal,decimal);");
                            this.$ = new Primitive(Number($$[$0]), new Tipo(TipoDato.numero),_$[$0].first_line, _$[$0].first_column ); 
break;
case 81:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> entero","PRIMITIVA = new PRIMITIVA(Tipo.entero,entero);");
                            this.$ = new Primitive(Number($$[$0]), new Tipo(TipoDato.numero),_$[$0].first_line, _$[$0].first_column ); 
break;
case 82:
  ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> cadena","PRIMITIVA = new PRIMITIVA(Tipo.cadena,cadena);");
                            this.$ = new Primitive($$[$0], new Tipo(TipoDato.cadena),_$[$0].first_line, _$[$0].first_column ); 
break;
case 83:
  ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> @ id","PRIMITIVA = new Atributo(id);");
                                            this.$ = new AtributeIdentifier($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 84:
   ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> @ *","PRIMITIVA = new Atributo(times);");
                                        this.$ = new AtributeTimes(_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 85:
  ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> _$[$0-2]()","PRIMITIVA = new Atributo(nodo);");
                                                    this.$ = new AtributeNode(_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,19:$V4,23:$V5},{1:[3]},{5:[1,12]},o($V6,$V7,{7:13,8:$V8}),{10:[1,15]},{10:[1,16]},{13:[1,17],14:[1,21],15:[1,22],20:[1,18],21:[1,19],22:[1,20]},{13:[1,23],14:[1,27],15:[1,28],20:[1,24],21:[1,25],22:[1,26]},{10:[2,39]},{10:[2,9],18:29,24:$V9},{10:[2,10],18:31,24:$V9},{16:[1,32]},{1:[2,1]},o($V6,[2,2]),{2:$V0,6:33,9:4,11:5,13:$V1,14:$V2,15:$V3,19:$V4,23:$V5},o($Va,[2,5]),o($Va,[2,6]),{10:[2,15],18:34,24:$V9},{13:[1,35]},{10:[2,17],18:36,24:$V9},{10:[2,18],18:37,24:$V9},{10:[2,19],18:38,24:$V9},{16:[1,39]},{10:[2,21],18:40,24:$V9},{13:[1,41]},{10:[2,23],18:42,24:$V9},{10:[2,24],18:43,24:$V9},{10:[2,25],18:44,24:$V9},{16:[1,45]},{10:[2,12]},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:46,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{10:[2,14]},{17:[1,75]},o($V6,$V7,{7:76,8:$V8}),{10:[2,27]},{10:[2,16],18:77,24:$V9},{10:[2,29]},{10:[2,30]},{10:[2,31]},{17:[1,78]},{10:[2,33]},{10:[2,22],18:79,24:$V9},{10:[2,35]},{10:[2,36]},{10:[2,37]},{17:[1,80]},{14:$Vw,26:[1,81],32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI},o($VJ,[2,43]),o($VJ,[2,44]),o($VJ,[2,45]),o($VJ,[2,46]),{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:95,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},o($VJ,[2,77]),{62:[1,96]},o($VJ,[2,79]),o($VJ,[2,80]),o($VJ,[2,81]),o($VJ,[2,82]),{13:[1,97],14:[1,98],15:[1,99]},{62:[2,61]},{62:[2,62]},{62:[2,63]},{62:[2,64]},{62:[2,65]},{62:[2,66]},{62:[2,67]},{62:[2,68]},{62:[2,69]},{62:[2,70]},{62:[2,71]},{62:[2,72]},{62:[2,73]},{16:[1,100]},{16:[1,101]},{16:[1,102]},{10:[2,11],18:103,24:$V9},o($V6,[2,3]),{10:[2,28]},{10:[2,20],18:104,24:$V9},{10:[2,34]},{10:[2,26],18:105,24:$V9},{10:$VK,24:$VL,27:106},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:108,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:109,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:110,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:111,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:112,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:113,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:114,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:115,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:116,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:117,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:118,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:119,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:120,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},{14:$Vw,17:[1,121],32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI},{2:$V0,6:122,9:4,11:5,13:$V1,14:$V2,15:$V3,19:$V4,23:$V5},o($VJ,[2,83]),o($VJ,[2,84]),{16:[1,123]},{17:[1,124]},{17:[1,125]},{17:[1,126]},{10:[2,13]},{10:[2,32]},{10:[2,38]},{10:[2,40]},{2:$V0,4:52,6:3,9:4,11:5,13:$V1,14:$V2,15:$V3,16:$Vb,19:$V4,20:$Vc,23:$V5,25:127,28:47,29:48,30:49,31:50,44:53,45:$Vd,46:$Ve,47:$Vf,48:$Vg,49:$Vh,50:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:54,59:$Vq,60:$Vr,61:$Vs,63:$Vt,64:$Vu,65:$Vv},o($VM,[2,56],{14:$Vw,42:$VH,43:$VI}),o($VM,[2,57],{14:$Vw,42:$VH,43:$VI}),o($VJ,[2,58]),o($VJ,[2,59]),o($VJ,[2,60]),o($VN,[2,50],{14:$Vw,40:$VF,41:$VG,42:$VH,43:$VI}),o($VN,[2,51],{14:$Vw,40:$VF,41:$VG,42:$VH,43:$VI}),o($VN,[2,52],{14:$Vw,40:$VF,41:$VG,42:$VH,43:$VI}),o($VN,[2,53],{14:$Vw,40:$VF,41:$VG,42:$VH,43:$VI}),o($VN,[2,54],{14:$Vw,40:$VF,41:$VG,42:$VH,43:$VI}),o($VN,[2,55],{14:$Vw,40:$VF,41:$VG,42:$VH,43:$VI}),o([17,26,32],[2,48],{14:$Vw,33:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI}),o([17,26,32,33],[2,49],{14:$Vw,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI}),o($VJ,[2,47]),o($VJ,[2,78]),{17:[1,128]},o($VJ,[2,74]),o($VJ,[2,75]),o($VJ,[2,76]),{14:$Vw,26:[1,129],32:$Vx,33:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI},o($VJ,[2,85]),{10:$VK,24:$VL,27:130},{10:[2,41]}],
defaultActions: {8:[2,39],12:[2,1],29:[2,12],31:[2,14],34:[2,27],36:[2,29],37:[2,30],38:[2,31],40:[2,33],42:[2,35],43:[2,36],44:[2,37],59:[2,61],60:[2,62],61:[2,63],62:[2,64],63:[2,65],64:[2,66],65:[2,67],66:[2,68],67:[2,69],68:[2,70],69:[2,71],70:[2,72],71:[2,73],77:[2,28],79:[2,34],103:[2,13],104:[2,32],105:[2,38],106:[2,40],130:[2,41]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const {Print} = require("../Instrucciones/Primitivas/Print");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 15;
break;
case 2:return 59;
break;
case 3:return 60;
break;
case 4:return 61;
break;
case 5:return 45;
break;
case 6:return 46;
break;
case 7:return 47;
break;
case 8:return 48;
break;
case 9:return 49;
break;
case 10:return 50;
break;
case 11:return 51;
break;
case 12:return 52;
break;
case 13:return 53;
break;
case 14:return 54;
break;
case 15:return 56;
break;
case 16:return 55;
break;
case 17:return 57;
break;
case 18:return 62;
break;
case 19:return 23;
break;
case 20:return 19;
break;
case 21:return 22;
break;
case 22:return 21;
break;
case 23:return 20;
break;
case 24:return 40;
break;
case 25:return 41;
break;
case 26:return 14;
break;
case 27:return 42;
break;
case 28:return 43;
break;
case 29:return 35;
break;
case 30:return 37;
break;
case 31:return 34;
break;
case 32:return 36;
break;
case 33:return 39;
break;
case 34:return 38;
break;
case 35:return 33;
break;
case 36:return 32;
break;
case 37:return 16;
break;
case 38:return 17;
break;
case 39:return 24;
break;
case 40:return 26;
break;
case 41:return 8;
break;
case 42:return 63;
break;
case 43:return 64;
break;
case 44:return 13;
break;
case 45:return 65;
break;
case 46:return 65;
break;
case 47:return 65;
break;
case 48:return 65;
break;
case 49:return 65;
break;
case 50:
                                        ListaErrores.AgregarErrorXPATH(new TokenError(TipoError.Lexico,"No se reconocio el token "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
                                    
break;
case 51:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:node\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:text\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:preceding-sibling\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:::)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z][a-zA-Z0-9_ñÑ]*)/i,/^(?:“[^\"\n]*”)/i,/^(?:"[^\"\n]*")/i,/^(?:'[^''\n]*')/i,/^(?:‘[^''\n]*’)/i,/^(?:`[^''\n]*`)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XpathAnalyzerDescendant;
exports.Parser = XpathAnalyzerDescendant.Parser;
exports.parse = function () { return XpathAnalyzerDescendant.parse.apply(XpathAnalyzerDescendant, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}