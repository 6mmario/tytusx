/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var descendente = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[1,24],$Vg=[1,25],$Vh=[1,39],$Vi=[1,19],$Vj=[1,15],$Vk=[1,16],$Vl=[1,17],$Vm=[1,18],$Vn=[1,36],$Vo=[1,40],$Vp=[1,41],$Vq=[1,42],$Vr=[1,43],$Vs=[1,44],$Vt=[1,45],$Vu=[1,46],$Vv=[1,47],$Vw=[1,48],$Vx=[1,52],$Vy=[2,5],$Vz=[1,51],$VA=[2,5,8,38,44,52,54,60,61,62,72,73,74,75,76,77,80,81],$VB=[2,14],$VC=[1,56],$VD=[1,57],$VE=[2,5,8,9,11,38,44,52,54,60,61,62,72,73,74,75,76,77,80,81],$VF=[1,60],$VG=[2,5,8,9,11,38,42,44,52,54,60,61,62,72,73,74,75,76,77,80,81],$VH=[2,64],$VI=[2,63],$VJ=[2,74],$VK=[2,77],$VL=[2,76],$VM=[2,65],$VN=[2,66],$VO=[2,68],$VP=[2,67],$VQ=[2,70],$VR=[2,69],$VS=[2,72],$VT=[2,78],$VU=[1,82],$VV=[1,83],$VW=[1,85],$VX=[1,84],$VY=[1,87],$VZ=[1,86],$V_=[1,88],$V$=[1,92],$V01=[1,81],$V11=[1,80],$V21=[1,89],$V31=[1,91],$V41=[1,90],$V51=[1,104],$V61=[1,103],$V71=[2,44],$V81=[2,57],$V91=[1,117],$Va1=[44,52],$Vb1=[2,86],$Vc1=[1,133],$Vd1=[44,52,54],$Ve1=[2,90],$Vf1=[1,135],$Vg1=[44,52,54,61],$Vh1=[2,93],$Vi1=[1,137],$Vj1=[44,52,54,60,61],$Vk1=[44,52,54,60,61,72,73,74,75,76,77],$Vl1=[2,104],$Vm1=[1,145],$Vn1=[1,146],$Vo1=[44,52,54,60,61,72,73,74,75,76,77,80,81],$Vp1=[2,108],$Vq1=[1,148],$Vr1=[1,149],$Vs1=[38,44,52,54,60,61,62,72,73,74,75,76,77,80,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"RAIZ":3,"QUERIES":4,"EOF":5,"QUERY":6,"QUERIES_PRIMA":7,"|":8,"/":9,"PATH_EXPR":10,"//":11,"STEP_EXPR":12,"PATH_EXPR_PRIMA":13,"POST_FIX_EXPR":14,"AXIS_STEP":15,"REVERSE_STEP":16,"PREDICATE_LIST":17,"FORWARD_STEP":18,"attribute":19,"::":20,"NODE_TEST":21,"child":22,"descendant":23,"descendant-or-self":24,"following":25,"following-sibling":26,"namespace":27,"self":28,"@":29,"ancestor":30,"ancestor-or-self":31,"parent":32,"preceding":33,"preceding-sibling":34,"..":35,"KIND_TEST":36,"EQNAME":37,"*":38,"PRIMARY_EXPR":39,"PREDICATE":40,"PREDICATE_LIST_PRIMA":41,"[":42,"EXPR":43,"]":44,"PARENTHESIZED_EXPR":45,".":46,"cadena":47,"digito":48,"decimal":49,"QUERY_LIST":50,"(":51,")":52,"QUERY_LIST_PRIMA":53,",":54,"text":55,"node":56,"last":57,"position":58,"nodename":59,"and":60,"or":61,"div":62,"mod":63,"EXPR_SINGLE":64,"EXPR_PRIMA":65,"OR_EXPR":66,"AND_EXPR":67,"OR_EXPR_PRIMA":68,"COMPARISON_EXPR":69,"AND_EXPR_PRIMA":70,"ADDITIVE_EXPR":71,"<":72,">":73,"<=":74,">=":75,"=":76,"!=":77,"MULTIPLICATIVE_EXPR":78,"ADDITIVE_EXPR_PRIMA":79,"+":80,"-":81,"UNARY_EXPR":82,"MULTIPLICATIVE_EXPR_PRIMA":83,"ERROR":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"|",9:"/",11:"//",19:"attribute",20:"::",22:"child",23:"descendant",24:"descendant-or-self",25:"following",26:"following-sibling",27:"namespace",28:"self",29:"@",30:"ancestor",31:"ancestor-or-self",32:"parent",33:"preceding",34:"preceding-sibling",35:"..",38:"*",42:"[",44:"]",46:".",47:"cadena",48:"digito",49:"decimal",51:"(",52:")",54:",",55:"text",56:"node",57:"last",58:"position",59:"nodename",60:"and",61:"or",62:"div",63:"mod",72:"<",73:">",74:"<=",75:">=",76:"=",77:"!=",80:"+",81:"-"},
productions_: [0,[3,2],[3,1],[4,2],[7,3],[7,0],[7,1],[6,1],[6,2],[6,2],[6,1],[10,2],[13,3],[13,3],[13,0],[12,1],[12,1],[15,1],[15,2],[15,1],[15,2],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,2],[18,1],[16,3],[16,3],[16,3],[16,3],[16,3],[16,1],[21,1],[21,1],[21,1],[14,1],[14,2],[17,2],[41,2],[41,0],[40,3],[39,1],[39,1],[39,1],[39,1],[39,1],[39,2],[39,3],[45,2],[45,3],[50,2],[53,3],[53,0],[36,3],[36,3],[36,3],[36,3],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[43,2],[65,3],[65,0],[64,1],[66,2],[68,3],[68,0],[67,2],[70,3],[70,0],[69,1],[69,3],[69,3],[69,3],[69,3],[69,3],[69,3],[71,2],[79,3],[79,3],[79,0],[78,2],[83,3],[83,3],[83,0],[82,1],[82,2],[82,2],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                      arbol = new Arbol($$[$0-1].instrucciones);
                      arbol.graficaAST = new NodoGrafico('RAIZ DESC XPATH', [$$[$0-1].graficaAST]);
                      arbol.graficaCST = new NodoGrafico('RAIZ DESC XPATH', [$$[$0-1].graficaCST]);
                      arbol.gramatica = $$[$0-1].gramatica;

                      if (excepciones.length > 0) {
                        arbol.excepciones = arbol.excepciones.concat(excepciones);
                        excepciones = [];
                      }
                      return arbol;
                    
break;
case 2:

                      arbol = new Arbol([]);

                      if (excepciones.length > 0) {
                        arbol.excepciones = arbol.excepciones.concat(excepciones);
                        excepciones = [];
                      }
                      return arbol;
                    
break;
case 3:

                                this.$ = {
                                  instrucciones: [$$[$0-1].instrucciones].concat($$[$0].instrucciones),
                                  graficaAST: new NodoGrafico('QUERIES', [
                                    $$[$0-1].graficaAST,
                                    $$[$0].graficaAST
                                  ]),
                                  graficaCST: new NodoGrafico('QUERIES', [
                                    $$[$0-1].graficaCST,
                                    $$[$0].graficaCST
                                  ]),
                                  gramatica: `<QUERIES> ::= <QUERY> <QUERIES_PRIMA> \n`
                                };
                                this.$.gramatica += $$[$0-1].gramatica;
                                this.$.gramatica += $$[$0].gramatica;
                              
break;
case 4:

                                          this.$ = {
                                            instrucciones: [$$[$0-1].instrucciones].concat($$[$0].instrucciones),
                                            graficaAST: new NodoGrafico('QUERIES_PRIMA', [
                                              new NodoGrafico('|', []),
                                              $$[$0-1].graficaAST,
                                              $$[$0].graficaAST
                                            ]),
                                            graficaCST: new NodoGrafico('|', [
                                              $$[$0-1].graficaCST,
                                              $$[$0].graficaCST
                                            ]),
                                            gramatica: `<QUERIES_PRIMA> ::= "|" <QUERY> <QUERIES_PRIMA> \n`
                                          };
                                          this.$.gramatica += $$[$0-1].gramatica;
                                          this.$.gramatica += $$[$0].gramatica;
                                        
break;
case 5:

                                          this.$ = {
                                            instrucciones: [],
                                            graficaAST: new NodoGrafico('QUERIES_PRIMA', [
                                              new NodoGrafico('ε', [])
                                            ]),
                                            graficaCST: new NodoGrafico('ε', []),
                                            gramatica: `<QUERIES_PRIMA> ::= ε \n`
                                          };
                                        
break;
case 6:

                                          excepciones.push(new Excepcion('Sintáctico', `Se esperaba ${yy.parser.hash.expected} en lugar de ${yytext}`, this._$.first_line, this._$.first_column));
                                          console.log(`Error Sintáctico: ${yytext} Se esperaba ${yy.parser.hash.expected} en la linea ${this._$.first_line} y columna ${this._$.first_column}`);
                                        
break;
case 7:

                                this.$ = {
                                  instrucciones: null,                        //TODO implementar FUNCION
                                  graficaAST: new NodoGrafico('QUERY', [
                                    new NodoGrafico('/', [])
                                  ]),
                                  graficaCST: new NodoGrafico('/', []),
                                  gramatica: `<QUERY> ::= "/" \n`
                                };
                              
break;
case 8:

                                this.$ = {
                                  instrucciones: $$[$0].instrucciones,            //TODO implementar FUNCION
                                  graficaAST: new NodoGrafico('QUERY', [
                                    new NodoGrafico('/', []),
                                    $$[$0].graficaAST
                                  ]),
                                  graficaCST: new NodoGrafico('QUERY', [
                                    new NodoGrafico('/', []),
                                    $$[$0].graficaCST
                                  ]),
                                  gramatica: `<QUERY> ::= "/" <PATH_EXPR> \n`
                                };
                                this.$.gramatica += $$[$0].gramatica;
                              
break;
case 9:

                                this.$ = {
                                  instrucciones: $$[$0].instrucciones,            //TODO implementar FUNCION
                                  graficaAST: new NodoGrafico('QUERY', [
                                    new NodoGrafico('//', []),
                                    $$[$0].graficaAST
                                  ]),
                                  graficaCST: new NodoGrafico('QUERY', [
                                    new NodoGrafico('//', []),
                                    $$[$0].graficaCST
                                  ]),
                                  gramatica: `<QUERY> ::= "//" <PATH_EXPR> \n`
                                };
                                this.$.gramatica += $$[$0].gramatica;
                              
break;
case 10:

                                this.$ = {
                                  instrucciones: $$[$0].instrucciones,            //TODO implementar FUNCION
                                  graficaAST: new NodoGrafico('QUERY', [
                                    $$[$0].graficaAST
                                  ]),
                                  graficaCST: $$[$0].graficaCST,
                                  gramatica: `<QUERY> ::= <PATH_EXPR> \n`
                                };
                                this.$.gramatica += $$[$0].gramatica;
                              
break;
case 11:

                                        this.$ = {
                                          instrucciones: null,                        //TODO implementar FUNCION
                                          graficaAST: new NodoGrafico('PATH_EXPR', [
                                            $$[$0-1].graficaAST,
                                            $$[$0].graficaAST
                                          ]),
                                          graficaCST: new NodoGrafico('PATH_EXPR', [
                                            $$[$0-1].graficaCST,
                                            $$[$0].graficaCST
                                          ]),
                                          gramatica: `<PATH_EXPR> ::= <STEP_EXPR> <PATH_EXPR_PRIMA> \n`
                                        };
                                        this.$.gramatica += $$[$0-1].gramatica;
                                        this.$.gramatica += $$[$0].gramatica;
                                      
break;
case 12:

                                                    this.$ = {
                                                      instrucciones: null,                        //TODO implementar FUNCION
                                                      graficaAST: new NodoGrafico('PATH_EXPR_PRIMA', [
                                                        new NodoGrafico('/', []),
                                                        $$[$0-1].graficaAST,
                                                        $$[$0].graficaAST
                                                      ]),
                                                      graficaCST: new NodoGrafico('/', [
                                                        $$[$0-1].graficaCST,
                                                        $$[$0].graficaCST
                                                      ]),
                                                      gramatica: `<PATH_EXPR_PRIMA> ::= "/" <STEP_EXPR> <PATH_EXPR_PRIMA> \n`
                                                    };
                                                    this.$.gramatica += $$[$0-1].gramatica;
                                                    this.$.gramatica += $$[$0].gramatica;
                                                  
break;
case 13:

                                                    this.$ = {
                                                      instrucciones: null,                        //TODO implementar FUNCION
                                                      graficaAST: new NodoGrafico('PATH_EXPR_PRIMA', [
                                                        new NodoGrafico('//', []),
                                                        $$[$0-1].graficaAST,
                                                        $$[$0].graficaAST
                                                      ]),
                                                      graficaCST: new NodoGrafico('//', [
                                                        $$[$0-1].graficaCST,
                                                        $$[$0].graficaCST
                                                      ]),
                                                      gramatica: `<PATH_EXPR_PRIMA> ::= "//" <STEP_EXPR> <PATH_EXPR_PRIMA> \n`
                                                    };
                                                    this.$.gramatica += $$[$0-1].gramatica;
                                                    this.$.gramatica += $$[$0].gramatica;
                                                  
break;
case 14:

                                                    this.$ = {
                                                      instrucciones: [],
                                                      graficaAST: new NodoGrafico('PATH_EXPR_PRIMA', [
                                                        new NodoGrafico('ε', [])
                                                      ]),
                                                      graficaCST: new NodoGrafico('ε', []),
                                                      gramatica: `<PATH_EXPR_PRIMA> ::= ε \n`
                                                    };
                                                  
break;
case 15:

                              this.$ = {
                                instrucciones: $$[$0].instrucciones,            //TODO implementar FUNCION
                                graficaAST: new NodoGrafico('STEP_EXPR', [
                                  $$[$0].graficaAST
                                ]),
                                graficaCST: $$[$0].graficaCST,
                                gramatica: `<STEP_EXPR> ::= <POST_FIX_EXPR> \n`
                              };
                              this.$.gramatica += $$[$0].gramatica;
                            
break;
case 16:

                              this.$ = {
                                instrucciones: $$[$0].instrucciones,            //TODO implementar FUNCION
                                graficaAST: new NodoGrafico('STEP_EXPR', [
                                  $$[$0].graficaAST
                                ]),
                                graficaCST: $$[$0].graficaCST,
                                gramatica: `<STEP_EXPR> ::= <AXIS_STEP> \n`
                              };
                              this.$.gramatica += $$[$0].gramatica;
                            
break;
case 17:

                                              this.$ = {
                                                instrucciones: null,            //TODO implementar FUNCION
                                                graficaAST: new NodoGrafico('AXIS_STEP', [
                                                  $$[$0].graficaAST
                                                ]),
                                                graficaCST: $$[$0].graficaCST,
                                                gramatica: `<AXIS_STEP> ::= <REVERSE_STEP> \n`
                                              };
                                              this.$.gramatica += $$[$0].gramatica;
                                            
break;
case 18:

                                              this.$ = {
                                                instrucciones: null,                        //TODO implementar FUNCION
                                                graficaAST: new NodoGrafico('AXIS_STEP', [
                                                  $$[$0-1].graficaAST,
                                                  $$[$0].graficaAST,
                                                ]),
                                                graficaCST: new NodoGrafico('AXIS_STEP', [
                                                  $$[$0-1].graficaCST,
                                                  $$[$0].graficaCST,
                                                ]),
                                                gramatica: `<AXIS_STEP> ::= <REVERSE_STEP> <PREDICATE_LIST> \n`
                                              };
                                              this.$.gramatica += $$[$0-1].gramatica;
                                              this.$.gramatica += $$[$0].gramatica;
                                            
break;
case 19:

                                              this.$ = {
                                                instrucciones: null,            //TODO implementar FUNCION
                                                graficaAST: new NodoGrafico('AXIS_STEP', [
                                                  $$[$0].graficaAST
                                                ]),
                                                graficaCST: $$[$0].graficaCST,
                                                gramatica: `<AXIS_STEP> ::= <FORWARD_STEP> \n`
                                              };
                                              this.$.gramatica += $$[$0].gramatica;
                                            
break;
case 20:

                                              this.$ = {
                                                instrucciones: null,                        //TODO implementar FUNCION
                                                graficaAST: new NodoGrafico('AXIS_STEP', [
                                                  $$[$0-1].graficaAST,
                                                  $$[$0].graficaAST,
                                                ]),
                                                graficaCST: new NodoGrafico('AXIS_STEP', [
                                                  $$[$0-1].graficaCST,
                                                  $$[$0].graficaCST,
                                                ]),
                                                gramatica: `<AXIS_STEP> ::= <FORWARD_STEP> <PREDICATE_LIST> \n`
                                              };
                                              this.$.gramatica += $$[$0-1].gramatica;
                                              this.$.gramatica += $$[$0].gramatica;
                                            
break;
case 21:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('attribute', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('attribute', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "attribute" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 22:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('child', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('child', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "child" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 23:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('descendant', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('descendant', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "descendant" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 24:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('descendant-or-self', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('descendant-or-self', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "descendant-or-self" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 25:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('following', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('following', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "following" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 26:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('following-sibling', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('following-sibling', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "following-sibling" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 27:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('namespace', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('namespace', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "namespace" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 28:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('self', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('self', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "self" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 29:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('@', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('@', [
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "@" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 30:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: $$[$0].graficaCST,
                                                          gramatica: `<FORWARD_STEP> ::= <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 31:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('REVERSE_STEP', [
                                                            new NodoGrafico('ancestor', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('ancestor', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<REVERSE_STEP> ::= "ancestor" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 32:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('REVERSE_STEP', [
                                                            new NodoGrafico('ancestor-or-self', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('ancestor-or-self', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<REVERSE_STEP> ::= "ancestor-or-self" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 33:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('REVERSE_STEP', [
                                                            new NodoGrafico('parent', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('parent', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<REVERSE_STEP> ::= "parent" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 34:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('REVERSE_STEP', [
                                                            new NodoGrafico('preceding', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('preceding', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<REVERSE_STEP> ::= "preceding" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 35:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('REVERSE_STEP', [
                                                            new NodoGrafico('preceding-sibling', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('preceding-sibling', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<REVERSE_STEP> ::= "preceding-sibling" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 36:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('REVERSE_STEP', [
                                                            new NodoGrafico('..', [])
                                                          ]),
                                                          graficaCST: new NodoGrafico('..', []),
                                                          gramatica: `<REVERSE_STEP> ::= ".." \n`
                                                        };
                                                      
break;
case 37:

                          this.$ = {
                            instrucciones: null,                        //TODO implementar FUNCION
                            graficaAST: new NodoGrafico('NODE_TEST', [
                              $$[$0].graficaAST
                            ]),
                            graficaCST: $$[$0].graficaCST,
                            gramatica: `<NODE_TEST> ::= <KIND_TEST> \n`
                          };
                          this.$.gramatica += $$[$0].gramatica;
                        
break;
case 38:

                          this.$ = {
                            instrucciones: null,                        //TODO implementar FUNCION
                            graficaAST: new NodoGrafico('NODE_TEST', [
                              $$[$0].graficaAST
                            ]),
                            graficaCST: $$[$0].graficaCST,
                            gramatica: `<NODE_TEST> ::= <EQNAME> \n`
                          };
                          this.$.gramatica += $$[$0].gramatica;
                        
break;
case 39:

                          this.$ = {
                            instrucciones: null,                        //TODO implementar FUNCION
                            graficaAST: new NodoGrafico('NODE_TEST', [
                              new NodoGrafico('*', [])
                            ]),
                            graficaCST: new NodoGrafico('*', []),
                            gramatica: `<NODE_TEST> ::= '*' \n`
                          };
                        
break;
case 40:

                                                this.$ = {
                                                  instrucciones: null,                        //TODO implementar FUNCION
                                                  graficaAST: new NodoGrafico('POST_FIX_EXPR', [
                                                    $$[$0].graficaAST
                                                  ]),
                                                  graficaCST: $$[$0].graficaCST,                           //TODO implementar CST
                                                  gramatica: `<POST_FIX_EXPR> ::= <PRIMARY_EXPR> \n`
                                                };
                                                this.$.gramatica += $$[$0].gramatica;
                                              
break;
case 41:

                                                this.$ = {
                                                  instrucciones: null,                        //TODO implementar FUNCION
                                                  graficaAST: new NodoGrafico('POST_FIX_EXPR', [
                                                    $$[$0-1].graficaAST,
                                                    $$[$0].graficaAST,
                                                  ]),
                                                  graficaCST: new NodoGrafico('POST_FIX_EXPR', [
                                                    $$[$0-1].graficaCST,
                                                    $$[$0].graficaCST,
                                                  ]),
                                                  gramatica: `<POST_FIX_EXPR> ::= <PRIMARY_EXPR> <PREDICATE_LIST> \n`
                                                };
                                                this.$.gramatica += $$[$0-1].gramatica;
                                                this.$.gramatica += $$[$0].gramatica;
                                              
break;
case 42:

                                                  this.$ = {
                                                    instrucciones: null,                        //TODO implementar FUNCION
                                                    graficaAST: new NodoGrafico('PREDICATE_LIST', [
                                                      $$[$0-1].graficaAST,
                                                      $$[$0].graficaAST
                                                    ]),
                                                    graficaCST: new NodoGrafico('PREDICATE_LIST', [
                                                      $$[$0-1].graficaCST,
                                                      $$[$0].graficaCST
                                                    ]),
                                                    gramatica: `<PREDICATE_LIST> ::= <PREDICATE> <PREDICATE_LIST_PRIMA> \n`
                                                  };
                                                  this.$.gramatica += $$[$0-1].gramatica;
                                                  this.$.gramatica += $$[$0].gramatica;
                                                
break;
case 43:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('PREDICATE_LIST_PRIMA', [
                                                            $$[$0-1].graficaAST,
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('PREDICATE_LIST_PRIMA', [
                                                            $$[$0-1].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<PREDICATE_LIST_PRIMA> ::= <PREDICATE> <PREDICATE_LIST_PRIMA> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-1].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 44:

                                                        this.$ = {
                                                          instrucciones: [],
                                                          graficaAST: new NodoGrafico('PREDICATE_LIST_PRIMA', [
                                                            new NodoGrafico('ε', [])
                                                          ]),
                                                          graficaCST: new NodoGrafico('ε', []),
                                                          gramatica: `<PREDICATE_LIST_PRIMA> ::= ε \n`
                                                        };
                                                      
break;
case 45:

                              this.$ = {
                                instrucciones: null,                        //TODO implementar FUNCION
                                graficaAST: new NodoGrafico('PREDICATE', [
                                  new NodoGrafico('[', []),
                                  $$[$0-1].graficaAST,
                                  new NodoGrafico(']', [])
                                ]),
                                graficaCST: new NodoGrafico('[EXPR]', [
                                  $$[$0-1].graficaCST
                                ]),
                                gramatica: `<PREDICATE> ::= "[" <EXPR> "]" \n`
                              };
                              this.$.gramatica += $$[$0-1].gramatica;
                            
break;
case 46:

                                      this.$ = {
                                        instrucciones: null,                        //TODO implementar FUNCION
                                        graficaAST: new NodoGrafico('PRIMARY_EXPR', [
                                          $$[$0].graficaAST
                                        ]),
                                        graficaCST: $$[$0].graficaCST,
                                        gramatica: `<PRIMARY_EXPR> ::= <PARENTHESIZED_EXPR> \n`
                                      };
                                      this.$.gramatica += $$[$0].gramatica;
                                    
break;
case 47:

                                      this.$ = {
                                        instrucciones: null,                        //TODO implementar FUNCION
                                        graficaAST: new NodoGrafico('PRIMARY_EXPR', [
                                          new NodoGrafico('.', [])
                                        ]),
                                        graficaCST: new NodoGrafico('.', []),
                                        gramatica: `<PRIMARY_EXPR> ::= "." \n`
                                      };
                                    
break;
case 48: case 49: case 50:

                                      this.$ = {
                                        instrucciones: null,                        //TODO implementar FUNCION
                                        graficaAST: new NodoGrafico('PRIMARY_EXPR', [
                                          new NodoGrafico($$[$0], [])
                                        ]),
                                        graficaCST: new NodoGrafico($$[$0], []),
                                        gramatica: `<PRIMARY_EXPR> ::= "${$$[$0]}" \n`
                                      };
                                    
break;
case 51:

                                      this.$ = {
                                        instrucciones: null,                        //TODO implementar FUNCION
                                        graficaAST: new NodoGrafico('PRIMARY_EXPR', [
                                          new NodoGrafico('[', []),
                                          new NodoGrafico(']', [])
                                        ]),
                                        graficaCST: new NodoGrafico('[]', []),
                                        gramatica: `<PRIMARY_EXPR> ::= "[" "]" \n`
                                      };
                                    
break;
case 52:

                                      this.$ = {
                                        instrucciones: null,                        //TODO implementar FUNCION
                                        graficaAST: new NodoGrafico('PRIMARY_EXPR', [
                                          new NodoGrafico('[', []),
                                          $$[$0-1].graficaAST,
                                          new NodoGrafico(']', [])
                                        ]),
                                        graficaCST: new NodoGrafico('[QUERY_LIST]', [
                                          $$[$0-1].graficaCST,
                                        ]),
                                        gramatica: `<PRIMARY_EXPR> ::= "[" <QUERY_LIST> "]" \n`
                                      };
                                      this.$.gramatica += $$[$0-1].gramatica;
                                    
break;
case 53:

                                      this.$ = {
                                        instrucciones: null,                        //TODO implementar FUNCION
                                        graficaAST: new NodoGrafico('PARENTHESIZED_EXPR', [
                                          new NodoGrafico('(', []),
                                          new NodoGrafico(')', [])
                                        ]),
                                        graficaCST: new NodoGrafico('()', []),
                                        gramatica: `<PARENTHESIZED_EXPR> ::= "(" ")" \n`
                                      };
                                    
break;
case 54:

                                      this.$ = {
                                        instrucciones: null,                        //TODO implementar FUNCION
                                        graficaAST: new NodoGrafico('PARENTHESIZED_EXPR', [
                                          new NodoGrafico('(', []),
                                          $$[$0-1].graficaAST,
                                          new NodoGrafico(')', [])
                                        ]),
                                        graficaCST: new NodoGrafico('(EXPR)', [
                                          $$[$0-1].graficaCST,
                                        ]),
                                        gramatica: `<PARENTHESIZED_EXPR> ::= "(" <EXPR> ")" \n`
                                      };
                                      this.$.gramatica += $$[$0-1].gramatica;
                                    
break;
case 55:

                                      this.$ = {
                                        instrucciones: null,                        //TODO implementar FUNCION
                                        graficaAST: new NodoGrafico('QUERY_LIST', [
                                          $$[$0-1].graficaAST,
                                          $$[$0].graficaAST
                                        ]),
                                        graficaCST: new NodoGrafico('QUERY_LIST', [
                                          $$[$0-1].graficaCST,
                                          $$[$0].graficaCST
                                        ]),
                                        gramatica: `<QUERY_LIST> ::= <QUERY> <QUERY_LIST_PRIMA> \n`
                                      };
                                      this.$.gramatica += $$[$0-1].gramatica;
                                      this.$.gramatica += $$[$0].gramatica;
                                    
break;
case 56:

                                                this.$ = {
                                                  instrucciones: [$$[$0-1].instrucciones].concat($$[$0].instrucciones),
                                                  graficaAST: new NodoGrafico('QUERY_LIST_PRIMA', [
                                                    new NodoGrafico(',', []),
                                                    $$[$0-1].graficaAST,
                                                    $$[$0].graficaAST
                                                  ]),
                                                  graficaCST: new NodoGrafico(',', [
                                                    $$[$0-1].graficaCST,
                                                    $$[$0].graficaCST
                                                  ]),
                                                  gramatica: `<QUERY_LIST_PRIMA> ::= "," <QUERY> <QUERY_LIST_PRIMA> \n`
                                                };
                                                this.$.gramatica += $$[$0-1].gramatica;
                                                this.$.gramatica += $$[$0].gramatica;
                                              
break;
case 57:

                                                this.$ = {
                                                  instrucciones: [],
                                                  graficaAST: new NodoGrafico('QUERY_LIST_PRIMA', [
                                                    new NodoGrafico('ε', [])
                                                  ]),
                                                  graficaCST: new NodoGrafico('ε', []),
                                                  gramatica: `<QUERY_LIST_PRIMA> ::= ε \n`
                                                };
                                              
break;
case 58:

                              this.$ = {
                                instrucciones: null,                        //TODO implementar FUNCION
                                graficaAST: new NodoGrafico('KIND_TEST', [
                                  new NodoGrafico('text', []),
                                  new NodoGrafico('(', []),
                                  new NodoGrafico(')', [])
                                ]),
                                graficaCST: new NodoGrafico('text()', []),
                                gramatica: `<KIND_TEST> ::= "text" "(" ")" \n`
                              };
                            
break;
case 59:

                              this.$ = {
                                instrucciones: null,                        //TODO implementar FUNCION
                                graficaAST: new NodoGrafico('KIND_TEST', [
                                  new NodoGrafico('node', []),
                                  new NodoGrafico('(', []),
                                  new NodoGrafico(')', [])
                                ]),
                                graficaCST: new NodoGrafico('node()', []),                         //TODO implementar CST
                                gramatica: `<KIND_TEST> ::= "node" "(" ")" \n`
                              };
                            
break;
case 60:

                              this.$ = {
                                instrucciones: null,                        //TODO implementar FUNCION
                                graficaAST: new NodoGrafico('KIND_TEST', [
                                  new NodoGrafico('last', []),
                                  new NodoGrafico('(', []),
                                  new NodoGrafico(')', [])
                                ]),
                                graficaCST: new NodoGrafico('last()', []),                         //TODO implementar CST
                                gramatica: `<KIND_TEST> ::= "last" "(" ")" \n`
                              };
                            
break;
case 61:

                              this.$ = {
                                instrucciones: null,                        //TODO implementar FUNCION
                                graficaAST: new NodoGrafico('KIND_TEST', [
                                  new NodoGrafico('position', []),
                                  new NodoGrafico('(', []),
                                  new NodoGrafico(')', [])
                                ]),
                                graficaCST: new NodoGrafico('position()', []),                         //TODO implementar CST
                                gramatica: `<KIND_TEST> ::= "position" "(" ")" \n`
                              };
                            
break;
case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83:

                                    this.$ = {
                                      instrucciones: null,                        //TODO implementar FUNCION
                                      graficaAST: new NodoGrafico('EQNAME', [
                                        new NodoGrafico($$[$0], [])
                                      ]),
                                      graficaCST: new NodoGrafico($$[$0], []),
                                      gramatica: `<EQNAME> ::= "${$$[$0]}" \n`
                                    };
                                  
break;
case 84:

                                  this.$ = {
                                    instrucciones: null,                        //TODO implementar FUNCION
                                    graficaAST: new NodoGrafico('EXPR', [
                                      $$[$0-1].graficaAST,
                                      $$[$0].graficaAST
                                    ]),
                                    graficaCST: new NodoGrafico('EXPR', [
                                      $$[$0-1].graficaCST,
                                      $$[$0].graficaCST
                                    ]),
                                    gramatica: `<EXPR> ::= <EXPR_SINGLE> <EXPR_PRIMA> \n`
                                  };
                                  this.$.gramatica += $$[$0-1].gramatica;
                                  this.$.gramatica += $$[$0].gramatica;
                                
break;
case 85:

                                          this.$ = {
                                            instrucciones: [$$[$0-1].instrucciones].concat($$[$0].instrucciones),
                                            graficaAST: new NodoGrafico('EXPR_PRIMA', [
                                              new NodoGrafico(',', []),
                                              $$[$0-1].graficaAST,
                                              $$[$0].graficaAST
                                            ]),
                                            graficaCST: new NodoGrafico(',', [
                                              $$[$0-1].graficaCST,
                                              $$[$0].graficaCST
                                            ]),
                                            gramatica: `<EXPR_PRIMA> ::= "," <EXPR_SINGLE> <EXPR_PRIMA> \n`
                                          };
                                          this.$.gramatica += $$[$0-1].gramatica;
                                          this.$.gramatica += $$[$0].gramatica;
                                        
break;
case 86:

                                          this.$ = {
                                            instrucciones: [],
                                            graficaAST: new NodoGrafico('EXPR_PRIMA', [
                                              new NodoGrafico('ε', [])
                                            ]),
                                            graficaCST: new NodoGrafico('ε', []),
                                            gramatica: `<EXPR_PRIMA> ::= ε \n`
                                          };
                                        
break;
case 87:

                        this.$ = {
                          instrucciones: null,                        //TODO implementar FUNCION
                          graficaAST: new NodoGrafico('EXPR_SINGLE', [
                            $$[$0].graficaAST
                          ]),
                          graficaCST: $$[$0].graficaCST,
                          gramatica: `<EXPR_SINGLE> ::= <OR_EXPR> \n`
                        };
                        this.$.gramatica += $$[$0].gramatica;
                      
break;
case 88:

                                    this.$ = {
                                      instrucciones: null,                        //TODO implementar FUNCION
                                      graficaAST: new NodoGrafico('OR_EXPR', [
                                        $$[$0-1].graficaAST,
                                        $$[$0].graficaAST
                                      ]),
                                      graficaCST: new NodoGrafico('OR_EXPR', [
                                        $$[$0-1].graficaCST,
                                        $$[$0].graficaCST
                                      ]),
                                      gramatica: `<OR_EXPR> ::= <AND_EXPR> <OR_EXPR_PRIMA> \n`
                                    };
                                    this.$.gramatica += $$[$0-1].gramatica;
                                    this.$.gramatica += $$[$0].gramatica;
                                  
break;
case 89:

                                                this.$ = {
                                                  instrucciones: [$$[$0-1].instrucciones].concat($$[$0].instrucciones),
                                                  graficaAST: new NodoGrafico('OR_EXPR_PRIMA', [
                                                    new NodoGrafico('or', []),
                                                    $$[$0-1].graficaAST,
                                                    $$[$0].graficaAST
                                                  ]),
                                                  graficaCST: new NodoGrafico('or', [
                                                    $$[$0-1].graficaCST,
                                                    $$[$0].graficaCST
                                                  ]),
                                                  gramatica: `<OR_EXPR_PRIMA> ::= "or" <AND_EXPR> <OR_EXPR_PRIMA> \n`
                                                };
                                                this.$.gramatica += $$[$0-1].gramatica;
                                                this.$.gramatica += $$[$0].gramatica;
                                              
break;
case 90:

                                                this.$ = {
                                                  instrucciones: [],
                                                  graficaAST: new NodoGrafico('OR_EXPR_PRIMA', [
                                                    new NodoGrafico('ε', [])
                                                  ]),
                                                  graficaCST: new NodoGrafico('ε', []),
                                                  gramatica: `<OR_EXPR_PRIMA> ::= ε \n`
                                                };
                                              
break;
case 91:

                                              this.$ = {
                                                instrucciones: null,                        //TODO implementar FUNCION
                                                graficaAST: new NodoGrafico('AND_EXPR', [
                                                  $$[$0-1].graficaAST,
                                                  $$[$0].graficaAST
                                                ]),
                                                graficaCST: new NodoGrafico('AND_EXPR', [
                                                  $$[$0-1].graficaCST,
                                                  $$[$0].graficaCST
                                                ]),
                                                gramatica: `<AND_EXPR> ::= <COMPARISON_EXPR> <AND_EXPR_PRIMA> \n`
                                              };
                                              this.$.gramatica += $$[$0-1].gramatica;
                                              this.$.gramatica += $$[$0].gramatica;
                                            
break;
case 92:

                                                          this.$ = {
                                                            instrucciones: [$$[$0-1].instrucciones].concat($$[$0].instrucciones),
                                                            graficaAST: new NodoGrafico('AND_EXPR_PRIMA', [
                                                              new NodoGrafico('and', []),
                                                              $$[$0-1].graficaAST,
                                                              $$[$0].graficaAST
                                                            ]),
                                                            graficaCST: new NodoGrafico('and', [
                                                              $$[$0-1].graficaCST,
                                                              $$[$0].graficaCST
                                                            ]),
                                                            gramatica: `<AND_EXPR_PRIMA> ::= "and" <COMPARISON_EXPR> <AND_EXPR_PRIMA> \n`
                                                          };
                                                          this.$.gramatica += $$[$0-1].gramatica;
                                                          this.$.gramatica += $$[$0].gramatica;
                                                        
break;
case 93:

                                                          this.$ = {
                                                            instrucciones: [],
                                                            graficaAST: new NodoGrafico('AND_EXPR_PRIMA', [
                                                              new NodoGrafico('ε', [])
                                                            ]),
                                                            graficaCST: new NodoGrafico('ε', []),
                                                            gramatica: `<AND_EXPR_PRIMA> ::= ε \n`
                                                          };
                                                        
break;
case 94:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: $$[$0].graficaCST,
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 95:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0-2].graficaAST,
                                                            new NodoGrafico('<', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('<', [
                                                            $$[$0-2].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> "<" <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-2].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 96:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0-2].graficaAST,
                                                            new NodoGrafico('>', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('>', [
                                                            $$[$0-2].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> ">" <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-2].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 97:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0-2].graficaAST,
                                                            new NodoGrafico('<=', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('<=', [
                                                            $$[$0-2].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> "<=" <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-2].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 98:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0-2].graficaAST,
                                                            new NodoGrafico('>=', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('>=', [
                                                            $$[$0-2].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> ">=" <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-2].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 99:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0-2].graficaAST,
                                                            new NodoGrafico('=', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('=', [
                                                            $$[$0-2].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> "=" <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-2].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 100:

                                                        this.$ = {
                                                          instrucciones: null,                        //TODO implementar FUNCION
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0-2].graficaAST,
                                                            new NodoGrafico('!=', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('!=', [
                                                            $$[$0-2].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> "!=" <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-2].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 101:

                                                            this.$ = {
                                                              instrucciones: null,                        //TODO implementar FUNCION
                                                              graficaAST: new NodoGrafico('ADDITIVE_EXPR', [
                                                                $$[$0-1].graficaAST,
                                                                $$[$0].graficaAST
                                                              ]),
                                                              graficaCST: new NodoGrafico('ADDITIVE_EXPR', [
                                                                $$[$0-1].graficaCST,
                                                                $$[$0].graficaCST
                                                              ]),
                                                              gramatica: `<ADDITIVE_EXPR> ::= <MULTIPLICATIVE_EXPR> <ADDITIVE_EXPR_PRIMA> \n`
                                                            };
                                                            this.$.gramatica += $$[$0-1].gramatica;
                                                            this.$.gramatica += $$[$0].gramatica;
                                                          
break;
case 102:

                                                                      this.$ = {
                                                                        instrucciones: [$$[$0-1].instrucciones].concat($$[$0].instrucciones),
                                                                        graficaAST: new NodoGrafico('ADDITIVE_EXPR_PRIMA', [
                                                                          new NodoGrafico('+', []),
                                                                          $$[$0-1].graficaAST,
                                                                          $$[$0].graficaAST
                                                                        ]),
                                                                        graficaCST: new NodoGrafico('+', [
                                                                          $$[$0-1].graficaCST,
                                                                          $$[$0].graficaCST
                                                                        ]),
                                                                        gramatica: `<ADDITIVE_EXPR_PRIMA> ::= "+" <MULTIPLICATIVE_EXPR> <ADDITIVE_EXPR_PRIMA> \n`
                                                                      };
                                                                      this.$.gramatica += $$[$0-1].gramatica;
                                                                      this.$.gramatica += $$[$0].gramatica;
                                                                    
break;
case 103:

                                                                      this.$ = {
                                                                        instrucciones: [$$[$0-1].instrucciones].concat($$[$0].instrucciones),
                                                                        graficaAST: new NodoGrafico('ADDITIVE_EXPR_PRIMA', [
                                                                          new NodoGrafico('-', []),
                                                                          $$[$0-1].graficaAST,
                                                                          $$[$0].graficaAST
                                                                        ]),
                                                                        graficaCST: new NodoGrafico('-', [
                                                                          $$[$0-1].graficaCST,
                                                                          $$[$0].graficaCST
                                                                        ]),
                                                                        gramatica: `<ADDITIVE_EXPR_PRIMA> ::= "-" <MULTIPLICATIVE_EXPR> <ADDITIVE_EXPR_PRIMA> \n`
                                                                      };
                                                                      this.$.gramatica += $$[$0-1].gramatica;
                                                                      this.$.gramatica += $$[$0].gramatica;
                                                                    
break;
case 104:

                                                                      this.$ = {
                                                                        instrucciones: [],
                                                                        graficaAST: new NodoGrafico('ADDITIVE_EXPR_PRIMA', [
                                                                          new NodoGrafico('ε', [])
                                                                        ]),
                                                                        graficaCST: new NodoGrafico('ε', []),
                                                                        gramatica: `<ADDITIVE_EXPR_PRIMA> ::= ε \n`
                                                                      };
                                                                    
break;
case 105:

                                                                this.$ = {
                                                                  instrucciones: null,                        //TODO implementar FUNCION
                                                                  graficaAST: new NodoGrafico('MULTIPLICATIVE_EXPR', [
                                                                    $$[$0-1].graficaAST,
                                                                    $$[$0].graficaAST
                                                                  ]),
                                                                  graficaCST: new NodoGrafico('MULTIPLICATIVE_EXPR', [
                                                                    $$[$0-1].graficaCST,
                                                                    $$[$0].graficaCST
                                                                  ]),
                                                                  gramatica: `<MULTIPLICATIVE_EXPR> ::= <UNARY_EXPR> <MULTIPLICATIVE_EXPR> \n`
                                                                };
                                                                this.$.gramatica += $$[$0-1].gramatica;
                                                                this.$.gramatica += $$[$0].gramatica;
                                                              
break;
case 106:

                                                                          this.$ = {
                                                                            instrucciones: [$$[$0-1].instrucciones].concat($$[$0].instrucciones),
                                                                            graficaAST: new NodoGrafico('MULTIPLICATIVE_EXPR_PRIMA', [
                                                                              new NodoGrafico('*', []),
                                                                              $$[$0-1].graficaAST,
                                                                              $$[$0].graficaAST
                                                                            ]),
                                                                            graficaCST: new NodoGrafico('*', [
                                                                              $$[$0-1].graficaCST,
                                                                              $$[$0].graficaCST
                                                                            ]),
                                                                            gramatica: `<MULTIPLICATIVE_EXPR_PRIMA> ::= "*" <UNARY_EXPR> <MULTIPLICATIVE_EXPR_PRIMA> \n`
                                                                          };
                                                                          this.$.gramatica += $$[$0-1].gramatica;
                                                                          this.$.gramatica += $$[$0].gramatica;
                                                                        
break;
case 107:

                                                                          this.$ = {
                                                                            instrucciones: [$$[$0-1].instrucciones].concat($$[$0].instrucciones),
                                                                            graficaAST: new NodoGrafico('MULTIPLICATIVE_EXPR_PRIMA', [
                                                                              new NodoGrafico('div', []),
                                                                              $$[$0-1].graficaAST,
                                                                              $$[$0].graficaAST
                                                                            ]),
                                                                            graficaCST: new NodoGrafico('div', [
                                                                              $$[$0-1].graficaCST,
                                                                              $$[$0].graficaCST
                                                                            ]),
                                                                            gramatica: `<MULTIPLICATIVE_EXPR_PRIMA> ::= "div" <UNARY_EXPR> <MULTIPLICATIVE_EXPR_PRIMA> \n`
                                                                          };
                                                                          this.$.gramatica += $$[$0-1].gramatica;
                                                                          this.$.gramatica += $$[$0].gramatica;
                                                                        
break;
case 108:

                                                                          this.$ = {
                                                                            instrucciones: [],
                                                                            graficaAST: new NodoGrafico('MULTIPLICATIVE_EXPR_PRIMA', [
                                                                              new NodoGrafico('ε', [])
                                                                            ]),
                                                                            graficaCST: new NodoGrafico('ε', []),
                                                                            gramatica: `<MULTIPLICATIVE_EXPR_PRIMA> ::= ε \n`
                                                                          };
                                                                        
break;
case 109:

                                                this.$ = {
                                                  instrucciones: null,                        //TODO implementar FUNCION
                                                  graficaAST: new NodoGrafico('UNARY_EXPR', [
                                                    $$[$0].graficaAST
                                                  ]),
                                                  graficaCST: $$[$0].graficaCST,
                                                  gramatica: `<UNARY_EXPR> ::= <QUERY> \n`
                                                };
                                                this.$.gramatica += $$[$0].gramatica;
                                              
break;
case 110:

                                                this.$ = {
                                                  instrucciones: null,                        //TODO implementar FUNCION
                                                  graficaAST: new NodoGrafico('UNARY_EXPR', [
                                                    new NodoGrafico('-', []),
                                                    $$[$0].graficaAST
                                                  ]),
                                                  graficaCST: new NodoGrafico('-', [
                                                    $$[$0].graficaCST
                                                  ]),
                                                  gramatica: `<UNARY_EXPR> ::= "-" <UNARY_EXPR> \n`
                                                };
                                                this.$.gramatica += $$[$0].gramatica;
                                              
break;
case 111:

                                                this.$ = {
                                                  instrucciones: null,                        //TODO implementar FUNCION
                                                  graficaAST: new NodoGrafico('UNARY_EXPR', [
                                                    new NodoGrafico('+', []),
                                                    $$[$0].graficaAST
                                                  ]),
                                                  graficaCST: new NodoGrafico('+', [
                                                    $$[$0].graficaCST
                                                  ]),
                                                  gramatica: `<UNARY_EXPR> ::= "+" <UNARY_EXPR> \n`
                                                };
                                                this.$.gramatica += $$[$0].gramatica;
                                              
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{1:[3]},{5:[1,49]},{1:[2,2]},{2:$Vx,5:$Vy,7:50,8:$Vz},o([2,5,8,44,52,54,72,73,74,75,76,77,80,81],[2,7],{12:8,14:9,15:10,39:11,16:12,18:13,45:14,21:35,36:37,37:38,10:53,19:$V2,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,38:$Vh,42:$Vi,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw}),{10:54,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},o($VA,[2,10]),o($VA,$VB,{13:55,9:$VC,11:$VD}),o($VE,[2,15]),o($VE,[2,16]),o($VE,[2,40],{17:58,40:59,42:$VF}),o($VE,[2,17],{40:59,17:61,42:$VF}),o($VE,[2,19],{40:59,17:62,42:$VF}),o($VG,[2,46]),o($VG,[2,47]),o($VG,[2,48]),o($VG,[2,49]),o($VG,[2,50]),{6:65,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,44:[1,63],45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,50:64,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},o($VG,$VH,{20:[1,66]}),o($VG,$VI,{20:[1,67]}),o($VG,$VJ,{20:[1,68]}),o($VG,$VK,{20:[1,69]}),o($VG,$VL,{20:[1,70]}),o($VG,[2,36]),o($VG,$VM,{20:[1,71]}),o($VG,$VN,{20:[1,72]}),o($VG,$VO,{20:[1,73]}),o($VG,$VP,{20:[1,74]}),o($VG,$VQ,{20:[1,75]}),o($VG,$VR,{20:[1,76]}),o($VG,$VS,{20:[1,77]}),o($VG,$VT,{20:[1,78]}),{19:$VU,21:79,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},o($VG,[2,30]),{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,43:94,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,52:[1,93],55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:95,66:96,67:97,69:98,71:99,78:100,80:$V51,81:$V61,82:101},o($VG,[2,37]),o($VG,[2,38]),o($VG,[2,39]),o($VG,[2,79],{51:[1,105]}),o($VG,[2,73],{51:[1,106]}),o($VG,[2,71],{51:[1,107]}),o($VG,[2,75],{51:[1,108]}),o($VG,[2,62]),o($VG,[2,80]),o($VG,[2,81]),o($VG,[2,82]),o($VG,[2,83]),{1:[2,1]},{5:[2,3]},{6:109,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{5:[2,6]},o($VA,[2,8]),o($VA,[2,9]),o($VA,[2,11]),{12:110,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{12:111,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},o($VE,[2,41]),o($VE,$V71,{41:112,40:113,42:$VF}),{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,43:114,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:95,66:96,67:97,69:98,71:99,78:100,80:$V51,81:$V61,82:101},o($VE,[2,18]),o($VE,[2,20]),o($VG,[2,51]),{44:[1,115]},{44:$V81,53:116,54:$V91},{19:$VU,21:118,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:$VU,21:119,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:$VU,21:120,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:$VU,21:121,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:$VU,21:122,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:$VU,21:123,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:$VU,21:124,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:$VU,21:125,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:$VU,21:126,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:$VU,21:127,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:$VU,21:128,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:$VU,21:129,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},{19:$VU,21:130,22:$VV,23:$VW,24:$VX,25:$VY,26:$VZ,27:$V_,28:$V$,30:$V01,31:$V11,32:$V21,33:$V31,34:$V41,36:37,37:38,38:$Vh,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},o($VG,[2,29]),o($VG,$VI),o($VG,$VH),o($VG,$VM),o($VG,$VN),o($VG,$VP),o($VG,$VO),o($VG,$VR),o($VG,$VQ),o($VG,$VS),o($VG,$VJ),o($VG,$VL),o($VG,$VK),o($VG,$VT),o($VG,[2,53]),{52:[1,131]},o($Va1,$Vb1,{65:132,54:$Vc1}),o($Vd1,[2,87]),o($Vd1,$Ve1,{68:134,61:$Vf1}),o($Vg1,$Vh1,{70:136,60:$Vi1}),o($Vj1,[2,94],{72:[1,138],73:[1,139],74:[1,140],75:[1,141],76:[1,142],77:[1,143]}),o($Vk1,$Vl1,{79:144,80:$Vm1,81:$Vn1}),o($Vo1,$Vp1,{83:147,38:$Vq1,62:$Vr1}),o($Vs1,[2,109]),{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,80:$V51,81:$V61,82:150},{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,80:$V51,81:$V61,82:151},{52:[1,152]},{52:[1,153]},{52:[1,154]},{52:[1,155]},{2:$Vx,5:$Vy,7:156,8:$Vz},o($VA,$VB,{13:157,9:$VC,11:$VD}),o($VA,$VB,{13:158,9:$VC,11:$VD}),o($VE,[2,42]),o($VE,$V71,{40:113,41:159,42:$VF}),{44:[1,160]},o($VG,[2,52]),{44:[2,55]},{6:161,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw},o($VG,[2,31]),o($VG,[2,32]),o($VG,[2,33]),o($VG,[2,34]),o($VG,[2,35]),o($VG,[2,21]),o($VG,[2,22]),o($VG,[2,23]),o($VG,[2,24]),o($VG,[2,25]),o($VG,[2,26]),o($VG,[2,27]),o($VG,[2,28]),o($VG,[2,54]),o($Va1,[2,84]),{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,64:162,66:96,67:97,69:98,71:99,78:100,80:$V51,81:$V61,82:101},o($Vd1,[2,88]),{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,67:163,69:98,71:99,78:100,80:$V51,81:$V61,82:101},o($Vg1,[2,91]),{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,69:164,71:99,78:100,80:$V51,81:$V61,82:101},{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,71:165,78:100,80:$V51,81:$V61,82:101},{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,71:166,78:100,80:$V51,81:$V61,82:101},{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,71:167,78:100,80:$V51,81:$V61,82:101},{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,71:168,78:100,80:$V51,81:$V61,82:101},{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,71:169,78:100,80:$V51,81:$V61,82:101},{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,71:170,78:100,80:$V51,81:$V61,82:101},o($Vk1,[2,101]),{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,78:171,80:$V51,81:$V61,82:101},{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,78:172,80:$V51,81:$V61,82:101},o($Vo1,[2,105]),{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,80:$V51,81:$V61,82:173},{6:102,9:$V0,10:7,11:$V1,12:8,14:9,15:10,16:12,18:13,19:$V2,21:35,22:$V3,23:$V4,24:$V5,25:$V6,26:$V7,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:$Ve,34:$Vf,35:$Vg,36:37,37:38,38:$Vh,39:11,42:$Vi,45:14,46:$Vj,47:$Vk,48:$Vl,49:$Vm,51:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:$Vu,62:$Vv,63:$Vw,80:$V51,81:$V61,82:174},o($Vs1,[2,110]),o($Vs1,[2,111]),o($VG,[2,58]),o($VG,[2,59]),o($VG,[2,60]),o($VG,[2,61]),{5:[2,4]},o($VA,[2,12]),o($VA,[2,13]),o($VE,[2,43]),o($VG,[2,45]),{44:$V81,53:175,54:$V91},o($Va1,$Vb1,{65:176,54:$Vc1}),o($Vd1,$Ve1,{68:177,61:$Vf1}),o($Vg1,$Vh1,{70:178,60:$Vi1}),o($Vj1,[2,95]),o($Vj1,[2,96]),o($Vj1,[2,97]),o($Vj1,[2,98]),o($Vj1,[2,99]),o($Vj1,[2,100]),o($Vk1,$Vl1,{79:179,80:$Vm1,81:$Vn1}),o($Vk1,$Vl1,{79:180,80:$Vm1,81:$Vn1}),o($Vo1,$Vp1,{83:181,38:$Vq1,62:$Vr1}),o($Vo1,$Vp1,{83:182,38:$Vq1,62:$Vr1}),{44:[2,56]},o($Va1,[2,85]),o($Vd1,[2,89]),o($Vg1,[2,92]),o($Vk1,[2,102]),o($Vk1,[2,103]),o($Vo1,[2,106]),o($Vo1,[2,107])],
defaultActions: {3:[2,2],49:[2,1],50:[2,3],52:[2,6],116:[2,55],156:[2,4],175:[2,56]},
parseError: function parseError(str, hash) {
  this.hash = hash;
  if (hash.recoverable) {
	this.trace(str);
  } else {
	var error = new Error(str);
	error.hash = hash;
	throw error;
  }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const { Arbol } = require('src/app/models/arbol.model')
  const { Excepcion } = require('src/app/models/excepcion.model');
  const { Tipo } = require('src/app/models/tipo.model');

  const { NodoGrafico } = require('src/app/utils/reports/nodoGrafico');

  var arbol;
  var excepciones = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignorar espacios en blanco */
break;
case 1:return 11
break;
case 2:return 9
break;
case 3:return 35
break;
case 4:return 46
break;
case 5:return 20
break;
case 6:return ':'
break;
case 7:return 29
break;
case 8:return 51
break;
case 9:return 52
break;
case 10:return 42
break;
case 11:return 44
break;
case 12:return 8
break;
case 13:return 31
break;
case 14:return 30
break;
case 15:return 19
break;
case 16:return 22
break;
case 17:return 24
break;
case 18:return 23
break;
case 19:return 26
break;
case 20:return 25
break;
case 21:return 57
break;
case 22:return 27
break;
case 23:return 56
break;
case 24:return 32
break;
case 25:return 58
break;
case 26:return 34
break;
case 27:return 33
break;
case 28:return 28
break;
case 29:return 55
break;
case 30:return 60
break;
case 31:return 61
break;
case 32:return 74
break;
case 33:return 72
break;
case 34:return 75
break;
case 35:return 73
break;
case 36:return 76
break;
case 37:return 77
break;
case 38:return 38
break;
case 39:return 62
break;
case 40:return 63
break;
case 41:return 80
break;
case 42:return 81
break;
case 43:return 59
break;
case 44:return 49
break;
case 45:return 48
break;
case 46: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 47; 
break;
case 47:return 5;
break;
case 48:
                            excepciones.push(new Excepcion('Léxico', `Patrón desconocido ${yy_.yytext}`, yy_.yylloc.first_line, yy_.yylloc.first_column));
                            console.error(`Error Léxico: ${yy_.yytext} en la linea ${yy_.yylloc.first_line} y columna ${yy_.yylloc.first_column}`);
                          
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:::)/,/^(?::)/,/^(?:@)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\|)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:last\b)/,/^(?:namespace\b)/,/^(?:node\b)/,/^(?:parent\b)/,/^(?:position\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:=)/,/^(?:!=)/,/^(?:\*)/,/^(?:div\b)/,/^(?:mod\b)/,/^(?:\+)/,/^(?:-)/,/^(?:(([a-zñÑA-Z])[a-zA-ZñÑ0-9_-]*))/,/^(?:(([0-9]+)?\.([0-9]+)+))/,/^(?:([0-9]+))/,/^(?:(((")|('))((?:\\((")|('))|(?:(?!((")|('))).))*)((")|('))))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = descendente;
exports.Parser = descendente.Parser;
exports.parse = function () { return descendente.parse.apply(descendente, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}