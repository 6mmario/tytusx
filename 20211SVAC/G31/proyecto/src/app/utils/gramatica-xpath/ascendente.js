/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ascendente = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[1,27],$V3=[1,28],$V4=[1,29],$V5=[1,30],$V6=[1,31],$V7=[1,32],$V8=[1,33],$V9=[1,34],$Va=[1,35],$Vb=[1,21],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,26],$Vh=[1,40],$Vi=[1,20],$Vj=[1,16],$Vk=[1,17],$Vl=[1,18],$Vm=[1,19],$Vn=[1,37],$Vo=[1,41],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,46],$Vu=[1,47],$Vv=[1,48],$Vw=[1,49],$Vx=[5,6],$Vy=[5,6,36,41,49,50,56,57,58,65,66,67,68,69,70,72,73],$Vz=[1,55],$VA=[1,56],$VB=[5,6,8,10,36,41,49,50,56,57,58,65,66,67,68,69,70,72,73],$VC=[1,59],$VD=[5,6,8,10,36,39,41,49,50,56,57,58,65,66,67,68,69,70,72,73],$VE=[2,62],$VF=[2,61],$VG=[2,72],$VH=[2,75],$VI=[2,74],$VJ=[2,63],$VK=[2,64],$VL=[2,66],$VM=[2,65],$VN=[2,68],$VO=[2,67],$VP=[2,70],$VQ=[2,76],$VR=[1,81],$VS=[1,82],$VT=[1,84],$VU=[1,83],$VV=[1,86],$VW=[1,85],$VX=[1,87],$VY=[1,91],$VZ=[1,80],$V_=[1,79],$V$=[1,88],$V01=[1,90],$V11=[1,89],$V21=[1,103],$V31=[1,102],$V41=[41,50],$V51=[1,131],$V61=[41,49,50],$V71=[41,49,50,57],$V81=[1,133],$V91=[41,49,50,56,57],$Va1=[1,140],$Vb1=[1,141],$Vc1=[41,49,50,56,57,65,66,67,68,69,70,72,73],$Vd1=[1,142],$Ve1=[1,143],$Vf1=[36,41,49,50,56,57,58,65,66,67,68,69,70,72,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"RAIZ":3,"QUERIES":4,"EOF":5,"|":6,"QUERY":7,"/":8,"PATH_EXPR":9,"//":10,"STEP_EXPR":11,"POST_FIX_EXPR":12,"AXIS_STEP":13,"REVERSE_STEP":14,"PREDICATE_LIST":15,"FORWARD_STEP":16,"attribute":17,"::":18,"NODE_TEST":19,"child":20,"descendant":21,"descendant-or-self":22,"following":23,"following-sibling":24,"namespace":25,"self":26,"@":27,"ancestor":28,"ancestor-or-self":29,"parent":30,"preceding":31,"preceding-sibling":32,"..":33,"KIND_TEST":34,"EQNAME":35,"*":36,"PRIMARY_EXPR":37,"PREDICATE":38,"[":39,"EXPR":40,"]":41,"PARENTHESIZED_EXPR":42,".":43,"cadena":44,"digito":45,"decimal":46,"QUERY_LIST":47,"(":48,")":49,",":50,"text":51,"node":52,"last":53,"position":54,"nodename":55,"and":56,"or":57,"div":58,"mod":59,"EXPR_SINGLE":60,"OR_EXPR":61,"AND_EXPR":62,"COMPARISON_EXPR":63,"ADDITIVE_EXPR":64,"<":65,">":66,"<=":67,">=":68,"=":69,"!=":70,"MULTIPLICATIVE_EXPR":71,"+":72,"-":73,"UNARY_EXPR":74,"ERROR":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"|",8:"/",10:"//",17:"attribute",18:"::",20:"child",21:"descendant",22:"descendant-or-self",23:"following",24:"following-sibling",25:"namespace",26:"self",27:"@",28:"ancestor",29:"ancestor-or-self",30:"parent",31:"preceding",32:"preceding-sibling",33:"..",36:"*",39:"[",41:"]",43:".",44:"cadena",45:"digito",46:"decimal",48:"(",49:")",50:",",51:"text",52:"node",53:"last",54:"position",55:"nodename",56:"and",57:"or",58:"div",59:"mod",65:"<",66:">",67:"<=",68:">=",69:"=",70:"!=",72:"+",73:"-"},
productions_: [0,[3,2],[3,1],[4,3],[4,1],[4,3],[4,3],[4,1],[7,1],[7,2],[7,2],[7,1],[9,3],[9,3],[9,1],[11,1],[11,1],[13,1],[13,2],[13,1],[13,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,1],[14,3],[14,3],[14,3],[14,3],[14,3],[14,1],[19,1],[19,1],[19,1],[12,1],[12,2],[15,2],[15,1],[38,3],[37,1],[37,1],[37,1],[37,1],[37,1],[37,2],[37,3],[42,2],[42,3],[47,3],[47,1],[34,3],[34,3],[34,3],[34,3],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[40,3],[40,1],[60,1],[61,1],[61,3],[62,1],[62,3],[63,1],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[64,1],[64,3],[64,3],[71,1],[71,3],[71,3],[74,1],[74,2],[74,2],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                      arbol = new Arbol($$[$0-1].instrucciones);
                      arbol.graficaAST = new NodoGrafico('RAIZ ASC XPATH', [$$[$0-1].graficaAST]);
                      arbol.graficaCST = new NodoGrafico('RAIZ ASC XPATH', [$$[$0-1].graficaCST]);
                      arbol.gramatica = $$[$0-1].gramatica;

                      if (excepciones.length > 0) {
                        arbol.excepciones = arbol.excepciones.concat(excepciones);
                        excepciones = [];
                      }
                      return arbol;
                    
break;
case 2:

                      arbol = new Arbol([]);

                      if (excepciones.length > 0) {
                        arbol.excepciones = arbol.excepciones.concat(excepciones);
                        excepciones = [];
                      }
                      return arbol;
                    
break;
case 3:

                                $$[$0-2].instrucciones = $$[$0-2].instrucciones.concat($$[$0].instrucciones);
                                this.$ = {
                                  instrucciones: $$[$0-2].instrucciones,
                                  graficaAST: new NodoGrafico('QUERIES', [
                                    $$[$0-2].graficaAST,
                                    new NodoGrafico('|', []),
                                    $$[$0].graficaAST
                                  ]),
                                  graficaCST: new NodoGrafico('|', [
                                    $$[$0-2].graficaCST,
                                    $$[$0].graficaCST
                                  ]),
                                  gramatica: `<QUERIES> ::= <QUERIES> "|" <QUERY> \n`
                                };
                                this.$.gramatica += $$[$0-2].gramatica;
                                this.$.gramatica += $$[$0].gramatica;
                              
break;
case 4:

                                this.$ = {
                                  instrucciones: [$$[$0].instrucciones],
                                  graficaAST: new NodoGrafico('QUERIES', [
                                    $$[$0].graficaAST
                                  ]),
                                  graficaCST: $$[$0].graficaCST,
                                  gramatica: `<QUERIES> ::= <QUERY> \n`
                                };
                                this.$.gramatica += $$[$0].gramatica;
                              
break;
case 5: case 6: case 7:

                                excepciones.push(new Excepcion('Sintáctico', `Se esperaba ${yy.parser.hash.expected} en lugar de ${yytext}`, this._$.first_line, this._$.first_column));
                                console.log(`Error Sintáctico: ${yytext} Se esperaba ${yy.parser.hash.expected} en la linea ${this._$.first_line} y columna ${this._$.first_column}`);
                              
break;
case 8:

                                this.$ = {
                                  instrucciones: new Query(Tipo.OBJETO, '/', undefined,
                                    this._$.first_line, this._$.first_column),
                                  graficaAST: new NodoGrafico('QUERY', [
                                    new NodoGrafico('/', [])
                                  ]),
                                  graficaCST: new NodoGrafico('/', []),
                                  gramatica: `<QUERY> ::= "/" \n`
                                };
                              
break;
case 9:

                                this.$ = {
                                  instrucciones: new Query(Tipo.OBJETO, '/', $$[$0].instrucciones,
                                    this._$.first_line, this._$.first_column),
                                  graficaAST: new NodoGrafico('QUERY', [
                                    new NodoGrafico('/', []),
                                    $$[$0].graficaAST
                                  ]),
                                  graficaCST: new NodoGrafico('QUERY', [
                                    new NodoGrafico('/', []),
                                    $$[$0].graficaCST
                                  ]),
                                  gramatica: `<QUERY> ::= "/" <PATH_EXPR> \n`
                                };
                                this.$.gramatica += $$[$0].gramatica;
                              
break;
case 10:

                                this.$ = {
                                  instrucciones: new Query(Tipo.OBJETO, '//', $$[$0].instrucciones,
                                    this._$.first_line, this._$.first_column),
                                  graficaAST: new NodoGrafico('QUERY', [
                                    new NodoGrafico('//', []),
                                    $$[$0].graficaAST
                                  ]),
                                  graficaCST: new NodoGrafico('QUERY', [
                                    new NodoGrafico('//', []),
                                    $$[$0].graficaCST
                                  ]),
                                  gramatica: `<QUERY> ::= "//" <PATH_EXPR> \n`
                                };
                                this.$.gramatica += $$[$0].gramatica;
                              
break;
case 11:

                                this.$ = {
                                  instrucciones: new Query(Tipo.OBJETO, '', $$[$0].instrucciones,
                                    this._$.first_line, this._$.first_column),
                                  graficaAST: new NodoGrafico('QUERY', [
                                    $$[$0].graficaAST
                                  ]),
                                  graficaCST: $$[$0].graficaCST,
                                  gramatica: `<QUERY> ::= <PATH_EXPR> \n`
                                };
                                this.$.gramatica += $$[$0].gramatica;
                              
break;
case 12:

                                        this.$ = {
                                          instrucciones: new PathExpr(Tipo.OBJETO, '/', $$[$0-2].instrucciones,
                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                          graficaAST: new NodoGrafico('PATH_EXPR', [
                                            $$[$0-2].graficaAST,
                                            new NodoGrafico('/', []),
                                            $$[$0].graficaAST
                                          ]),
                                          graficaCST: new NodoGrafico('/', [
                                            $$[$0-2].graficaCST,
                                            $$[$0].graficaCST
                                          ]),
                                          gramatica: `<PATH_EXPR> ::= <PATH_EXPR> "/" <STEP_EXPR> \n`
                                        };
                                        this.$.gramatica += $$[$0-2].gramatica;
                                        this.$.gramatica += $$[$0].gramatica;
                                      
break;
case 13:

                                        this.$ = {
                                          instrucciones: new PathExpr(Tipo.OBJETO, '//', $$[$0-2].instrucciones,
                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                          graficaAST: new NodoGrafico('PATH_EXPR', [
                                            $$[$0-2].graficaAST,
                                            new NodoGrafico('//', []),
                                            $$[$0].graficaAST
                                          ]),
                                          graficaCST: new NodoGrafico('//', [
                                            $$[$0-2].graficaCST,
                                            $$[$0].graficaCST
                                          ]),
                                          gramatica: `<PATH_EXPR> ::= <PATH_EXPR> "//" <STEP_EXPR> \n`
                                        };
                                        this.$.gramatica += $$[$0-2].gramatica;
                                        this.$.gramatica += $$[$0].gramatica;
                                      
break;
case 14:

                                        this.$ = {
                                          instrucciones: new PathExpr(Tipo.OBJETO, '', $$[$0].instrucciones,
                                            undefined, this._$.first_line, this._$.first_column),
                                          graficaAST: new NodoGrafico('PATH_EXPR', [
                                            $$[$0].graficaAST
                                          ]),
                                          graficaCST: $$[$0].graficaCST,
                                          gramatica: `<PATH_EXPR> ::= <STEP_EXPR> \n`
                                        };
                                        this.$.gramatica += $$[$0].gramatica;
                                      
break;
case 15:

                              this.$ = {
                                instrucciones: $$[$0].instrucciones,
                                graficaAST: new NodoGrafico('STEP_EXPR', [
                                  $$[$0].graficaAST
                                ]),
                                graficaCST: $$[$0].graficaCST,
                                gramatica: `<STEP_EXPR> ::= <POST_FIX_EXPR> \n`
                              };
                              this.$.gramatica += $$[$0].gramatica;
                            
break;
case 16:

                              this.$ = {
                                instrucciones: $$[$0].instrucciones,
                                graficaAST: new NodoGrafico('STEP_EXPR', [
                                  $$[$0].graficaAST
                                ]),
                                graficaCST: $$[$0].graficaCST,
                                gramatica: `<STEP_EXPR> ::= <AXIS_STEP> \n`
                              };
                              this.$.gramatica += $$[$0].gramatica;
                            
break;
case 17:

                                              this.$ = {
                                                instrucciones: new AxisStep(Tipo.OBJETO, $$[$0].instrucciones,
                                                  [], this._$.first_line, this._$.first_column),
                                                graficaAST: new NodoGrafico('AXIS_STEP', [
                                                  $$[$0].graficaAST
                                                ]),
                                                graficaCST: $$[$0].graficaCST,
                                                gramatica: `<AXIS_STEP> ::= <REVERSE_STEP> \n`
                                              };
                                              this.$.gramatica += $$[$0].gramatica;
                                            
break;
case 18:

                                              this.$ = {
                                                instrucciones: new AxisStep(Tipo.OBJETO, $$[$0-1].instrucciones,
                                                  $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                graficaAST: new NodoGrafico('AXIS_STEP', [
                                                  $$[$0-1].graficaAST,
                                                  $$[$0].graficaAST,
                                                ]),
                                                graficaCST: new NodoGrafico('AXIS_STEP', [
                                                  $$[$0-1].graficaCST,
                                                  $$[$0].graficaCST,
                                                ]),
                                                gramatica: `<AXIS_STEP> ::= <REVERSE_STEP> <PREDICATE_LIST> \n`
                                              };
                                              this.$.gramatica += $$[$0-1].gramatica;
                                              this.$.gramatica += $$[$0].gramatica;
                                            
break;
case 19:

                                              this.$ = {
                                                instrucciones: new AxisStep(Tipo.OBJETO, $$[$0].instrucciones,
                                                  [], this._$.first_line, this._$.first_column),
                                                graficaAST: new NodoGrafico('AXIS_STEP', [
                                                  $$[$0].graficaAST
                                                ]),
                                                graficaCST: $$[$0].graficaCST,
                                                gramatica: `<AXIS_STEP> ::= <FORWARD_STEP> \n`
                                              };
                                              this.$.gramatica += $$[$0].gramatica;
                                            
break;
case 20:

                                              this.$ = {
                                                instrucciones: new AxisStep(Tipo.OBJETO, $$[$0-1].instrucciones,
                                                  $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                graficaAST: new NodoGrafico('AXIS_STEP', [
                                                  $$[$0-1].graficaAST,
                                                  $$[$0].graficaAST,
                                                ]),
                                                graficaCST: new NodoGrafico('AXIS_STEP', [
                                                  $$[$0-1].graficaCST,
                                                  $$[$0].graficaCST,
                                                ]),
                                                gramatica: `<AXIS_STEP> ::= <FORWARD_STEP> <PREDICATE_LIST> \n`
                                              };
                                              this.$.gramatica += $$[$0-1].gramatica;
                                              this.$.gramatica += $$[$0].gramatica;
                                            
break;
case 21:

                                                        this.$ = {
                                                          instrucciones: new ForwardStep(Tipo.OBJETO, 'attribute',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('attribute', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('attribute', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "attribute" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 22:

                                                        this.$ = {
                                                          instrucciones: new ForwardStep(Tipo.OBJETO, 'child',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('child', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('child', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "child" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 23:

                                                        this.$ = {
                                                          instrucciones: new ForwardStep(Tipo.OBJETO, 'descendant',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('descendant', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('descendant', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "descendant" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 24:

                                                        this.$ = {
                                                          instrucciones: new ForwardStep(Tipo.OBJETO, 'descendant-or-self',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('descendant-or-self', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('descendant-or-self', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "descendant-or-self" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 25:

                                                        this.$ = {
                                                          instrucciones: new ForwardStep(Tipo.OBJETO, 'following',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('following', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('following', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "following" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 26:

                                                        this.$ = {
                                                          instrucciones: new ForwardStep(Tipo.OBJETO, 'following-sibling',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('following-sibling', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('following-sibling', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "following-sibling" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 27:

                                                        this.$ = {
                                                          instrucciones: new ForwardStep(Tipo.OBJETO, 'namespace',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('namespace', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('namespace', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "namespace" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 28:

                                                        this.$ = {
                                                          instrucciones: new ForwardStep(Tipo.OBJETO, 'self',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('self', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('self', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "self" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 29:

                                                        this.$ = {
                                                          instrucciones: new ForwardStep(Tipo.OBJETO, '@',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            new NodoGrafico('@', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('@', [
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<FORWARD_STEP> ::= "@" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 30:

                                                        this.$ = {
                                                          instrucciones: $$[$0].instrucciones,
                                                          graficaAST: new NodoGrafico('FORWARD_STEP', [
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: $$[$0].graficaCST,
                                                          gramatica: `<FORWARD_STEP> ::= <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 31:

                                                        this.$ = {
                                                          instrucciones: new ReverseStep(Tipo.OBJETO, 'ancestor',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('REVERSE_STEP', [
                                                            new NodoGrafico('ancestor', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('ancestor', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<REVERSE_STEP> ::= "ancestor" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 32:

                                                        this.$ = {
                                                          instrucciones: new ReverseStep(Tipo.OBJETO, 'ancestor-or-self',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('REVERSE_STEP', [
                                                            new NodoGrafico('ancestor-or-self', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('ancestor-or-self', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<REVERSE_STEP> ::= "ancestor-or-self" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 33:

                                                        this.$ = {
                                                          instrucciones: new ReverseStep(Tipo.OBJETO, 'parent',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('REVERSE_STEP', [
                                                            new NodoGrafico('parent', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('parent', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<REVERSE_STEP> ::= "parent" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 34:

                                                        this.$ = {
                                                          instrucciones: new ReverseStep(Tipo.OBJETO, 'preceding',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('REVERSE_STEP', [
                                                            new NodoGrafico('preceding', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('preceding', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<REVERSE_STEP> ::= "preceding" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 35:

                                                        this.$ = {
                                                          instrucciones: new ReverseStep(Tipo.OBJETO, 'preceding-sibling',
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('REVERSE_STEP', [
                                                            new NodoGrafico('preceding-sibling', []),
                                                            new NodoGrafico('::', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('::', [
                                                            new NodoGrafico('preceding-sibling', []),
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<REVERSE_STEP> ::= "preceding-sibling" "::" <NODE_TEST> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 36:

                                                        this.$ = {
                                                          instrucciones: new ReverseStep(Tipo.OBJETO, '..',
                                                            undefined, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('REVERSE_STEP', [
                                                            new NodoGrafico('..', [])
                                                          ]),
                                                          graficaCST: new NodoGrafico('..', []),
                                                          gramatica: `<REVERSE_STEP> ::= ".." \n`
                                                        };
                                                      
break;
case 37:

                          this.$ = {
                            instrucciones: $$[$0].instrucciones,
                            graficaAST: new NodoGrafico('NODE_TEST', [
                              $$[$0].graficaAST
                            ]),
                            graficaCST: $$[$0].graficaCST,
                            gramatica: `<NODE_TEST> ::= <KIND_TEST> \n`
                          };
                          this.$.gramatica += $$[$0].gramatica;
                        
break;
case 38:

                          this.$ = {
                            instrucciones: $$[$0].instrucciones,
                            graficaAST: new NodoGrafico('NODE_TEST', [
                              $$[$0].graficaAST
                            ]),
                            graficaCST: $$[$0].graficaCST,
                            gramatica: `<NODE_TEST> ::= <EQNAME> \n`
                          };
                          this.$.gramatica += $$[$0].gramatica;
                        
break;
case 39:

                          this.$ = {
                            instrucciones: new MatchesAny(Tipo.OBJETO, '*',
                              this._$.first_line, this._$.first_column),
                            graficaAST: new NodoGrafico('NODE_TEST', [
                              new NodoGrafico('*', [])
                            ]),
                            graficaCST: new NodoGrafico('*', []),
                            gramatica: `<NODE_TEST> ::= '*' \n`
                          };
                        
break;
case 40:

                                                this.$ = {
                                                  instrucciones: new PostFixExpr(Tipo.OBJETO, $$[$0].instrucciones,
                                                    [], this._$.first_line, this._$.first_column),
                                                  graficaAST: new NodoGrafico('POST_FIX_EXPR', [
                                                    $$[$0].graficaAST
                                                  ]),
                                                  graficaCST: $$[$0].graficaCST,
                                                  gramatica: `<POST_FIX_EXPR> ::= <PRIMARY_EXPR> \n`
                                                };
                                                this.$.gramatica += $$[$0].gramatica;
                                              
break;
case 41:

                                                this.$ = {
                                                  instrucciones: new PostFixExpr(Tipo.OBJETO, $$[$0-1].instrucciones,
                                                    $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                  graficaAST: new NodoGrafico('POST_FIX_EXPR', [
                                                    $$[$0-1].graficaAST,
                                                    $$[$0].graficaAST,
                                                  ]),
                                                  graficaCST: new NodoGrafico('POST_FIX_EXPR', [
                                                    $$[$0-1].graficaCST,
                                                    $$[$0].graficaCST,
                                                  ]),
                                                  gramatica: `<POST_FIX_EXPR> ::= <PRIMARY_EXPR> <PREDICATE_LIST> \n`
                                                };
                                                this.$.gramatica += $$[$0-1].gramatica;
                                                this.$.gramatica += $$[$0].gramatica;
                                              
break;
case 42:

                                              $$[$0-1].instrucciones = $$[$0-1].instrucciones.concat($$[$01].instrucciones);
                                              this.$ = {
                                                instrucciones: $$[$0-1].instrucciones,
                                                graficaAST: new NodoGrafico('PREDICATE_LIST', [
                                                  $$[$0-1].graficaAST,
                                                  $$[$0].graficaAST
                                                ]),
                                                graficaCST: new NodoGrafico('PREDICATE_LIST', [
                                                  $$[$0-1].graficaCST,
                                                  $$[$0].graficaCST,
                                                ]),
                                                gramatica: `<PREDICATE_LIST> ::= <PREDICATE_LIST> <PREDICATE> \n`
                                              };
                                              this.$.gramatica += $$[$0-1].gramatica;
                                              this.$.gramatica += $$[$0].gramatica;
                                            
break;
case 43:

                                              this.$ = {
                                                instrucciones: [$$[$0].instrucciones],
                                                graficaAST: new NodoGrafico('PREDICATE_LIST', [
                                                  $$[$0].graficaAST
                                                ]),
                                                graficaCST: $$[$0].graficaCST,
                                                gramatica: `<PREDICATE_LIST> ::= <PREDICATE> \n`
                                              };
                                              this.$.gramatica += $$[$0].gramatica;
                                            
break;
case 44:

                              this.$ = {
                                instrucciones: new Predicate(Tipo.OBJETO, $$[$0-1].instrucciones,
                                  this._$.first_line, this._$.first_column),
                                graficaAST: new NodoGrafico('PREDICATE', [
                                  new NodoGrafico('[', []),
                                  $$[$0-1].graficaAST,
                                  new NodoGrafico(']', [])
                                ]),
                                graficaCST: new NodoGrafico('[EXPR]', [
                                  $$[$0-1].graficaCST
                                ]),
                                gramatica: `<PREDICATE> ::= "[" <EXPR> "]" \n`
                              };
                              this.$.gramatica += $$[$0-1].gramatica;
                            
break;
case 45:

                                      this.$ = {
                                        instrucciones: $$[$0].instrucciones,
                                        graficaAST: new NodoGrafico('PRIMARY_EXPR', [
                                          $$[$0].graficaAST
                                        ]),
                                        graficaCST: $$[$0].graficaCST,
                                        gramatica: `<PRIMARY_EXPR> ::= <PARENTHESIZED_EXPR> \n`
                                      };
                                      this.$.gramatica += $$[$0].gramatica;
                                    
break;
case 46:

                                      this.$ = {
                                        instrucciones: new Primitivo(Tipo.CURRENT_NODE, '.',
                                          this._$.first_line, this._$.first_column),
                                        graficaAST: new NodoGrafico('PRIMARY_EXPR', [
                                          new NodoGrafico('.', [])
                                        ]),
                                        graficaCST: new NodoGrafico('.', []),
                                        gramatica: `<PRIMARY_EXPR> ::= "." \n`
                                      };
                                    
break;
case 47:

                                      this.$ = {
                                        instrucciones: new Primitivo(Tipo.STRING, $$[$0],
                                          this._$.first_line, this._$.first_column),
                                        graficaAST: new NodoGrafico('PRIMARY_EXPR', [
                                          new NodoGrafico($$[$0], [])
                                        ]),
                                        graficaCST: new NodoGrafico($$[$0], []),
                                        gramatica: `<PRIMARY_EXPR> ::= "${$$[$0]}" \n`
                                      };
                                    
break;
case 48:

                                      this.$ = {
                                        instrucciones: new Primitivo(Tipo.INTEGER, $$[$0],
                                          this._$.first_line, this._$.first_column),
                                        graficaAST: new NodoGrafico('PRIMARY_EXPR', [
                                          new NodoGrafico($$[$0], [])
                                        ]),
                                        graficaCST: new NodoGrafico($$[$0], []),
                                        gramatica: `<PRIMARY_EXPR> ::= "${$$[$0]}" \n`
                                      };
                                    
break;
case 49:

                                      this.$ = {
                                        instrucciones: new Primitivo(Tipo.DOUBLE, $$[$0],
                                          this._$.first_line, this._$.first_column),
                                        graficaAST: new NodoGrafico('PRIMARY_EXPR', [
                                          new NodoGrafico($$[$0], [])
                                        ]),
                                        graficaCST: new NodoGrafico($$[$0], []),
                                        gramatica: `<PRIMARY_EXPR> ::= "${$$[$0]}" \n`
                                      };
                                    
break;
case 50:

                                      this.$ = {
                                        instrucciones: new Primitivo(Tipo.ARRAY, [],
                                          this._$.first_line, this._$.first_column),
                                        graficaAST: new NodoGrafico('PRIMARY_EXPR', [
                                          new NodoGrafico('[', []),
                                          new NodoGrafico(']', [])
                                        ]),
                                        graficaCST: new NodoGrafico('[]', []),
                                        gramatica: `<PRIMARY_EXPR> ::= "[" "]" \n`
                                      };
                                    
break;
case 51:

                                      this.$ = {
                                        instrucciones: new Primitivo(Tipo.ARRAY, $$[$0-1].instrucciones,
                                          this._$.first_line, this._$.first_column),
                                        graficaAST: new NodoGrafico('PRIMARY_EXPR', [
                                          new NodoGrafico('[', []),
                                          $$[$0-1].graficaAST,
                                          new NodoGrafico(']', [])
                                        ]),
                                        graficaCST: new NodoGrafico('[QUERY_LIST]', [
                                          $$[$0-1].graficaCST,
                                        ]),
                                        gramatica: `<PRIMARY_EXPR> ::= "[" <QUERY_LIST> "]" \n`
                                      };
                                      this.$.gramatica += $$[$0-1].gramatica;
                                    
break;
case 52:

                                      this.$ = {
                                        instrucciones: null,                        //TODO implementar FUNCION
                                        graficaAST: new NodoGrafico('PARENTHESIZED_EXPR', [
                                          new NodoGrafico('(', []),
                                          new NodoGrafico(')', [])
                                        ]),
                                        graficaCST: new NodoGrafico('()', []),
                                        gramatica: `<PARENTHESIZED_EXPR> ::= "(" ")" \n`
                                      };
                                    
break;
case 53:

                                      this.$ = {
                                        instrucciones: $$[$0-1].instrucciones,
                                        graficaAST: new NodoGrafico('PARENTHESIZED_EXPR', [
                                          new NodoGrafico('(', []),
                                          $$[$0-1].graficaAST,
                                          new NodoGrafico(')', [])
                                        ]),
                                        graficaCST: new NodoGrafico('(EXPR)', [
                                          $$[$0-1].graficaCST,
                                        ]),
                                        gramatica: `<PARENTHESIZED_EXPR> ::= "(" <EXPR> ")" \n`
                                      };
                                      this.$.gramatica += $$[$0-1].gramatica;
                                    
break;
case 54:

                                      $$[$0-2].instrucciones = $$[$0-2].instrucciones.concat($$[$0].instrucciones);
                                      this.$ = {
                                        instrucciones: $$[$0-2].instrucciones,
                                        graficaAST: new NodoGrafico('QUERY_LIST', [
                                          $$[$0-2].graficaAST,
                                          new NodoGrafico(',', []),
                                          $$[$0].graficaAST
                                        ]),
                                        graficaCST: new NodoGrafico(',', [
                                          $$[$0-2].graficaCST,
                                          $$[$0].graficaCST
                                        ]),
                                        gramatica: `<QUERY_LIST> ::= <QUERY_LIST> "," <QUERY> \n`
                                      };
                                      this.$.gramatica += $$[$0-2].gramatica;
                                      this.$.gramatica += $$[$0].gramatica;
                                    
break;
case 55:

                                      this.$ = {
                                        instrucciones: [$$[$0].instrucciones],
                                        graficaAST: new NodoGrafico('QUERY_LIST', [
                                          $$[$0].graficaAST
                                        ]),
                                        graficaCST: $$[$0].graficaCST,
                                        gramatica: `<QUERY_LIST> ::= <QUERY> \n`
                                      };
                                      this.$.gramatica += $$[$0].gramatica;
                                    
break;
case 56:

                              this.$ = {
                                instrucciones: new KindTest(Tipo.OBJETO, 'text',
                                  this._$.first_line, this._$.first_column),
                                graficaAST: new NodoGrafico('KIND_TEST', [
                                  new NodoGrafico('text', []),
                                  new NodoGrafico('(', []),
                                  new NodoGrafico(')', [])
                                ]),
                                graficaCST: new NodoGrafico('text()', []),
                                gramatica: `<KIND_TEST> ::= "text" "(" ")" \n`
                              };
                            
break;
case 57:

                              this.$ = {
                                instrucciones: new KindTest(Tipo.OBJETO, 'node',
                                  this._$.first_line, this._$.first_column),
                                graficaAST: new NodoGrafico('KIND_TEST', [
                                  new NodoGrafico('node', []),
                                  new NodoGrafico('(', []),
                                  new NodoGrafico(')', [])
                                ]),
                                graficaCST: new NodoGrafico('node()', []),
                                gramatica: `<KIND_TEST> ::= "node" "(" ")" \n`
                              };
                            
break;
case 58:

                              this.$ = {
                                instrucciones: new KindTest(Tipo.OBJETO, 'last',
                                  this._$.first_line, this._$.first_column),
                                graficaAST: new NodoGrafico('KIND_TEST', [
                                  new NodoGrafico('last', []),
                                  new NodoGrafico('(', []),
                                  new NodoGrafico(')', [])
                                ]),
                                graficaCST: new NodoGrafico('last()', []),
                                gramatica: `<KIND_TEST> ::= "last" "(" ")" \n`
                              };
                            
break;
case 59:

                              this.$ = {
                                instrucciones: new KindTest(Tipo.OBJETO, 'position',
                                  this._$.first_line, this._$.first_column),
                                graficaAST: new NodoGrafico('KIND_TEST', [
                                  new NodoGrafico('position', []),
                                  new NodoGrafico('(', []),
                                  new NodoGrafico(')', [])
                                ]),
                                graficaCST: new NodoGrafico('position()', []),
                                gramatica: `<KIND_TEST> ::= "position" "(" ")" \n`
                              };
                            
break;
case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81:

                                    this.$ = {
                                      instrucciones: new Primitivo(Tipo.ID, $$[$0],
                                        this._$.first_line, this._$.first_column),
                                      graficaAST: new NodoGrafico('EQNAME', [
                                        new NodoGrafico($$[$0], [])
                                      ]),
                                      graficaCST: new NodoGrafico($$[$0], []),
                                      gramatica: `<EQNAME> ::= "${$$[$0]}" \n`
                                    };
                                  
break;
case 82:

                                $$[$0-2].instrucciones = $$[$0-2].instrucciones.concat($$[$0].instrucciones);
                                this.$ = {
                                  instrucciones: $$[$0-2].instrucciones,
                                  graficaAST: new NodoGrafico('EXPR', [
                                    $$[$0-2].graficaAST,
                                    new NodoGrafico(',', []),
                                    $$[$0].graficaAST
                                  ]),
                                  graficaCST: new NodoGrafico(',', [
                                    $$[$0-2].graficaCST,
                                    $$[$0].graficaCST
                                  ]),gramatica: `<EXPR> ::= <EXPR> "," <EXPR_SINGLE> \n`
                                };
                                this.$.gramatica += $$[$0-2].gramatica;
                                this.$.gramatica += $$[$0].gramatica;
                              
break;
case 83:

                                this.$ = {
                                  instrucciones: [$$[$0].instrucciones],
                                  graficaAST: new NodoGrafico('EXPR', [
                                    $$[$0].graficaAST
                                  ]),
                                  graficaCST: $$[$0].graficaCST,
                                  gramatica: `<EXPR> ::= <EXPR_SINGLE> \n`
                                };
                                this.$.gramatica += $$[$0].gramatica;
                              
break;
case 84:

                        this.$ = {
                          instrucciones: $$[$0].instrucciones,
                          graficaAST: new NodoGrafico('EXPR_SINGLE', [
                            $$[$0].graficaAST
                          ]),
                          graficaCST: $$[$0].graficaCST,
                          gramatica: `<EXPR_SINGLE> ::= <OR_EXPR> \n`
                        };
                        this.$.gramatica += $$[$0].gramatica;
                      
break;
case 85:

                                      this.$ = {
                                        instrucciones: $$[$0].instrucciones,
                                        graficaAST: new NodoGrafico('OR_EXPR', [
                                          $$[$0].graficaAST
                                        ]),
                                        graficaCST: $$[$0].graficaCST,
                                        gramatica: `<OR_EXPR> ::= <AND_EXPR> \n`
                                      };
                                      this.$.gramatica += $$[$0].gramatica;
                                    
break;
case 86:

                                      this.$ = {
                                        instrucciones: new Or(Tipo.BOOLEAN, $$[$0-2].instrucciones,
                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                        graficaAST: new NodoGrafico('OR_EXPR', [
                                          $$[$0-2].graficaAST,
                                          new NodoGrafico('or', []),
                                          $$[$0].graficaAST
                                        ]),
                                        graficaCST: new NodoGrafico('or', [
                                          $$[$0-2].graficaCST,
                                          $$[$0].graficaCST
                                        ]),
                                        gramatica: `<OR_EXPR> ::= <OR_EXPR> "or" <AND_EXPR> \n`
                                      };
                                      this.$.gramatica += $$[$0-2].gramatica;
                                      this.$.gramatica += $$[$0].gramatica;
                                    
break;
case 87:

                                                      this.$ = {
                                                        instrucciones: $$[$0].instrucciones,
                                                        graficaAST: new NodoGrafico('AND_EXPR', [
                                                          $$[$0].graficaAST
                                                        ]),
                                                        graficaCST: $$[$0].graficaCST,
                                                        gramatica: `<AND_EXPR> ::= <COMPARISON_EXPR> \n`
                                                      };
                                                      this.$.gramatica += $$[$0].gramatica;
                                                    
break;
case 88:

                                                      this.$ = {
                                                        instrucciones: new And(Tipo.BOOLEAN, $$[$0-2].instrucciones,
                                                            $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                        graficaAST: new NodoGrafico('OR_EXPR', [
                                                          $$[$0-2].graficaAST,
                                                          new NodoGrafico('and', []),
                                                          $$[$0].graficaAST
                                                        ]),
                                                        graficaCST: new NodoGrafico('and', [
                                                          $$[$0-2].graficaCST,
                                                          $$[$0].graficaCST
                                                        ]),
                                                        gramatica: `<AND_EXPR> ::= <AND_EXPR> "and" <COMPARISON_EXPR> \n`
                                                      };
                                                      this.$.gramatica += $$[$0-2].gramatica;
                                                      this.$.gramatica += $$[$0].gramatica;
                                                    
break;
case 89:

                                                        this.$ = {
                                                          instrucciones: $$[$0].instrucciones,
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: $$[$0].graficaCST,
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 90:

                                                        this.$ = {
                                                          instrucciones: new Menor(Tipo.BOOLEAN, $$[$0-2].instrucciones,
                                                              $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0-2].graficaAST,
                                                            new NodoGrafico('<', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('<', [
                                                            $$[$0-2].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> "<" <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-2].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 91:

                                                        this.$ = {
                                                          instrucciones: new Mayor(Tipo.BOOLEAN, $$[$0-2].instrucciones,
                                                              $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0-2].graficaAST,
                                                            new NodoGrafico('>', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('>', [
                                                            $$[$0-2].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> ">" <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-2].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 92:

                                                        this.$ = {
                                                          instrucciones: new MenorQue(Tipo.BOOLEAN, $$[$0-2].instrucciones,
                                                              $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0-2].graficaAST,
                                                            new NodoGrafico('<=', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('<=', [
                                                            $$[$0-2].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> "<=" <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-2].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 93:

                                                        this.$ = {
                                                          instrucciones: new MayorQue(Tipo.BOOLEAN, $$[$0-2].instrucciones,
                                                              $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0-2].graficaAST,
                                                            new NodoGrafico('>=', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('>=', [
                                                            $$[$0-2].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> ">=" <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-2].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 94:

                                                        this.$ = {
                                                          instrucciones: new Igualdad(Tipo.BOOLEAN, $$[$0-2].instrucciones,
                                                              $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0-2].graficaAST,
                                                            new NodoGrafico('=', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('=', [
                                                            $$[$0-2].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> "=" <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-2].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 95:

                                                        this.$ = {
                                                          instrucciones: new Diferencia(Tipo.BOOLEAN, $$[$0-2].instrucciones,
                                                              $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                          graficaAST: new NodoGrafico('COMPARISON_EXPR', [
                                                            $$[$0-2].graficaAST,
                                                            new NodoGrafico('!=', []),
                                                            $$[$0].graficaAST
                                                          ]),
                                                          graficaCST: new NodoGrafico('!=', [
                                                            $$[$0-2].graficaCST,
                                                            $$[$0].graficaCST
                                                          ]),
                                                          gramatica: `<COMPARISON_EXPR> ::= <ADDITIVE_EXPR> "!=" <ADDITIVE_EXPR> \n`
                                                        };
                                                        this.$.gramatica += $$[$0-2].gramatica;
                                                        this.$.gramatica += $$[$0].gramatica;
                                                      
break;
case 96:

                                                                this.$ = {
                                                                  instrucciones: $$[$0].instrucciones,
                                                                  graficaAST: new NodoGrafico('ADDITIVE_EXPR', [
                                                                    $$[$0].graficaAST
                                                                  ]),
                                                                  graficaCST: $$[$0].graficaCST,
                                                                  gramatica: `<ADDITIVE_EXPR> ::= <MULTIPLICATIVE_EXPR> \n`
                                                                };
                                                                this.$.gramatica += $$[$0].gramatica;
                                                              
break;
case 97:

                                                                this.$ = {
                                                                  instrucciones: new Suma(Tipo.STRING, $$[$0-2].instrucciones,
                                                                    $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                                  graficaAST: new NodoGrafico('ADDITIVE_EXPR', [
                                                                    $$[$0-2].graficaAST,
                                                                    new NodoGrafico('+', []),
                                                                    $$[$0].graficaAST
                                                                  ]),
                                                                  graficaCST: new NodoGrafico('+', [
                                                                    $$[$0-2].graficaCST,
                                                                    $$[$0].graficaCST
                                                                  ]),
                                                                  gramatica: `<ADDITIVE_EXPR> ::= <ADDITIVE_EXPR> "+" <MULTIPLICATIVE_EXPR> \n`
                                                                };
                                                                this.$.gramatica += $$[$0-2].gramatica;
                                                                this.$.gramatica += $$[$0].gramatica;
                                                              
break;
case 98:

                                                                this.$ = {
                                                                  instrucciones: new Resta(Tipo.STRING, $$[$0-2].instrucciones,
                                                                    $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                                  graficaAST: new NodoGrafico('ADDITIVE_EXPR', [
                                                                    $$[$0-2].graficaAST,
                                                                    new NodoGrafico('-', []),
                                                                    $$[$0].graficaAST
                                                                  ]),
                                                                  graficaCST: new NodoGrafico('-', [
                                                                    $$[$0-2].graficaCST,
                                                                    $$[$0].graficaCST
                                                                  ]),
                                                                  gramatica: `<ADDITIVE_EXPR> ::= <ADDITIVE_EXPR> "-" <MULTIPLICATIVE_EXPR> \n`
                                                                };
                                                                this.$.gramatica += $$[$0-2].gramatica;
                                                                this.$.gramatica += $$[$0].gramatica;
                                                              
break;
case 99:

                                                              this.$ = {
                                                                instrucciones: $$[$0].instrucciones,
                                                                graficaAST: new NodoGrafico('MULTIPLICATIVE_EXPR', [
                                                                  $$[$0].graficaAST
                                                                ]),
                                                                graficaCST: $$[$0].graficaCST,
                                                                gramatica: `<MULTIPLICATIVE_EXPR> ::= <UNARY_EXPR> \n`
                                                              };
                                                              this.$.gramatica += $$[$0].gramatica;
                                                            
break;
case 100:

                                                                this.$ = {
                                                                  instrucciones: new Multiplicacion(Tipo.STRING, $$[$0-2].instrucciones,
                                                                    $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                                  graficaAST: new NodoGrafico('MULTIPLICATIVE_EXPR', [
                                                                    $$[$0-2].graficaAST,
                                                                    new NodoGrafico('*', []),
                                                                    $$[$0].graficaAST
                                                                  ]),
                                                                  graficaCST: new NodoGrafico('*', [
                                                                    $$[$0-2].graficaCST,
                                                                    $$[$0].graficaCST
                                                                  ]),
                                                                  gramatica: `<UNARY_EXPR> ::= <MULTIPLICATIVE_EXPR> "*" <UNARY_EXPR> \n`
                                                                };
                                                                this.$.gramatica += $$[$0-2].gramatica;
                                                                this.$.gramatica += $$[$0].gramatica;
                                                              
break;
case 101:

                                                                this.$ = {
                                                                  instrucciones: new Division(Tipo.STRING, $$[$0-2].instrucciones,
                                                                    $$[$0].instrucciones, this._$.first_line, this._$.first_column),
                                                                  graficaAST: new NodoGrafico('MULTIPLICATIVE_EXPR', [
                                                                    $$[$0-2].graficaAST,
                                                                    new NodoGrafico('div', []),
                                                                    $$[$0].graficaAST
                                                                  ]),
                                                                  graficaCST: new NodoGrafico('div', [
                                                                    $$[$0-2].graficaCST,
                                                                    $$[$0].graficaCST
                                                                  ]),
                                                                  gramatica: `<UNARY_EXPR> ::= <MULTIPLICATIVE_EXPR> "div" <UNARY_EXPR> \n`
                                                                };
                                                                this.$.gramatica += $$[$0-2].gramatica;
                                                                this.$.gramatica += $$[$0].gramatica;
                                                              
break;
case 102:

                                              this.$ = {
                                                instrucciones: $$[$0].instrucciones,
                                                graficaAST: new NodoGrafico('UNARY_EXPR', [
                                                  $$[$0].graficaAST
                                                ]),
                                                graficaCST: $$[$0].graficaCST,
                                                gramatica: `<UNARY_EXPR> ::= <QUERY> \n`
                                              };
                                              this.$.gramatica += $$[$0].gramatica;
                                            
break;
case 103:

                                                this.$ = {
                                                  instrucciones: new Negativo(Tipo.STRING, $$[$0].instrucciones,
                                                    this._$.first_line, this._$.first_column),
                                                  graficaAST: new NodoGrafico('UNARY_EXPR', [
                                                    new NodoGrafico('-', []),
                                                    $$[$0].graficaAST
                                                  ]),
                                                  graficaCST: new NodoGrafico('-', [
                                                    $$[$0].graficaCST
                                                  ]),
                                                  gramatica: `<UNARY_EXPR> ::= "-" <UNARY_EXPR> \n`
                                                };
                                                this.$.gramatica += $$[$0].gramatica;
                                              
break;
case 104:

                                                this.$ = {
                                                  instrucciones: null,                        //TODO implementar FUNCION
                                                  graficaAST: new NodoGrafico('UNARY_EXPR', [
                                                    new NodoGrafico('+', []),
                                                    $$[$0].graficaAST
                                                  ]),
                                                  graficaCST: new NodoGrafico('+', [
                                                    $$[$0].graficaCST
                                                  ]),
                                                  gramatica: `<UNARY_EXPR> ::= "+" <UNARY_EXPR> \n`
                                                };
                                                this.$.gramatica += $$[$0].gramatica;
                                              
break;
}
},
table: [{2:[1,5],3:1,4:2,5:[1,3],7:4,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{1:[3]},{5:[1,50],6:[1,51]},{1:[2,2]},o($Vx,[2,4]),{5:[2,7],6:[1,52]},o([5,6,41,49,50,65,66,67,68,69,70,72,73],[2,8],{11:9,12:10,13:11,37:12,14:13,16:14,42:15,19:36,34:38,35:39,9:53,17:$V2,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,36:$Vh,39:$Vi,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw}),{9:54,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},o($Vy,[2,11],{8:$Vz,10:$VA}),o($VB,[2,14]),o($VB,[2,15]),o($VB,[2,16]),o($VB,[2,40],{15:57,38:58,39:$VC}),o($VB,[2,17],{38:58,15:60,39:$VC}),o($VB,[2,19],{38:58,15:61,39:$VC}),o($VD,[2,45]),o($VD,[2,46]),o($VD,[2,47]),o($VD,[2,48]),o($VD,[2,49]),{7:64,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,41:[1,62],42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:63,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},o($VD,$VE,{18:[1,65]}),o($VD,$VF,{18:[1,66]}),o($VD,$VG,{18:[1,67]}),o($VD,$VH,{18:[1,68]}),o($VD,$VI,{18:[1,69]}),o($VD,[2,36]),o($VD,$VJ,{18:[1,70]}),o($VD,$VK,{18:[1,71]}),o($VD,$VL,{18:[1,72]}),o($VD,$VM,{18:[1,73]}),o($VD,$VN,{18:[1,74]}),o($VD,$VO,{18:[1,75]}),o($VD,$VP,{18:[1,76]}),o($VD,$VQ,{18:[1,77]}),{17:$VR,19:78,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},o($VD,[2,30]),{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,40:93,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,49:[1,92],51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:94,61:95,62:96,63:97,64:98,71:99,72:$V21,73:$V31,74:100},o($VD,[2,37]),o($VD,[2,38]),o($VD,[2,39]),o($VD,[2,77],{48:[1,104]}),o($VD,[2,71],{48:[1,105]}),o($VD,[2,69],{48:[1,106]}),o($VD,[2,73],{48:[1,107]}),o($VD,[2,60]),o($VD,[2,78]),o($VD,[2,79]),o($VD,[2,80]),o($VD,[2,81]),{1:[2,1]},{2:[1,109],7:108,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{7:110,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},o($Vy,[2,9],{8:$Vz,10:$VA}),o($Vy,[2,10],{8:$Vz,10:$VA}),{11:111,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{11:112,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},o($VB,[2,41],{38:113,39:$VC}),o($VD,[2,43]),{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,40:114,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:94,61:95,62:96,63:97,64:98,71:99,72:$V21,73:$V31,74:100},o($VB,[2,18],{38:113,39:$VC}),o($VB,[2,20],{38:113,39:$VC}),o($VD,[2,50]),{41:[1,115],50:[1,116]},o($V41,[2,55]),{17:$VR,19:117,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{17:$VR,19:118,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{17:$VR,19:119,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{17:$VR,19:120,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{17:$VR,19:121,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{17:$VR,19:122,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{17:$VR,19:123,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{17:$VR,19:124,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{17:$VR,19:125,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{17:$VR,19:126,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{17:$VR,19:127,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{17:$VR,19:128,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},{17:$VR,19:129,20:$VS,21:$VT,22:$VU,23:$VV,24:$VW,25:$VX,26:$VY,28:$VZ,29:$V_,30:$V$,31:$V01,32:$V11,34:38,35:39,36:$Vh,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},o($VD,[2,29]),o($VD,$VF),o($VD,$VE),o($VD,$VJ),o($VD,$VK),o($VD,$VM),o($VD,$VL),o($VD,$VO),o($VD,$VN),o($VD,$VP),o($VD,$VG),o($VD,$VI),o($VD,$VH),o($VD,$VQ),o($VD,[2,52]),{49:[1,130],50:$V51},o($V61,[2,83]),o($V61,[2,84],{57:[1,132]}),o($V71,[2,85],{56:$V81}),o($V91,[2,87]),o($V91,[2,89],{65:[1,134],66:[1,135],67:[1,136],68:[1,137],69:[1,138],70:[1,139],72:$Va1,73:$Vb1}),o($Vc1,[2,96],{36:$Vd1,58:$Ve1}),o($Vf1,[2,99]),o($Vf1,[2,102]),{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,72:$V21,73:$V31,74:144},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,72:$V21,73:$V31,74:145},{49:[1,146]},{49:[1,147]},{49:[1,148]},{49:[1,149]},o($Vx,[2,3]),o($Vx,[2,5]),o($Vx,[2,6]),o($VB,[2,12]),o($VB,[2,13]),o($VD,[2,42]),{41:[1,150],50:$V51},o($VD,[2,51]),{7:151,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw},o($VD,[2,31]),o($VD,[2,32]),o($VD,[2,33]),o($VD,[2,34]),o($VD,[2,35]),o($VD,[2,21]),o($VD,[2,22]),o($VD,[2,23]),o($VD,[2,24]),o($VD,[2,25]),o($VD,[2,26]),o($VD,[2,27]),o($VD,[2,28]),o($VD,[2,53]),{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:152,61:95,62:96,63:97,64:98,71:99,72:$V21,73:$V31,74:100},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,62:153,63:97,64:98,71:99,72:$V21,73:$V31,74:100},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,63:154,64:98,71:99,72:$V21,73:$V31,74:100},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,64:155,71:99,72:$V21,73:$V31,74:100},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,64:156,71:99,72:$V21,73:$V31,74:100},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,64:157,71:99,72:$V21,73:$V31,74:100},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,64:158,71:99,72:$V21,73:$V31,74:100},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,64:159,71:99,72:$V21,73:$V31,74:100},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,64:160,71:99,72:$V21,73:$V31,74:100},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,71:161,72:$V21,73:$V31,74:100},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,71:162,72:$V21,73:$V31,74:100},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,72:$V21,73:$V31,74:163},{7:101,8:$V0,9:8,10:$V1,11:9,12:10,13:11,14:13,16:14,17:$V2,19:36,20:$V3,21:$V4,22:$V5,23:$V6,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:38,35:39,36:$Vh,37:12,39:$Vi,42:15,43:$Vj,44:$Vk,45:$Vl,46:$Vm,48:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,72:$V21,73:$V31,74:164},o($Vf1,[2,103]),o($Vf1,[2,104]),o($VD,[2,56]),o($VD,[2,57]),o($VD,[2,58]),o($VD,[2,59]),o($VD,[2,44]),o($V41,[2,54]),o($V61,[2,82]),o($V71,[2,86],{56:$V81}),o($V91,[2,88]),o($V91,[2,90],{72:$Va1,73:$Vb1}),o($V91,[2,91],{72:$Va1,73:$Vb1}),o($V91,[2,92],{72:$Va1,73:$Vb1}),o($V91,[2,93],{72:$Va1,73:$Vb1}),o($V91,[2,94],{72:$Va1,73:$Vb1}),o($V91,[2,95],{72:$Va1,73:$Vb1}),o($Vc1,[2,97],{36:$Vd1,58:$Ve1}),o($Vc1,[2,98],{36:$Vd1,58:$Ve1}),o($Vf1,[2,100]),o($Vf1,[2,101])],
defaultActions: {3:[2,2],50:[2,1]},
parseError: function parseError (str, hash) {
	this.hash = hash;
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const { Arbol } = require('src/app/models/arbol.model')
  const { Excepcion } = require('src/app/models/excepcion.model');
  const { Tipo } = require('src/app/models/tipo.model');

  const { Primitivo } = require('src/app/controllers/expresiones/primitivo.controller');
  // ARITMETICAS
  const { Suma } = require('src/app/controllers/expresiones/aritmeticas/suma.controller');
  const { Resta } = require('src/app/controllers/expresiones/aritmeticas/resta.controller');
  const { Multiplicacion } = require('src/app/controllers/expresiones/aritmeticas/multiplicacion.controller');
  const { Division } = require('src/app/controllers/expresiones/aritmeticas/division.controller');
  const { Negativo } = require('src/app/controllers/expresiones/aritmeticas/negativo.controller');
  const { Positivo } = require('src/app/controllers/expresiones/aritmeticas/positivo.controller');
  // RELACIONALES
  const { Mayor } = require('src/app/controllers/expresiones/relacionales/mayor.controller');
  const { Menor } = require('src/app/controllers/expresiones/relacionales/menor.controller');
  const { MayorQue } = require('src/app/controllers/expresiones/relacionales/mayorQue.controller');
  const { MenorQue } = require('src/app/controllers/expresiones/relacionales/menorQue.controller');
  const { Igualdad } = require('src/app/controllers/expresiones/relacionales/igualdad.controller');
  const { Diferencia } = require('src/app/controllers/expresiones/relacionales/diferencia.controller');
  // LOGICAS
  const { And } = require('src/app/controllers/expresiones/logicas/and.controller');
  const { Or } = require('src/app/controllers/expresiones/logicas/or.controller');
  const { Not } = require('src/app/controllers/expresiones/logicas/not.controller');

  const { Query } = require('src/app/controllers/instrucciones/query.controller');
  const { PathExpr } = require('src/app/controllers/instrucciones/path-expr.controller');
  const { AxisStep } = require('src/app/controllers/instrucciones/axis-step.controller');
  const { ForwardStep } = require('src/app/controllers/instrucciones/forward-step.controller');
  const { ReverseStep } = require('src/app/controllers/instrucciones/reverse-step.controller');
  const { MatchesAny } = require('src/app/controllers/instrucciones/matches-any.controller');
  const { PostFixExpr } = require('src/app/controllers/instrucciones/postfix-expr.controller');
  const { Predicate } = require('src/app/controllers/instrucciones/predicate.controller');
  const { KindTest } = require('src/app/controllers/instrucciones/kind-test.controller');

  const { NodoGrafico } = require('src/app/utils/reports/nodoGrafico');

  var arbol;
  var excepciones = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignorar espacios en blanco */
break;
case 1:return 10
break;
case 2:return 8
break;
case 3:return 33
break;
case 4:return 43
break;
case 5:return 18
break;
case 6:return ':'
break;
case 7:return 27
break;
case 8:return 48
break;
case 9:return 49
break;
case 10:return 39
break;
case 11:return 41
break;
case 12:return 6
break;
case 13:return 29
break;
case 14:return 28
break;
case 15:return 17
break;
case 16:return 20
break;
case 17:return 22
break;
case 18:return 21
break;
case 19:return 24
break;
case 20:return 23
break;
case 21:return 53
break;
case 22:return 25
break;
case 23:return 52
break;
case 24:return 30
break;
case 25:return 54
break;
case 26:return 32
break;
case 27:return 31
break;
case 28:return 26
break;
case 29:return 51
break;
case 30:return 56
break;
case 31:return 57
break;
case 32:return 67
break;
case 33:return 65
break;
case 34:return 68
break;
case 35:return 66
break;
case 36:return 69
break;
case 37:return 70
break;
case 38:return 36
break;
case 39:return 58
break;
case 40:return 59
break;
case 41:return 72
break;
case 42:return 73
break;
case 43:return 55
break;
case 44:return 46
break;
case 45:return 45
break;
case 46: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 44; 
break;
case 47:return 5;
break;
case 48:
                            excepciones.push(new Excepcion('Léxico', `Patrón desconocido ${yy_.yytext}`, yy_.yylloc.first_line, yy_.yylloc.first_column));
                            console.log(`Error Léxico: ${yy_.yytext} en la linea ${yy_.yylloc.first_line} y columna ${yy_.yylloc.first_column}`);
                          
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:::)/,/^(?::)/,/^(?:@)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\|)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:last\b)/,/^(?:namespace\b)/,/^(?:node\b)/,/^(?:parent\b)/,/^(?:position\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:=)/,/^(?:!=)/,/^(?:\*)/,/^(?:div\b)/,/^(?:mod\b)/,/^(?:\+)/,/^(?:-)/,/^(?:(([a-zñÑA-Z])[a-zA-ZñÑ0-9_-]*))/,/^(?:(([0-9]+)?\.([0-9]+)+))/,/^(?:([0-9]+))/,/^(?:(((")|('))((?:\\((")|('))|(?:(?!((")|('))).))*)((")|('))))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ascendente;
exports.Parser = ascendente.Parser;
exports.parse = function () { return ascendente.parse.apply(ascendente, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}