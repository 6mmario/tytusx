/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaXPath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,6],$V1=[2,10],$V2=[1,7],$V3=[1,20],$V4=[1,8],$V5=[1,10],$V6=[1,19],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,15],$Vc=[1,16],$Vd=[1,17],$Ve=[1,18],$Vf=[1,21],$Vg=[1,22],$Vh=[1,23],$Vi=[1,24],$Vj=[1,25],$Vk=[1,32],$Vl=[1,41],$Vm=[1,42],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[1,47],$Vs=[1,48],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[1,55],$Vx=[1,54],$Vy=[1,64],$Vz=[1,53],$VA=[1,56],$VB=[1,57],$VC=[1,58],$VD=[1,59],$VE=[1,60],$VF=[1,61],$VG=[1,62],$VH=[1,63],$VI=[1,65],$VJ=[1,66],$VK=[5,6,15,16,18,30,31,44,45,54,55,56,57,58,59,60,61,62,63,64],$VL=[5,6,16],$VM=[5,6,16,44],$VN=[2,37],$VO=[1,121],$VP=[5,6,15,16,30,31,44,45,54,62],$VQ=[5,6,15,16,18,30,31,44,45,54,55,57,58,59,60,61,62,63,64],$VR=[5,6,15,16,30,31,44,45,54,57,58,59,60,61,62,64],$VS=[5,6,15,16,31,44,45,62],$VT=[13,30,46,47,48,49,50,51,52,53,65,66,67,68,69];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"INSTRUCCIONES":4,"EOF":5,"sAnd":6,"INSTRUCCION":7,"PRINT":8,"semicolon":9,"PATHEXPR":10,"NODEXPR":11,"print":12,"lparen":13,"EXPR":14,"rparen":15,"diagonal":16,"STEPEXPR":17,"times":18,"FILTEREXPR":19,"AXISSTEP":20,"FORWARDSTEP":21,"PREDICATELIST":22,"REVERSESTEP":23,"FORWARDAXIS":24,"child":25,"twoPoints":26,"descendant":27,"attribute":28,"self":29,"minus":30,"or":31,"following":32,"sibling":33,"namespace":34,"REVERSEAXIS":35,"ABBREVREVERSESTEP":36,"parent":37,"ancestor":38,"preceding":39,"pointPoint":40,"point":41,"PREDICATELISTP":42,"PREDICATE":43,"lKey":44,"rKey":45,"IntegerLiteral":46,"DoubleLiteral":47,"StringLiteral":48,"CharLiteral":49,"null":50,"true":51,"false":52,"identifier":53,"plus":54,"division":55,"pow":56,"equal":57,"greaterThan":58,"minusThan":59,"greaterEqual":60,"minusEqual":61,"and":62,"mod":63,"notEqual":64,"last":65,"text":66,"atSign":67,"position":68,"node":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"sAnd",9:"semicolon",12:"print",13:"lparen",15:"rparen",16:"diagonal",18:"times",25:"child",26:"twoPoints",27:"descendant",28:"attribute",29:"self",30:"minus",31:"or",32:"following",33:"sibling",34:"namespace",37:"parent",38:"ancestor",39:"preceding",40:"pointPoint",41:"point",44:"lKey",45:"rKey",46:"IntegerLiteral",47:"DoubleLiteral",48:"StringLiteral",49:"CharLiteral",50:"null",51:"true",52:"false",53:"identifier",54:"plus",55:"division",56:"pow",57:"equal",58:"greaterThan",59:"minusThan",60:"greaterEqual",61:"minusEqual",62:"and",63:"mod",64:"notEqual",65:"last",66:"text",67:"atSign",68:"position",69:"node"},
productions_: [0,[3,2],[4,3],[4,1],[7,2],[7,1],[7,1],[8,4],[10,3],[10,4],[10,0],[11,2],[11,2],[17,1],[17,1],[17,1],[20,2],[20,2],[21,2],[24,3],[24,3],[24,3],[24,3],[24,7],[24,3],[24,5],[24,3],[23,2],[23,1],[35,3],[35,3],[35,5],[35,3],[35,7],[36,1],[36,1],[22,1],[22,0],[42,2],[43,3],[19,2],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,2],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,4],[14,4],[14,2],[14,3],[14,3],[14,4],[14,3],[14,4],[14,3],[14,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2:

                                                                                                                            $$[$0-2].push($$[$0-1]);
                                                                                                                            this.$ = $$[$0-2];
                                                                                                                        
break;
case 3:

                                                                                                                            this.$ = [$$[$0]];
                                                                                                                        
break;
case 4:

                        this.$ = $$[$0-1]
                    
break;
case 7:

                                     this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
                             
break;
case 8: case 19:

        this.$ = $$[$0-2]
    
break;
case 9:

        this.$ = $$[$0-3]
    
break;
case 14: case 15:

        this.$ = $$[$0]
    
break;
case 16: case 17:

        this.$ = $$[$0-1]
    
break;
case 18: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35:


    
break;
case 41: case 42:

                                                                                                                            this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
                                                                                                                        
break;
case 43: case 44:

                                                                                                                            this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
                                                                                                                        
break;
case 45:

                                                                                                                            this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column);
                                                                                                                        
break;
case 46:

                                                                                                                            this.$ = new Primitivo(true, _$[$0].first_line, _$[$0].first_column);
                                                                                                                        
break;
case 47:

                                                                                                                            this.$ = new Primitivo(false, _$[$0].first_line, _$[$0].first_column);
                                                                                                                       
break;
case 48:

                                                                                                                            this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
                                                                                                                       
break;
case 49: case 52: case 53:

           
        
break;
case 50: case 51: case 54: case 61:

            
        
break;
case 55: case 62: case 63: case 65: case 66: case 68: case 69: case 70: case 71: case 72: case 73: case 74:


        
break;
case 56:

               
        
break;
case 57:

              
        
break;
case 58: case 59: case 60:

                
        
break;
case 64:

            this.$ =$$[$0-1];
        
break;
case 67:

        
break;
}
},
table: [o($V0,$V1,{3:1,4:2,7:3,8:4,10:5,11:6,14:9,12:$V2,13:$V3,16:$V4,18:$V5,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj}),{1:[3]},{5:[1,26],6:[1,27]},o($V0,[2,3]),{9:[1,28]},o($V0,[2,5]),o($V0,[2,6]),{13:[1,29]},{13:$V3,14:35,16:[1,31],17:30,18:$Vk,19:33,20:34,21:36,23:37,24:38,25:$Vl,27:$Vm,28:$Vn,29:$Vo,30:$V6,32:$Vp,34:$Vq,35:39,36:40,37:$Vr,38:$Vs,39:$Vt,40:$Vu,41:$Vv,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},o($V0,$V1,{10:52,16:$V4,18:$Vw,30:$Vx,31:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ}),o($V0,$V1,{10:67,16:$V4}),o($VK,[2,41]),o($VK,[2,42]),o($VK,[2,43]),o($VK,[2,44]),o($VK,[2,45]),o($VK,[2,46]),o($VK,[2,47]),o($VK,[2,48]),{13:$V3,14:68,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:69,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:[1,70]},{13:[1,71]},{13:$V3,14:72,18:[1,73],30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:[1,74]},{13:[1,75]},{1:[2,1]},o($V0,$V1,{8:4,10:5,11:6,14:9,7:76,12:$V2,13:$V3,16:$V4,18:$V5,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj}),o($V0,[2,4]),{13:$V3,14:77,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},o($V0,$V1,{10:78,16:$V4}),{13:$V3,14:35,17:79,18:$Vk,19:33,20:34,21:36,23:37,24:38,25:$Vl,27:$Vm,28:$Vn,29:$Vo,30:$V6,32:$Vp,34:$Vq,35:39,36:40,37:$Vr,38:$Vs,39:$Vt,40:$Vu,41:$Vv,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},o($VL,[2,13]),o($VL,[2,14]),o($VL,[2,15]),o($VM,$VN,{22:80,42:81,18:$Vw,30:$Vx,31:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ}),o($VM,$VN,{42:81,22:82}),o($VM,$VN,{42:81,22:83}),{13:$V3,14:84,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:85,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},o($VM,[2,28]),{26:[1,86]},{26:[1,87],30:[1,88]},{26:[1,89]},{26:[1,90]},{26:[1,91],30:[1,92]},{26:[1,93]},{26:[1,94]},{26:[1,95],30:[1,96]},{26:[1,98],30:[1,97]},o($VM,[2,34]),o($VM,[2,35]),o($V0,[2,11]),{13:$V3,14:99,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:100,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:101,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:102,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:103,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:104,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:105,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:106,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:107,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:108,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:109,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:110,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:111,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},{13:$V3,14:112,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},o($V0,[2,12]),o($VK,[2,49]),{15:[1,113],18:$Vw,30:$Vx,31:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ},{15:[1,114]},{15:[1,115]},o($VK,[2,67]),o($VK,[2,74]),{15:[1,116]},{15:[1,117]},o($V0,[2,2]),{15:[1,118],18:$Vw,30:$Vx,31:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ},o($V0,[2,8]),o($V0,$V1,{10:119,16:$V4}),o($VL,[2,40],{43:120,44:$VO}),o($VM,[2,36]),o($VL,[2,16],{43:120,44:$VO}),o($VL,[2,17],{43:120,44:$VO}),o($VM,[2,18],{18:$Vw,30:$Vx,31:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ}),o($VM,[2,27],{18:$Vw,30:$Vx,31:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ}),{26:[1,122]},{26:[1,123]},{31:[1,124]},{26:[1,125]},{26:[1,126]},{26:[1,127]},{33:[1,128]},{26:[1,129]},{26:[1,130]},{26:[1,131]},{31:[1,132]},{33:[1,133]},{26:[1,134]},o($VP,[2,50],{18:$Vw,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,63:$VI,64:$VJ}),o($VP,[2,51],{18:$Vw,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,63:$VI,64:$VJ}),o($VQ,[2,52],{56:$VB}),o($VQ,[2,53],{56:$VB}),o($VK,[2,54]),o($VR,[2,55],{18:$Vw,55:$VA,56:$VB,63:$VI}),o($VR,[2,56],{18:$Vw,55:$VA,56:$VB,63:$VI}),o($VR,[2,57],{18:$Vw,55:$VA,56:$VB,63:$VI}),o($VR,[2,58],{18:$Vw,55:$VA,56:$VB,63:$VI}),o($VR,[2,59],{18:$Vw,55:$VA,56:$VB,63:$VI}),o($VS,[2,60],{18:$Vw,30:$Vx,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,63:$VI,64:$VJ}),o($VS,[2,61],{18:$Vw,30:$Vx,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,63:$VI,64:$VJ}),o($VQ,[2,62],{56:$VB}),o($VR,[2,63],{18:$Vw,55:$VA,56:$VB,63:$VI}),o($VK,[2,64]),o($VK,[2,68],{14:135,13:$V3,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj}),o($VK,[2,69],{14:136,13:$V3,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj}),o($VK,[2,71],{14:137,13:$V3,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj}),o($VK,[2,73],{14:138,13:$V3,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj}),{9:[2,7]},o($V0,[2,9]),o($VM,[2,38]),{13:$V3,14:139,30:$V6,46:$V7,47:$V8,48:$V9,49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,65:$Vf,66:$Vg,67:$Vh,68:$Vi,69:$Vj},o($VT,[2,19]),o($VT,[2,20]),{30:[1,140]},o($VT,[2,21]),o($VT,[2,22]),o($VT,[2,24]),{26:[1,141]},o($VT,[2,26]),o($VT,[2,29]),o($VT,[2,30]),{30:[1,142]},{26:[1,143]},o($VT,[2,32]),o($VK,[2,65]),o($VK,[2,66]),o($VK,[2,70]),o($VK,[2,72]),{18:$Vw,30:$Vx,31:$Vy,45:[1,144],54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ},{29:[1,145]},{26:[1,146]},{29:[1,147]},{26:[1,148]},o($VM,[2,39]),{26:[1,149]},o($VT,[2,25]),{26:[1,150]},o($VT,[2,31]),{26:[1,151]},{26:[1,152]},o($VT,[2,23]),o($VT,[2,33])],
defaultActions: {26:[2,1],118:[2,7]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip whitespace */
break;
case 2:return 12;
break;
case 3:return 55
break;
case 4:return 63;
break;
case 5:return 62;
break;
case 6:return 31;
break;
case 7:return 25;
break;
case 8:return 38;
break;
case 9:return 33;
break;
case 10:return 28;
break;
case 11:return 27;
break;
case 12:return 32;
break;
case 13:return 34;
break;
case 14:return 37;
break;
case 15:return 39;
break;
case 16:return 29;
break;
case 17:return 'not';
break;
case 18:return 65;
break;
case 19:return 66;
break;
case 20:return 68;
break;
case 21:return 69;
break;
case 22:return 40
break;
case 23:return 41;
break;
case 24:return 67
break;
case 25:return 54;
break;
case 26:return 30;
break;
case 27:return 18;
break;
case 28:return 16;
break;
case 29:return 56;
break;
case 30:return 61;
break;
case 31:return 60;
break;
case 32:return 57;
break;
case 33:return 64;
break;
case 34:return 59;
break;
case 35:return 58;
break;
case 36:return 9;
break;
case 37:return 13;
break;
case 38:return 15;
break;
case 39:return 44;
break;
case 40:return 45;
break;
case 41:return 'apostrophe';
break;
case 42:return 6;
break;
case 43:return 26;
break;
case 44:return 47;
break;
case 45:return 46;
break;
case 46:return 53;
break;
case 47:return 48
break;
case 48:return 49
break;
case 49:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 50:return 5
break;
}
},
rules: [/^(?:\(:.*.:\))/i,/^(?:\s+)/i,/^(?:print\b)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:child\b)/i,/^(?:ancestor\b)/i,/^(?:sibling\b)/i,/^(?:attribute\b)/i,/^(?:descendant\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:not\b)/i,/^(?:last\b)/i,/^(?:text\b)/i,/^(?:position\b)/i,/^(?:node\b)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^\^)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:')/i,/^(?:\|)/i,/^(?::)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaXPath;
exports.Parser = gramaticaXPath.Parser;
exports.parse = function () { return gramaticaXPath.parse.apply(gramaticaXPath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}